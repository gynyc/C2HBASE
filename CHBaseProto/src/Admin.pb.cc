// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Admin.proto

#include "Admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Admin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpenRegionRequest_RegionOpenInfo_Admin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionInfo_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionSpecifier_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Admin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfo_Admin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerName_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Admin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateFavoredNodesRequest_RegionUpdateInfo_Admin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Admin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WALEntry_Admin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WAL_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WALKey_WAL_2eproto;
namespace hbase {
namespace pb {
class GetRegionInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRegionInfoRequest> _instance;
} _GetRegionInfoRequest_default_instance_;
class GetRegionInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRegionInfoResponse> _instance;
} _GetRegionInfoResponse_default_instance_;
class GetStoreFileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStoreFileRequest> _instance;
} _GetStoreFileRequest_default_instance_;
class GetStoreFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStoreFileResponse> _instance;
} _GetStoreFileResponse_default_instance_;
class GetOnlineRegionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOnlineRegionRequest> _instance;
} _GetOnlineRegionRequest_default_instance_;
class GetOnlineRegionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOnlineRegionResponse> _instance;
} _GetOnlineRegionResponse_default_instance_;
class OpenRegionRequest_RegionOpenInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenRegionRequest_RegionOpenInfo> _instance;
} _OpenRegionRequest_RegionOpenInfo_default_instance_;
class OpenRegionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenRegionRequest> _instance;
} _OpenRegionRequest_default_instance_;
class OpenRegionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenRegionResponse> _instance;
} _OpenRegionResponse_default_instance_;
class WarmupRegionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WarmupRegionRequest> _instance;
} _WarmupRegionRequest_default_instance_;
class WarmupRegionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WarmupRegionResponse> _instance;
} _WarmupRegionResponse_default_instance_;
class CloseRegionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseRegionRequest> _instance;
} _CloseRegionRequest_default_instance_;
class CloseRegionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseRegionResponse> _instance;
} _CloseRegionResponse_default_instance_;
class FlushRegionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushRegionRequest> _instance;
} _FlushRegionRequest_default_instance_;
class FlushRegionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushRegionResponse> _instance;
} _FlushRegionResponse_default_instance_;
class SplitRegionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitRegionRequest> _instance;
} _SplitRegionRequest_default_instance_;
class SplitRegionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitRegionResponse> _instance;
} _SplitRegionResponse_default_instance_;
class CompactRegionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompactRegionRequest> _instance;
} _CompactRegionRequest_default_instance_;
class CompactRegionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompactRegionResponse> _instance;
} _CompactRegionResponse_default_instance_;
class UpdateFavoredNodesRequest_RegionUpdateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFavoredNodesRequest_RegionUpdateInfo> _instance;
} _UpdateFavoredNodesRequest_RegionUpdateInfo_default_instance_;
class UpdateFavoredNodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFavoredNodesRequest> _instance;
} _UpdateFavoredNodesRequest_default_instance_;
class UpdateFavoredNodesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFavoredNodesResponse> _instance;
} _UpdateFavoredNodesResponse_default_instance_;
class MergeRegionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MergeRegionsRequest> _instance;
} _MergeRegionsRequest_default_instance_;
class MergeRegionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MergeRegionsResponse> _instance;
} _MergeRegionsResponse_default_instance_;
class WALEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WALEntry> _instance;
} _WALEntry_default_instance_;
class ReplicateWALEntryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicateWALEntryRequest> _instance;
} _ReplicateWALEntryRequest_default_instance_;
class ReplicateWALEntryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicateWALEntryResponse> _instance;
} _ReplicateWALEntryResponse_default_instance_;
class RollWALWriterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RollWALWriterRequest> _instance;
} _RollWALWriterRequest_default_instance_;
class RollWALWriterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RollWALWriterResponse> _instance;
} _RollWALWriterResponse_default_instance_;
class StopServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopServerRequest> _instance;
} _StopServerRequest_default_instance_;
class StopServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopServerResponse> _instance;
} _StopServerResponse_default_instance_;
class GetServerInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServerInfoRequest> _instance;
} _GetServerInfoRequest_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfo> _instance;
} _ServerInfo_default_instance_;
class GetServerInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetServerInfoResponse> _instance;
} _GetServerInfoResponse_default_instance_;
class UpdateConfigurationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateConfigurationRequest> _instance;
} _UpdateConfigurationRequest_default_instance_;
class UpdateConfigurationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateConfigurationResponse> _instance;
} _UpdateConfigurationResponse_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_CloseRegionRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CloseRegionRequest_default_instance_;
    new (ptr) ::hbase::pb::CloseRegionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CloseRegionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CloseRegionRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CloseRegionRequest_Admin_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_ServerName_HBase_2eproto.base,}};

static void InitDefaultsscc_info_CloseRegionResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CloseRegionResponse_default_instance_;
    new (ptr) ::hbase::pb::CloseRegionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CloseRegionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseRegionResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CloseRegionResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_CompactRegionRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CompactRegionRequest_default_instance_;
    new (ptr) ::hbase::pb::CompactRegionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CompactRegionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompactRegionRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CompactRegionRequest_Admin_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,}};

static void InitDefaultsscc_info_CompactRegionResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CompactRegionResponse_default_instance_;
    new (ptr) ::hbase::pb::CompactRegionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CompactRegionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactRegionResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CompactRegionResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_FlushRegionRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FlushRegionRequest_default_instance_;
    new (ptr) ::hbase::pb::FlushRegionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FlushRegionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushRegionRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FlushRegionRequest_Admin_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,}};

static void InitDefaultsscc_info_FlushRegionResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FlushRegionResponse_default_instance_;
    new (ptr) ::hbase::pb::FlushRegionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FlushRegionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushRegionResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FlushRegionResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_GetOnlineRegionRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetOnlineRegionRequest_default_instance_;
    new (ptr) ::hbase::pb::GetOnlineRegionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetOnlineRegionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOnlineRegionRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetOnlineRegionRequest_Admin_2eproto}, {}};

static void InitDefaultsscc_info_GetOnlineRegionResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetOnlineRegionResponse_default_instance_;
    new (ptr) ::hbase::pb::GetOnlineRegionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetOnlineRegionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOnlineRegionResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetOnlineRegionResponse_Admin_2eproto}, {
      &scc_info_RegionInfo_HBase_2eproto.base,}};

static void InitDefaultsscc_info_GetRegionInfoRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetRegionInfoRequest_default_instance_;
    new (ptr) ::hbase::pb::GetRegionInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetRegionInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRegionInfoRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetRegionInfoRequest_Admin_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,}};

static void InitDefaultsscc_info_GetRegionInfoResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetRegionInfoResponse_default_instance_;
    new (ptr) ::hbase::pb::GetRegionInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetRegionInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRegionInfoResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetRegionInfoResponse_Admin_2eproto}, {
      &scc_info_RegionInfo_HBase_2eproto.base,}};

static void InitDefaultsscc_info_GetServerInfoRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetServerInfoRequest_default_instance_;
    new (ptr) ::hbase::pb::GetServerInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetServerInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetServerInfoRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetServerInfoRequest_Admin_2eproto}, {}};

static void InitDefaultsscc_info_GetServerInfoResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetServerInfoResponse_default_instance_;
    new (ptr) ::hbase::pb::GetServerInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetServerInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetServerInfoResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetServerInfoResponse_Admin_2eproto}, {
      &scc_info_ServerInfo_Admin_2eproto.base,}};

static void InitDefaultsscc_info_GetStoreFileRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetStoreFileRequest_default_instance_;
    new (ptr) ::hbase::pb::GetStoreFileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetStoreFileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStoreFileRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetStoreFileRequest_Admin_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,}};

static void InitDefaultsscc_info_GetStoreFileResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetStoreFileResponse_default_instance_;
    new (ptr) ::hbase::pb::GetStoreFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetStoreFileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStoreFileResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetStoreFileResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_MergeRegionsRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MergeRegionsRequest_default_instance_;
    new (ptr) ::hbase::pb::MergeRegionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MergeRegionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MergeRegionsRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MergeRegionsRequest_Admin_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,}};

static void InitDefaultsscc_info_MergeRegionsResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MergeRegionsResponse_default_instance_;
    new (ptr) ::hbase::pb::MergeRegionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MergeRegionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MergeRegionsResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MergeRegionsResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_OpenRegionRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_OpenRegionRequest_default_instance_;
    new (ptr) ::hbase::pb::OpenRegionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::OpenRegionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenRegionRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OpenRegionRequest_Admin_2eproto}, {
      &scc_info_OpenRegionRequest_RegionOpenInfo_Admin_2eproto.base,}};

static void InitDefaultsscc_info_OpenRegionRequest_RegionOpenInfo_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_OpenRegionRequest_RegionOpenInfo_default_instance_;
    new (ptr) ::hbase::pb::OpenRegionRequest_RegionOpenInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::OpenRegionRequest_RegionOpenInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpenRegionRequest_RegionOpenInfo_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_OpenRegionRequest_RegionOpenInfo_Admin_2eproto}, {
      &scc_info_RegionInfo_HBase_2eproto.base,
      &scc_info_ServerName_HBase_2eproto.base,}};

static void InitDefaultsscc_info_OpenRegionResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_OpenRegionResponse_default_instance_;
    new (ptr) ::hbase::pb::OpenRegionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::OpenRegionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenRegionResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OpenRegionResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_ReplicateWALEntryRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ReplicateWALEntryRequest_default_instance_;
    new (ptr) ::hbase::pb::ReplicateWALEntryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ReplicateWALEntryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplicateWALEntryRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReplicateWALEntryRequest_Admin_2eproto}, {
      &scc_info_WALEntry_Admin_2eproto.base,}};

static void InitDefaultsscc_info_ReplicateWALEntryResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ReplicateWALEntryResponse_default_instance_;
    new (ptr) ::hbase::pb::ReplicateWALEntryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ReplicateWALEntryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicateWALEntryResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReplicateWALEntryResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_RollWALWriterRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RollWALWriterRequest_default_instance_;
    new (ptr) ::hbase::pb::RollWALWriterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RollWALWriterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RollWALWriterRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RollWALWriterRequest_Admin_2eproto}, {}};

static void InitDefaultsscc_info_RollWALWriterResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RollWALWriterResponse_default_instance_;
    new (ptr) ::hbase::pb::RollWALWriterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RollWALWriterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RollWALWriterResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RollWALWriterResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_ServerInfo_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ServerInfo_default_instance_;
    new (ptr) ::hbase::pb::ServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfo_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ServerInfo_Admin_2eproto}, {
      &scc_info_ServerName_HBase_2eproto.base,}};

static void InitDefaultsscc_info_SplitRegionRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SplitRegionRequest_default_instance_;
    new (ptr) ::hbase::pb::SplitRegionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SplitRegionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SplitRegionRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SplitRegionRequest_Admin_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,}};

static void InitDefaultsscc_info_SplitRegionResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SplitRegionResponse_default_instance_;
    new (ptr) ::hbase::pb::SplitRegionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SplitRegionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitRegionResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SplitRegionResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_StopServerRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_StopServerRequest_default_instance_;
    new (ptr) ::hbase::pb::StopServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::StopServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopServerRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StopServerRequest_Admin_2eproto}, {}};

static void InitDefaultsscc_info_StopServerResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_StopServerResponse_default_instance_;
    new (ptr) ::hbase::pb::StopServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::StopServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopServerResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StopServerResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_UpdateConfigurationRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_UpdateConfigurationRequest_default_instance_;
    new (ptr) ::hbase::pb::UpdateConfigurationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::UpdateConfigurationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateConfigurationRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateConfigurationRequest_Admin_2eproto}, {}};

static void InitDefaultsscc_info_UpdateConfigurationResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_UpdateConfigurationResponse_default_instance_;
    new (ptr) ::hbase::pb::UpdateConfigurationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::UpdateConfigurationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateConfigurationResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateConfigurationResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_UpdateFavoredNodesRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_UpdateFavoredNodesRequest_default_instance_;
    new (ptr) ::hbase::pb::UpdateFavoredNodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::UpdateFavoredNodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateFavoredNodesRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateFavoredNodesRequest_Admin_2eproto}, {
      &scc_info_UpdateFavoredNodesRequest_RegionUpdateInfo_Admin_2eproto.base,}};

static void InitDefaultsscc_info_UpdateFavoredNodesRequest_RegionUpdateInfo_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_UpdateFavoredNodesRequest_RegionUpdateInfo_default_instance_;
    new (ptr) ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateFavoredNodesRequest_RegionUpdateInfo_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_UpdateFavoredNodesRequest_RegionUpdateInfo_Admin_2eproto}, {
      &scc_info_RegionInfo_HBase_2eproto.base,
      &scc_info_ServerName_HBase_2eproto.base,}};

static void InitDefaultsscc_info_UpdateFavoredNodesResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_UpdateFavoredNodesResponse_default_instance_;
    new (ptr) ::hbase::pb::UpdateFavoredNodesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::UpdateFavoredNodesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateFavoredNodesResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateFavoredNodesResponse_Admin_2eproto}, {}};

static void InitDefaultsscc_info_WALEntry_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_WALEntry_default_instance_;
    new (ptr) ::hbase::pb::WALEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::WALEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WALEntry_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WALEntry_Admin_2eproto}, {
      &scc_info_WALKey_WAL_2eproto.base,}};

static void InitDefaultsscc_info_WarmupRegionRequest_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_WarmupRegionRequest_default_instance_;
    new (ptr) ::hbase::pb::WarmupRegionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::WarmupRegionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WarmupRegionRequest_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WarmupRegionRequest_Admin_2eproto}, {
      &scc_info_RegionInfo_HBase_2eproto.base,}};

static void InitDefaultsscc_info_WarmupRegionResponse_Admin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_WarmupRegionResponse_default_instance_;
    new (ptr) ::hbase::pb::WarmupRegionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::WarmupRegionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WarmupRegionResponse_Admin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WarmupRegionResponse_Admin_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Admin_2eproto[36];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Admin_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Admin_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Admin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRegionInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRegionInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRegionInfoRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRegionInfoRequest, compaction_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRegionInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRegionInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRegionInfoResponse, region_info_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRegionInfoResponse, compaction_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetStoreFileRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetStoreFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetStoreFileRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetStoreFileRequest, family_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetStoreFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetStoreFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetStoreFileResponse, store_file_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetOnlineRegionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetOnlineRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetOnlineRegionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetOnlineRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetOnlineRegionResponse, region_info_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest_RegionOpenInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest_RegionOpenInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest_RegionOpenInfo, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest_RegionOpenInfo, version_of_offline_node_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest_RegionOpenInfo, favored_nodes_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest, open_info_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest, serverstartcode_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionRequest, master_system_time_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::OpenRegionResponse, opening_state_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WarmupRegionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WarmupRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WarmupRegionRequest, regioninfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WarmupRegionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WarmupRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionRequest, version_of_closing_node_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionRequest, transition_in_zk_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionRequest, destination_server_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionRequest, serverstartcode_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CloseRegionResponse, closed_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionRequest, if_older_than_ts_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionRequest, write_flush_wal_marker_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionResponse, last_flush_time_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionResponse, flushed_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushRegionResponse, wrote_flush_wal_marker_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitRegionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitRegionRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitRegionRequest, split_point_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitRegionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactRegionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactRegionRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactRegionRequest, major_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactRegionRequest, family_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactRegionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo, favored_nodes_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesRequest, update_info_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateFavoredNodesResponse, response_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MergeRegionsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MergeRegionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MergeRegionsRequest, region_a_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MergeRegionsRequest, region_b_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MergeRegionsRequest, forcible_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MergeRegionsRequest, master_system_time_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MergeRegionsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MergeRegionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALEntry, key_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALEntry, key_value_bytes_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALEntry, associated_cell_count_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicateWALEntryRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicateWALEntryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicateWALEntryRequest, entry_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicateWALEntryRequest, replicationclusterid_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicateWALEntryRequest, sourcebasenamespacedirpath_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicateWALEntryRequest, sourcehfilearchivedirpath_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicateWALEntryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicateWALEntryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RollWALWriterRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RollWALWriterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RollWALWriterResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RollWALWriterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RollWALWriterResponse, region_to_flush_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StopServerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StopServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StopServerRequest, reason_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StopServerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StopServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetServerInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetServerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerInfo, server_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerInfo, webui_port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetServerInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetServerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetServerInfoResponse, server_info_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateConfigurationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateConfigurationResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UpdateConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hbase::pb::GetRegionInfoRequest)},
  { 9, 16, sizeof(::hbase::pb::GetRegionInfoResponse)},
  { 18, 25, sizeof(::hbase::pb::GetStoreFileRequest)},
  { 27, 33, sizeof(::hbase::pb::GetStoreFileResponse)},
  { 34, 39, sizeof(::hbase::pb::GetOnlineRegionRequest)},
  { 39, 45, sizeof(::hbase::pb::GetOnlineRegionResponse)},
  { 46, 54, sizeof(::hbase::pb::OpenRegionRequest_RegionOpenInfo)},
  { 57, 65, sizeof(::hbase::pb::OpenRegionRequest)},
  { 68, 74, sizeof(::hbase::pb::OpenRegionResponse)},
  { 75, 81, sizeof(::hbase::pb::WarmupRegionRequest)},
  { 82, 87, sizeof(::hbase::pb::WarmupRegionResponse)},
  { 87, 97, sizeof(::hbase::pb::CloseRegionRequest)},
  { 102, 108, sizeof(::hbase::pb::CloseRegionResponse)},
  { 109, 117, sizeof(::hbase::pb::FlushRegionRequest)},
  { 120, 128, sizeof(::hbase::pb::FlushRegionResponse)},
  { 131, 138, sizeof(::hbase::pb::SplitRegionRequest)},
  { 140, 145, sizeof(::hbase::pb::SplitRegionResponse)},
  { 145, 153, sizeof(::hbase::pb::CompactRegionRequest)},
  { 156, 161, sizeof(::hbase::pb::CompactRegionResponse)},
  { 161, 168, sizeof(::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo)},
  { 170, 176, sizeof(::hbase::pb::UpdateFavoredNodesRequest)},
  { 177, 183, sizeof(::hbase::pb::UpdateFavoredNodesResponse)},
  { 184, 193, sizeof(::hbase::pb::MergeRegionsRequest)},
  { 197, 202, sizeof(::hbase::pb::MergeRegionsResponse)},
  { 202, 210, sizeof(::hbase::pb::WALEntry)},
  { 213, 222, sizeof(::hbase::pb::ReplicateWALEntryRequest)},
  { 226, 231, sizeof(::hbase::pb::ReplicateWALEntryResponse)},
  { 231, 236, sizeof(::hbase::pb::RollWALWriterRequest)},
  { 236, 242, sizeof(::hbase::pb::RollWALWriterResponse)},
  { 243, 249, sizeof(::hbase::pb::StopServerRequest)},
  { 250, 255, sizeof(::hbase::pb::StopServerResponse)},
  { 255, 260, sizeof(::hbase::pb::GetServerInfoRequest)},
  { 260, 267, sizeof(::hbase::pb::ServerInfo)},
  { 269, 275, sizeof(::hbase::pb::GetServerInfoResponse)},
  { 276, 281, sizeof(::hbase::pb::UpdateConfigurationRequest)},
  { 281, 286, sizeof(::hbase::pb::UpdateConfigurationResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetRegionInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetRegionInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetStoreFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetStoreFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetOnlineRegionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetOnlineRegionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_OpenRegionRequest_RegionOpenInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_OpenRegionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_OpenRegionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_WarmupRegionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_WarmupRegionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CloseRegionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CloseRegionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FlushRegionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FlushRegionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SplitRegionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SplitRegionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CompactRegionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CompactRegionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_UpdateFavoredNodesRequest_RegionUpdateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_UpdateFavoredNodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_UpdateFavoredNodesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MergeRegionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MergeRegionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_WALEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ReplicateWALEntryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ReplicateWALEntryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RollWALWriterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RollWALWriterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_StopServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_StopServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetServerInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetServerInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_UpdateConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_UpdateConfigurationResponse_default_instance_),
};

const char descriptor_table_protodef_Admin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Admin.proto\022\010hbase.pb\032\013HBase.proto\032\tWA"
  "L.proto\"[\n\024GetRegionInfoRequest\022)\n\006regio"
  "n\030\001 \002(\0132\031.hbase.pb.RegionSpecifier\022\030\n\020co"
  "mpaction_state\030\002 \001(\010\"\325\001\n\025GetRegionInfoRe"
  "sponse\022)\n\013region_info\030\001 \002(\0132\024.hbase.pb.R"
  "egionInfo\022I\n\020compaction_state\030\002 \001(\0162/.hb"
  "ase.pb.GetRegionInfoResponse.CompactionS"
  "tate\"F\n\017CompactionState\022\010\n\004NONE\020\000\022\t\n\005MIN"
  "OR\020\001\022\t\n\005MAJOR\020\002\022\023\n\017MAJOR_AND_MINOR\020\003\"P\n\023"
  "GetStoreFileRequest\022)\n\006region\030\001 \002(\0132\031.hb"
  "ase.pb.RegionSpecifier\022\016\n\006family\030\002 \003(\014\"*"
  "\n\024GetStoreFileResponse\022\022\n\nstore_file\030\001 \003"
  "(\t\"\030\n\026GetOnlineRegionRequest\"D\n\027GetOnlin"
  "eRegionResponse\022)\n\013region_info\030\001 \003(\0132\024.h"
  "base.pb.RegionInfo\"\216\002\n\021OpenRegionRequest"
  "\022=\n\topen_info\030\001 \003(\0132*.hbase.pb.OpenRegio"
  "nRequest.RegionOpenInfo\022\027\n\017serverStartCo"
  "de\030\002 \001(\004\022\032\n\022master_system_time\030\005 \001(\004\032\204\001\n"
  "\016RegionOpenInfo\022$\n\006region\030\001 \002(\0132\024.hbase."
  "pb.RegionInfo\022\037\n\027version_of_offline_node"
  "\030\002 \001(\r\022+\n\rfavored_nodes\030\003 \003(\0132\024.hbase.pb"
  ".ServerName\"\246\001\n\022OpenRegionResponse\022F\n\rop"
  "ening_state\030\001 \003(\0162/.hbase.pb.OpenRegionR"
  "esponse.RegionOpeningState\"H\n\022RegionOpen"
  "ingState\022\n\n\006OPENED\020\000\022\022\n\016ALREADY_OPENED\020\001"
  "\022\022\n\016FAILED_OPENING\020\002\"\?\n\023WarmupRegionRequ"
  "est\022(\n\nregionInfo\030\001 \002(\0132\024.hbase.pb.Regio"
  "nInfo\"\026\n\024WarmupRegionResponse\"\313\001\n\022CloseR"
  "egionRequest\022)\n\006region\030\001 \002(\0132\031.hbase.pb."
  "RegionSpecifier\022\037\n\027version_of_closing_no"
  "de\030\002 \001(\r\022\036\n\020transition_in_ZK\030\003 \001(\010:\004true"
  "\0220\n\022destination_server\030\004 \001(\0132\024.hbase.pb."
  "ServerName\022\027\n\017serverStartCode\030\005 \001(\004\"%\n\023C"
  "loseRegionResponse\022\016\n\006closed\030\001 \002(\010\"y\n\022Fl"
  "ushRegionRequest\022)\n\006region\030\001 \002(\0132\031.hbase"
  ".pb.RegionSpecifier\022\030\n\020if_older_than_ts\030"
  "\002 \001(\004\022\036\n\026write_flush_wal_marker\030\003 \001(\010\"_\n"
  "\023FlushRegionResponse\022\027\n\017last_flush_time\030"
  "\001 \002(\004\022\017\n\007flushed\030\002 \001(\010\022\036\n\026wrote_flush_wa"
  "l_marker\030\003 \001(\010\"T\n\022SplitRegionRequest\022)\n\006"
  "region\030\001 \002(\0132\031.hbase.pb.RegionSpecifier\022"
  "\023\n\013split_point\030\002 \001(\014\"\025\n\023SplitRegionRespo"
  "nse\"`\n\024CompactRegionRequest\022)\n\006region\030\001 "
  "\002(\0132\031.hbase.pb.RegionSpecifier\022\r\n\005major\030"
  "\002 \001(\010\022\016\n\006family\030\003 \001(\014\"\027\n\025CompactRegionRe"
  "sponse\"\315\001\n\031UpdateFavoredNodesRequest\022I\n\013"
  "update_info\030\001 \003(\01324.hbase.pb.UpdateFavor"
  "edNodesRequest.RegionUpdateInfo\032e\n\020Regio"
  "nUpdateInfo\022$\n\006region\030\001 \002(\0132\024.hbase.pb.R"
  "egionInfo\022+\n\rfavored_nodes\030\002 \003(\0132\024.hbase"
  ".pb.ServerName\".\n\032UpdateFavoredNodesResp"
  "onse\022\020\n\010response\030\001 \001(\r\"\244\001\n\023MergeRegionsR"
  "equest\022+\n\010region_a\030\001 \002(\0132\031.hbase.pb.Regi"
  "onSpecifier\022+\n\010region_b\030\002 \002(\0132\031.hbase.pb"
  ".RegionSpecifier\022\027\n\010forcible\030\003 \001(\010:\005fals"
  "e\022\032\n\022master_system_time\030\004 \001(\004\"\026\n\024MergeRe"
  "gionsResponse\"a\n\010WALEntry\022\035\n\003key\030\001 \002(\0132\020"
  ".hbase.pb.WALKey\022\027\n\017key_value_bytes\030\002 \003("
  "\014\022\035\n\025associated_cell_count\030\003 \001(\005\"\242\001\n\030Rep"
  "licateWALEntryRequest\022!\n\005entry\030\001 \003(\0132\022.h"
  "base.pb.WALEntry\022\034\n\024replicationClusterId"
  "\030\002 \001(\t\022\"\n\032sourceBaseNamespaceDirPath\030\003 \001"
  "(\t\022!\n\031sourceHFileArchiveDirPath\030\004 \001(\t\"\033\n"
  "\031ReplicateWALEntryResponse\"\026\n\024RollWALWri"
  "terRequest\"0\n\025RollWALWriterResponse\022\027\n\017r"
  "egion_to_flush\030\001 \003(\014\"#\n\021StopServerReques"
  "t\022\016\n\006reason\030\001 \002(\t\"\024\n\022StopServerResponse\""
  "\026\n\024GetServerInfoRequest\"K\n\nServerInfo\022)\n"
  "\013server_name\030\001 \002(\0132\024.hbase.pb.ServerName"
  "\022\022\n\nwebui_port\030\002 \001(\r\"B\n\025GetServerInfoRes"
  "ponse\022)\n\013server_info\030\001 \002(\0132\024.hbase.pb.Se"
  "rverInfo\"\034\n\032UpdateConfigurationRequest\"\035"
  "\n\033UpdateConfigurationResponse2\207\013\n\014AdminS"
  "ervice\022P\n\rGetRegionInfo\022\036.hbase.pb.GetRe"
  "gionInfoRequest\032\037.hbase.pb.GetRegionInfo"
  "Response\022M\n\014GetStoreFile\022\035.hbase.pb.GetS"
  "toreFileRequest\032\036.hbase.pb.GetStoreFileR"
  "esponse\022V\n\017GetOnlineRegion\022 .hbase.pb.Ge"
  "tOnlineRegionRequest\032!.hbase.pb.GetOnlin"
  "eRegionResponse\022G\n\nOpenRegion\022\033.hbase.pb"
  ".OpenRegionRequest\032\034.hbase.pb.OpenRegion"
  "Response\022M\n\014WarmupRegion\022\035.hbase.pb.Warm"
  "upRegionRequest\032\036.hbase.pb.WarmupRegionR"
  "esponse\022J\n\013CloseRegion\022\034.hbase.pb.CloseR"
  "egionRequest\032\035.hbase.pb.CloseRegionRespo"
  "nse\022J\n\013FlushRegion\022\034.hbase.pb.FlushRegio"
  "nRequest\032\035.hbase.pb.FlushRegionResponse\022"
  "J\n\013SplitRegion\022\034.hbase.pb.SplitRegionReq"
  "uest\032\035.hbase.pb.SplitRegionResponse\022P\n\rC"
  "ompactRegion\022\036.hbase.pb.CompactRegionReq"
  "uest\032\037.hbase.pb.CompactRegionResponse\022M\n"
  "\014MergeRegions\022\035.hbase.pb.MergeRegionsReq"
  "uest\032\036.hbase.pb.MergeRegionsResponse\022\\\n\021"
  "ReplicateWALEntry\022\".hbase.pb.ReplicateWA"
  "LEntryRequest\032#.hbase.pb.ReplicateWALEnt"
  "ryResponse\022Q\n\006Replay\022\".hbase.pb.Replicat"
  "eWALEntryRequest\032#.hbase.pb.ReplicateWAL"
  "EntryResponse\022P\n\rRollWALWriter\022\036.hbase.p"
  "b.RollWALWriterRequest\032\037.hbase.pb.RollWA"
  "LWriterResponse\022P\n\rGetServerInfo\022\036.hbase"
  ".pb.GetServerInfoRequest\032\037.hbase.pb.GetS"
  "erverInfoResponse\022G\n\nStopServer\022\033.hbase."
  "pb.StopServerRequest\032\034.hbase.pb.StopServ"
  "erResponse\022_\n\022UpdateFavoredNodes\022#.hbase"
  ".pb.UpdateFavoredNodesRequest\032$.hbase.pb"
  ".UpdateFavoredNodesResponse\022b\n\023UpdateCon"
  "figuration\022$.hbase.pb.UpdateConfiguratio"
  "nRequest\032%.hbase.pb.UpdateConfigurationR"
  "esponseBA\n*org.apache.hadoop.hbase.proto"
  "buf.generatedB\013AdminProtosH\001\210\001\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Admin_2eproto_deps[2] = {
  &::descriptor_table_HBase_2eproto,
  &::descriptor_table_WAL_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Admin_2eproto_sccs[36] = {
  &scc_info_CloseRegionRequest_Admin_2eproto.base,
  &scc_info_CloseRegionResponse_Admin_2eproto.base,
  &scc_info_CompactRegionRequest_Admin_2eproto.base,
  &scc_info_CompactRegionResponse_Admin_2eproto.base,
  &scc_info_FlushRegionRequest_Admin_2eproto.base,
  &scc_info_FlushRegionResponse_Admin_2eproto.base,
  &scc_info_GetOnlineRegionRequest_Admin_2eproto.base,
  &scc_info_GetOnlineRegionResponse_Admin_2eproto.base,
  &scc_info_GetRegionInfoRequest_Admin_2eproto.base,
  &scc_info_GetRegionInfoResponse_Admin_2eproto.base,
  &scc_info_GetServerInfoRequest_Admin_2eproto.base,
  &scc_info_GetServerInfoResponse_Admin_2eproto.base,
  &scc_info_GetStoreFileRequest_Admin_2eproto.base,
  &scc_info_GetStoreFileResponse_Admin_2eproto.base,
  &scc_info_MergeRegionsRequest_Admin_2eproto.base,
  &scc_info_MergeRegionsResponse_Admin_2eproto.base,
  &scc_info_OpenRegionRequest_Admin_2eproto.base,
  &scc_info_OpenRegionRequest_RegionOpenInfo_Admin_2eproto.base,
  &scc_info_OpenRegionResponse_Admin_2eproto.base,
  &scc_info_ReplicateWALEntryRequest_Admin_2eproto.base,
  &scc_info_ReplicateWALEntryResponse_Admin_2eproto.base,
  &scc_info_RollWALWriterRequest_Admin_2eproto.base,
  &scc_info_RollWALWriterResponse_Admin_2eproto.base,
  &scc_info_ServerInfo_Admin_2eproto.base,
  &scc_info_SplitRegionRequest_Admin_2eproto.base,
  &scc_info_SplitRegionResponse_Admin_2eproto.base,
  &scc_info_StopServerRequest_Admin_2eproto.base,
  &scc_info_StopServerResponse_Admin_2eproto.base,
  &scc_info_UpdateConfigurationRequest_Admin_2eproto.base,
  &scc_info_UpdateConfigurationResponse_Admin_2eproto.base,
  &scc_info_UpdateFavoredNodesRequest_Admin_2eproto.base,
  &scc_info_UpdateFavoredNodesRequest_RegionUpdateInfo_Admin_2eproto.base,
  &scc_info_UpdateFavoredNodesResponse_Admin_2eproto.base,
  &scc_info_WALEntry_Admin_2eproto.base,
  &scc_info_WarmupRegionRequest_Admin_2eproto.base,
  &scc_info_WarmupRegionResponse_Admin_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Admin_2eproto_once;
static bool descriptor_table_Admin_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Admin_2eproto = {
  &descriptor_table_Admin_2eproto_initialized, descriptor_table_protodef_Admin_2eproto, "Admin.proto", 4394,
  &descriptor_table_Admin_2eproto_once, descriptor_table_Admin_2eproto_sccs, descriptor_table_Admin_2eproto_deps, 36, 2,
  schemas, file_default_instances, TableStruct_Admin_2eproto::offsets,
  file_level_metadata_Admin_2eproto, 36, file_level_enum_descriptors_Admin_2eproto, file_level_service_descriptors_Admin_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Admin_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Admin_2eproto), true);
namespace hbase {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetRegionInfoResponse_CompactionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Admin_2eproto);
  return file_level_enum_descriptors_Admin_2eproto[0];
}
bool GetRegionInfoResponse_CompactionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetRegionInfoResponse_CompactionState GetRegionInfoResponse::NONE;
constexpr GetRegionInfoResponse_CompactionState GetRegionInfoResponse::MINOR;
constexpr GetRegionInfoResponse_CompactionState GetRegionInfoResponse::MAJOR;
constexpr GetRegionInfoResponse_CompactionState GetRegionInfoResponse::MAJOR_AND_MINOR;
constexpr GetRegionInfoResponse_CompactionState GetRegionInfoResponse::CompactionState_MIN;
constexpr GetRegionInfoResponse_CompactionState GetRegionInfoResponse::CompactionState_MAX;
constexpr int GetRegionInfoResponse::CompactionState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenRegionResponse_RegionOpeningState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Admin_2eproto);
  return file_level_enum_descriptors_Admin_2eproto[1];
}
bool OpenRegionResponse_RegionOpeningState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OpenRegionResponse_RegionOpeningState OpenRegionResponse::OPENED;
constexpr OpenRegionResponse_RegionOpeningState OpenRegionResponse::ALREADY_OPENED;
constexpr OpenRegionResponse_RegionOpeningState OpenRegionResponse::FAILED_OPENING;
constexpr OpenRegionResponse_RegionOpeningState OpenRegionResponse::RegionOpeningState_MIN;
constexpr OpenRegionResponse_RegionOpeningState OpenRegionResponse::RegionOpeningState_MAX;
constexpr int OpenRegionResponse::RegionOpeningState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GetRegionInfoRequest::InitAsDefaultInstance() {
  ::hbase::pb::_GetRegionInfoRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class GetRegionInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRegionInfoRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const GetRegionInfoRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compaction_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionSpecifier&
GetRegionInfoRequest::_Internal::region(const GetRegionInfoRequest* msg) {
  return *msg->region_;
}
void GetRegionInfoRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetRegionInfoRequest::GetRegionInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetRegionInfoRequest)
}
GetRegionInfoRequest::GetRegionInfoRequest(const GetRegionInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  compaction_state_ = from.compaction_state_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetRegionInfoRequest)
}

void GetRegionInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRegionInfoRequest_Admin_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compaction_state_) -
      reinterpret_cast<char*>(&region_)) + sizeof(compaction_state_));
}

GetRegionInfoRequest::~GetRegionInfoRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetRegionInfoRequest)
  SharedDtor();
}

void GetRegionInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void GetRegionInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRegionInfoRequest& GetRegionInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRegionInfoRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void GetRegionInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetRegionInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_ != nullptr);
    region_->Clear();
  }
  compaction_state_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRegionInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compaction_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_compaction_state(&has_bits);
          compaction_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRegionInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetRegionInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compaction_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_compaction_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compaction_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetRegionInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetRegionInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRegionInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetRegionInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // optional bool compaction_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->compaction_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetRegionInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRegionInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetRegionInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // optional bool compaction_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->compaction_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetRegionInfoRequest)
  return target;
}

size_t GetRegionInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetRegionInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool compaction_state = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRegionInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetRegionInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRegionInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetRegionInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetRegionInfoRequest)
    MergeFrom(*source);
  }
}

void GetRegionInfoRequest::MergeFrom(const GetRegionInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetRegionInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      compaction_state_ = from.compaction_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetRegionInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetRegionInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionInfoRequest::CopyFrom(const GetRegionInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetRegionInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void GetRegionInfoRequest::InternalSwap(GetRegionInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_, other->region_);
  swap(compaction_state_, other->compaction_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRegionInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRegionInfoResponse::InitAsDefaultInstance() {
  ::hbase::pb::_GetRegionInfoResponse_default_instance_._instance.get_mutable()->region_info_ = const_cast< ::hbase::pb::RegionInfo*>(
      ::hbase::pb::RegionInfo::internal_default_instance());
}
class GetRegionInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRegionInfoResponse>()._has_bits_);
  static const ::hbase::pb::RegionInfo& region_info(const GetRegionInfoResponse* msg);
  static void set_has_region_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compaction_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionInfo&
GetRegionInfoResponse::_Internal::region_info(const GetRegionInfoResponse* msg) {
  return *msg->region_info_;
}
void GetRegionInfoResponse::clear_region_info() {
  if (region_info_ != nullptr) region_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetRegionInfoResponse::GetRegionInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetRegionInfoResponse)
}
GetRegionInfoResponse::GetRegionInfoResponse(const GetRegionInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_info()) {
    region_info_ = new ::hbase::pb::RegionInfo(*from.region_info_);
  } else {
    region_info_ = nullptr;
  }
  compaction_state_ = from.compaction_state_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetRegionInfoResponse)
}

void GetRegionInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRegionInfoResponse_Admin_2eproto.base);
  ::memset(&region_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compaction_state_) -
      reinterpret_cast<char*>(&region_info_)) + sizeof(compaction_state_));
}

GetRegionInfoResponse::~GetRegionInfoResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetRegionInfoResponse)
  SharedDtor();
}

void GetRegionInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_info_;
}

void GetRegionInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRegionInfoResponse& GetRegionInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRegionInfoResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void GetRegionInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetRegionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_info_ != nullptr);
    region_info_->Clear();
  }
  compaction_state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRegionInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionInfo region_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::GetRegionInfoResponse_CompactionState_IsValid(val))) {
            set_compaction_state(static_cast<::hbase::pb::GetRegionInfoResponse_CompactionState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRegionInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetRegionInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo region_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::GetRegionInfoResponse_CompactionState_IsValid(value)) {
            set_compaction_state(static_cast< ::hbase::pb::GetRegionInfoResponse_CompactionState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetRegionInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetRegionInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRegionInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetRegionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo region_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region_info(this), output);
  }

  // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->compaction_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetRegionInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRegionInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetRegionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo region_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region_info(this), target);
  }

  // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->compaction_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetRegionInfoResponse)
  return target;
}

size_t GetRegionInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetRegionInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionInfo region_info = 1;
  if (has_region_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_info_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compaction_state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRegionInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetRegionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRegionInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetRegionInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetRegionInfoResponse)
    MergeFrom(*source);
  }
}

void GetRegionInfoResponse::MergeFrom(const GetRegionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetRegionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region_info()->::hbase::pb::RegionInfo::MergeFrom(from.region_info());
    }
    if (cached_has_bits & 0x00000002u) {
      compaction_state_ = from.compaction_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetRegionInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetRegionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionInfoResponse::CopyFrom(const GetRegionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetRegionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_region_info()) {
    if (!this->region_info_->IsInitialized()) return false;
  }
  return true;
}

void GetRegionInfoResponse::InternalSwap(GetRegionInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_info_, other->region_info_);
  swap(compaction_state_, other->compaction_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRegionInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStoreFileRequest::InitAsDefaultInstance() {
  ::hbase::pb::_GetStoreFileRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class GetStoreFileRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStoreFileRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const GetStoreFileRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::RegionSpecifier&
GetStoreFileRequest::_Internal::region(const GetStoreFileRequest* msg) {
  return *msg->region_;
}
void GetStoreFileRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetStoreFileRequest::GetStoreFileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetStoreFileRequest)
}
GetStoreFileRequest::GetStoreFileRequest(const GetStoreFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      family_(from.family_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetStoreFileRequest)
}

void GetStoreFileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStoreFileRequest_Admin_2eproto.base);
  region_ = nullptr;
}

GetStoreFileRequest::~GetStoreFileRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetStoreFileRequest)
  SharedDtor();
}

void GetStoreFileRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void GetStoreFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStoreFileRequest& GetStoreFileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStoreFileRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void GetStoreFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetStoreFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  family_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_ != nullptr);
    region_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStoreFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_family(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStoreFileRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetStoreFileRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes family = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetStoreFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetStoreFileRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStoreFileRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetStoreFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // repeated bytes family = 2;
  for (int i = 0, n = this->family_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->family(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetStoreFileRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStoreFileRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetStoreFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // repeated bytes family = 2;
  for (int i = 0, n = this->family_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->family(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetStoreFileRequest)
  return target;
}

size_t GetStoreFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetStoreFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes family = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->family_size());
  for (int i = 0, n = this->family_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->family(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStoreFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetStoreFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStoreFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStoreFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetStoreFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetStoreFileRequest)
    MergeFrom(*source);
  }
}

void GetStoreFileRequest::MergeFrom(const GetStoreFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetStoreFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  family_.MergeFrom(from.family_);
  if (from.has_region()) {
    mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
  }
}

void GetStoreFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetStoreFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreFileRequest::CopyFrom(const GetStoreFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetStoreFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void GetStoreFileRequest::InternalSwap(GetStoreFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  family_.InternalSwap(CastToBase(&other->family_));
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoreFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStoreFileResponse::InitAsDefaultInstance() {
}
class GetStoreFileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStoreFileResponse>()._has_bits_);
};

GetStoreFileResponse::GetStoreFileResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetStoreFileResponse)
}
GetStoreFileResponse::GetStoreFileResponse(const GetStoreFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      store_file_(from.store_file_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetStoreFileResponse)
}

void GetStoreFileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStoreFileResponse_Admin_2eproto.base);
}

GetStoreFileResponse::~GetStoreFileResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetStoreFileResponse)
  SharedDtor();
}

void GetStoreFileResponse::SharedDtor() {
}

void GetStoreFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStoreFileResponse& GetStoreFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStoreFileResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void GetStoreFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetStoreFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_file_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStoreFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string store_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_store_file(), ptr, ctx, "hbase.pb.GetStoreFileResponse.store_file");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStoreFileResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetStoreFileResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string store_file = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_store_file()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->store_file(this->store_file_size() - 1).data(),
            static_cast<int>(this->store_file(this->store_file_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.GetStoreFileResponse.store_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetStoreFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetStoreFileResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStoreFileResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetStoreFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string store_file = 1;
  for (int i = 0, n = this->store_file_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_file(i).data(), static_cast<int>(this->store_file(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.GetStoreFileResponse.store_file");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->store_file(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetStoreFileResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStoreFileResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetStoreFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string store_file = 1;
  for (int i = 0, n = this->store_file_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_file(i).data(), static_cast<int>(this->store_file(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.GetStoreFileResponse.store_file");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->store_file(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetStoreFileResponse)
  return target;
}

size_t GetStoreFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetStoreFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string store_file = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->store_file_size());
  for (int i = 0, n = this->store_file_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->store_file(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStoreFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetStoreFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStoreFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStoreFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetStoreFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetStoreFileResponse)
    MergeFrom(*source);
  }
}

void GetStoreFileResponse::MergeFrom(const GetStoreFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetStoreFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_file_.MergeFrom(from.store_file_);
}

void GetStoreFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetStoreFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreFileResponse::CopyFrom(const GetStoreFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetStoreFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreFileResponse::IsInitialized() const {
  return true;
}

void GetStoreFileResponse::InternalSwap(GetStoreFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  store_file_.InternalSwap(CastToBase(&other->store_file_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoreFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOnlineRegionRequest::InitAsDefaultInstance() {
}
class GetOnlineRegionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOnlineRegionRequest>()._has_bits_);
};

GetOnlineRegionRequest::GetOnlineRegionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetOnlineRegionRequest)
}
GetOnlineRegionRequest::GetOnlineRegionRequest(const GetOnlineRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetOnlineRegionRequest)
}

void GetOnlineRegionRequest::SharedCtor() {
}

GetOnlineRegionRequest::~GetOnlineRegionRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetOnlineRegionRequest)
  SharedDtor();
}

void GetOnlineRegionRequest::SharedDtor() {
}

void GetOnlineRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOnlineRegionRequest& GetOnlineRegionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOnlineRegionRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void GetOnlineRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetOnlineRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOnlineRegionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOnlineRegionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetOnlineRegionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetOnlineRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetOnlineRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOnlineRegionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetOnlineRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetOnlineRegionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOnlineRegionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetOnlineRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetOnlineRegionRequest)
  return target;
}

size_t GetOnlineRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetOnlineRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOnlineRegionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetOnlineRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOnlineRegionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOnlineRegionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetOnlineRegionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetOnlineRegionRequest)
    MergeFrom(*source);
  }
}

void GetOnlineRegionRequest::MergeFrom(const GetOnlineRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetOnlineRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetOnlineRegionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetOnlineRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineRegionRequest::CopyFrom(const GetOnlineRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetOnlineRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineRegionRequest::IsInitialized() const {
  return true;
}

void GetOnlineRegionRequest::InternalSwap(GetOnlineRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOnlineRegionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOnlineRegionResponse::InitAsDefaultInstance() {
}
class GetOnlineRegionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOnlineRegionResponse>()._has_bits_);
};

void GetOnlineRegionResponse::clear_region_info() {
  region_info_.Clear();
}
GetOnlineRegionResponse::GetOnlineRegionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetOnlineRegionResponse)
}
GetOnlineRegionResponse::GetOnlineRegionResponse(const GetOnlineRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      region_info_(from.region_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetOnlineRegionResponse)
}

void GetOnlineRegionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOnlineRegionResponse_Admin_2eproto.base);
}

GetOnlineRegionResponse::~GetOnlineRegionResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetOnlineRegionResponse)
  SharedDtor();
}

void GetOnlineRegionResponse::SharedDtor() {
}

void GetOnlineRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOnlineRegionResponse& GetOnlineRegionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOnlineRegionResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void GetOnlineRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetOnlineRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOnlineRegionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.RegionInfo region_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_region_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOnlineRegionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetOnlineRegionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionInfo region_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_region_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetOnlineRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetOnlineRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOnlineRegionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetOnlineRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionInfo region_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->region_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetOnlineRegionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOnlineRegionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetOnlineRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionInfo region_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->region_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetOnlineRegionResponse)
  return target;
}

size_t GetOnlineRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetOnlineRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionInfo region_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->region_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->region_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOnlineRegionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetOnlineRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOnlineRegionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOnlineRegionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetOnlineRegionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetOnlineRegionResponse)
    MergeFrom(*source);
  }
}

void GetOnlineRegionResponse::MergeFrom(const GetOnlineRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetOnlineRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_info_.MergeFrom(from.region_info_);
}

void GetOnlineRegionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetOnlineRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineRegionResponse::CopyFrom(const GetOnlineRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetOnlineRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineRegionResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->region_info())) return false;
  return true;
}

void GetOnlineRegionResponse::InternalSwap(GetOnlineRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&region_info_)->InternalSwap(CastToBase(&other->region_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOnlineRegionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpenRegionRequest_RegionOpenInfo::InitAsDefaultInstance() {
  ::hbase::pb::_OpenRegionRequest_RegionOpenInfo_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionInfo*>(
      ::hbase::pb::RegionInfo::internal_default_instance());
}
class OpenRegionRequest_RegionOpenInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenRegionRequest_RegionOpenInfo>()._has_bits_);
  static const ::hbase::pb::RegionInfo& region(const OpenRegionRequest_RegionOpenInfo* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version_of_offline_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionInfo&
OpenRegionRequest_RegionOpenInfo::_Internal::region(const OpenRegionRequest_RegionOpenInfo* msg) {
  return *msg->region_;
}
void OpenRegionRequest_RegionOpenInfo::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void OpenRegionRequest_RegionOpenInfo::clear_favored_nodes() {
  favored_nodes_.Clear();
}
OpenRegionRequest_RegionOpenInfo::OpenRegionRequest_RegionOpenInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.OpenRegionRequest.RegionOpenInfo)
}
OpenRegionRequest_RegionOpenInfo::OpenRegionRequest_RegionOpenInfo(const OpenRegionRequest_RegionOpenInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      favored_nodes_(from.favored_nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionInfo(*from.region_);
  } else {
    region_ = nullptr;
  }
  version_of_offline_node_ = from.version_of_offline_node_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.OpenRegionRequest.RegionOpenInfo)
}

void OpenRegionRequest_RegionOpenInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenRegionRequest_RegionOpenInfo_Admin_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_of_offline_node_) -
      reinterpret_cast<char*>(&region_)) + sizeof(version_of_offline_node_));
}

OpenRegionRequest_RegionOpenInfo::~OpenRegionRequest_RegionOpenInfo() {
  // @@protoc_insertion_point(destructor:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  SharedDtor();
}

void OpenRegionRequest_RegionOpenInfo::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void OpenRegionRequest_RegionOpenInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenRegionRequest_RegionOpenInfo& OpenRegionRequest_RegionOpenInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenRegionRequest_RegionOpenInfo_Admin_2eproto.base);
  return *internal_default_instance();
}


void OpenRegionRequest_RegionOpenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  favored_nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_ != nullptr);
    region_->Clear();
  }
  version_of_offline_node_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenRegionRequest_RegionOpenInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionInfo region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_of_offline_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version_of_offline_node(&has_bits);
          version_of_offline_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.ServerName favored_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_favored_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenRegionRequest_RegionOpenInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_of_offline_node = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_version_of_offline_node(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_of_offline_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.ServerName favored_nodes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_favored_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenRegionRequest_RegionOpenInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // optional uint32 version_of_offline_node = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->version_of_offline_node(), output);
  }

  // repeated .hbase.pb.ServerName favored_nodes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->favored_nodes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->favored_nodes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.OpenRegionRequest.RegionOpenInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenRegionRequest_RegionOpenInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // optional uint32 version_of_offline_node = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->version_of_offline_node(), target);
  }

  // repeated .hbase.pb.ServerName favored_nodes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->favored_nodes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->favored_nodes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  return target;
}

size_t OpenRegionRequest_RegionOpenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionInfo region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.ServerName favored_nodes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->favored_nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->favored_nodes(static_cast<int>(i)));
    }
  }

  // optional uint32 version_of_offline_node = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->version_of_offline_node());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenRegionRequest_RegionOpenInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenRegionRequest_RegionOpenInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenRegionRequest_RegionOpenInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.OpenRegionRequest.RegionOpenInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.OpenRegionRequest.RegionOpenInfo)
    MergeFrom(*source);
  }
}

void OpenRegionRequest_RegionOpenInfo::MergeFrom(const OpenRegionRequest_RegionOpenInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  favored_nodes_.MergeFrom(from.favored_nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionInfo::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      version_of_offline_node_ = from.version_of_offline_node_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenRegionRequest_RegionOpenInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRegionRequest_RegionOpenInfo::CopyFrom(const OpenRegionRequest_RegionOpenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.OpenRegionRequest.RegionOpenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRegionRequest_RegionOpenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->favored_nodes())) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void OpenRegionRequest_RegionOpenInfo::InternalSwap(OpenRegionRequest_RegionOpenInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&favored_nodes_)->InternalSwap(CastToBase(&other->favored_nodes_));
  swap(region_, other->region_);
  swap(version_of_offline_node_, other->version_of_offline_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenRegionRequest_RegionOpenInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpenRegionRequest::InitAsDefaultInstance() {
}
class OpenRegionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenRegionRequest>()._has_bits_);
  static void set_has_serverstartcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_master_system_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OpenRegionRequest::OpenRegionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.OpenRegionRequest)
}
OpenRegionRequest::OpenRegionRequest(const OpenRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      open_info_(from.open_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serverstartcode_, &from.serverstartcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&master_system_time_) -
    reinterpret_cast<char*>(&serverstartcode_)) + sizeof(master_system_time_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.OpenRegionRequest)
}

void OpenRegionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenRegionRequest_Admin_2eproto.base);
  ::memset(&serverstartcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&master_system_time_) -
      reinterpret_cast<char*>(&serverstartcode_)) + sizeof(master_system_time_));
}

OpenRegionRequest::~OpenRegionRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.OpenRegionRequest)
  SharedDtor();
}

void OpenRegionRequest::SharedDtor() {
}

void OpenRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenRegionRequest& OpenRegionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenRegionRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void OpenRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.OpenRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  open_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&serverstartcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&master_system_time_) -
        reinterpret_cast<char*>(&serverstartcode_)) + sizeof(master_system_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenRegionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_open_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional uint64 serverStartCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_serverstartcode(&has_bits);
          serverstartcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 master_system_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_master_system_time(&has_bits);
          master_system_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenRegionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.OpenRegionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_open_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 serverStartCode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_serverstartcode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverstartcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 master_system_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_master_system_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &master_system_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.OpenRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.OpenRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenRegionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.OpenRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->open_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->open_info(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 serverStartCode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->serverstartcode(), output);
  }

  // optional uint64 master_system_time = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->master_system_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.OpenRegionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenRegionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.OpenRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->open_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->open_info(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 serverStartCode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->serverstartcode(), target);
  }

  // optional uint64 master_system_time = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->master_system_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.OpenRegionRequest)
  return target;
}

size_t OpenRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.OpenRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->open_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->open_info(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 serverStartCode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->serverstartcode());
    }

    // optional uint64 master_system_time = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->master_system_time());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenRegionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.OpenRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenRegionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenRegionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.OpenRegionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.OpenRegionRequest)
    MergeFrom(*source);
  }
}

void OpenRegionRequest::MergeFrom(const OpenRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.OpenRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  open_info_.MergeFrom(from.open_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serverstartcode_ = from.serverstartcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      master_system_time_ = from.master_system_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenRegionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.OpenRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRegionRequest::CopyFrom(const OpenRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.OpenRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRegionRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->open_info())) return false;
  return true;
}

void OpenRegionRequest::InternalSwap(OpenRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&open_info_)->InternalSwap(CastToBase(&other->open_info_));
  swap(serverstartcode_, other->serverstartcode_);
  swap(master_system_time_, other->master_system_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenRegionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpenRegionResponse::InitAsDefaultInstance() {
}
class OpenRegionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenRegionResponse>()._has_bits_);
};

OpenRegionResponse::OpenRegionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.OpenRegionResponse)
}
OpenRegionResponse::OpenRegionResponse(const OpenRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      opening_state_(from.opening_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.OpenRegionResponse)
}

void OpenRegionResponse::SharedCtor() {
}

OpenRegionResponse::~OpenRegionResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.OpenRegionResponse)
  SharedDtor();
}

void OpenRegionResponse::SharedDtor() {
}

void OpenRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenRegionResponse& OpenRegionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenRegionResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void OpenRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.OpenRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opening_state_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenRegionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid(val))) {
              add_opening_state(static_cast<::hbase::pb::OpenRegionResponse_RegionOpeningState>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_opening_state(), ptr, ctx, ::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenRegionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.OpenRegionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid(value)) {
            add_opening_state(static_cast< ::hbase::pb::OpenRegionResponse_RegionOpeningState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_opening_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.OpenRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.OpenRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenRegionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.OpenRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
  for (int i = 0, n = this->opening_state_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->opening_state(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.OpenRegionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenRegionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.OpenRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    1, this->opening_state_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.OpenRegionResponse)
  return target;
}

size_t OpenRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.OpenRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->opening_state_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->opening_state(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenRegionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.OpenRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenRegionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenRegionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.OpenRegionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.OpenRegionResponse)
    MergeFrom(*source);
  }
}

void OpenRegionResponse::MergeFrom(const OpenRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.OpenRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  opening_state_.MergeFrom(from.opening_state_);
}

void OpenRegionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.OpenRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRegionResponse::CopyFrom(const OpenRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.OpenRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRegionResponse::IsInitialized() const {
  return true;
}

void OpenRegionResponse::InternalSwap(OpenRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opening_state_.InternalSwap(&other->opening_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenRegionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WarmupRegionRequest::InitAsDefaultInstance() {
  ::hbase::pb::_WarmupRegionRequest_default_instance_._instance.get_mutable()->regioninfo_ = const_cast< ::hbase::pb::RegionInfo*>(
      ::hbase::pb::RegionInfo::internal_default_instance());
}
class WarmupRegionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<WarmupRegionRequest>()._has_bits_);
  static const ::hbase::pb::RegionInfo& regioninfo(const WarmupRegionRequest* msg);
  static void set_has_regioninfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::RegionInfo&
WarmupRegionRequest::_Internal::regioninfo(const WarmupRegionRequest* msg) {
  return *msg->regioninfo_;
}
void WarmupRegionRequest::clear_regioninfo() {
  if (regioninfo_ != nullptr) regioninfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
WarmupRegionRequest::WarmupRegionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.WarmupRegionRequest)
}
WarmupRegionRequest::WarmupRegionRequest(const WarmupRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_regioninfo()) {
    regioninfo_ = new ::hbase::pb::RegionInfo(*from.regioninfo_);
  } else {
    regioninfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.WarmupRegionRequest)
}

void WarmupRegionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WarmupRegionRequest_Admin_2eproto.base);
  regioninfo_ = nullptr;
}

WarmupRegionRequest::~WarmupRegionRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.WarmupRegionRequest)
  SharedDtor();
}

void WarmupRegionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete regioninfo_;
}

void WarmupRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarmupRegionRequest& WarmupRegionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WarmupRegionRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void WarmupRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.WarmupRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(regioninfo_ != nullptr);
    regioninfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WarmupRegionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionInfo regionInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_regioninfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WarmupRegionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.WarmupRegionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo regionInfo = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.WarmupRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.WarmupRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WarmupRegionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.WarmupRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo regionInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::regioninfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.WarmupRegionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* WarmupRegionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.WarmupRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo regionInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::regioninfo(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.WarmupRegionRequest)
  return target;
}

size_t WarmupRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.WarmupRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionInfo regionInfo = 1;
  if (has_regioninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *regioninfo_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarmupRegionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.WarmupRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WarmupRegionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WarmupRegionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.WarmupRegionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.WarmupRegionRequest)
    MergeFrom(*source);
  }
}

void WarmupRegionRequest::MergeFrom(const WarmupRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.WarmupRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_regioninfo()) {
    mutable_regioninfo()->::hbase::pb::RegionInfo::MergeFrom(from.regioninfo());
  }
}

void WarmupRegionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.WarmupRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarmupRegionRequest::CopyFrom(const WarmupRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.WarmupRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmupRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_regioninfo()) {
    if (!this->regioninfo_->IsInitialized()) return false;
  }
  return true;
}

void WarmupRegionRequest::InternalSwap(WarmupRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(regioninfo_, other->regioninfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WarmupRegionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WarmupRegionResponse::InitAsDefaultInstance() {
}
class WarmupRegionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<WarmupRegionResponse>()._has_bits_);
};

WarmupRegionResponse::WarmupRegionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.WarmupRegionResponse)
}
WarmupRegionResponse::WarmupRegionResponse(const WarmupRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.WarmupRegionResponse)
}

void WarmupRegionResponse::SharedCtor() {
}

WarmupRegionResponse::~WarmupRegionResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.WarmupRegionResponse)
  SharedDtor();
}

void WarmupRegionResponse::SharedDtor() {
}

void WarmupRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarmupRegionResponse& WarmupRegionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WarmupRegionResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void WarmupRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.WarmupRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WarmupRegionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WarmupRegionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.WarmupRegionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.WarmupRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.WarmupRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WarmupRegionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.WarmupRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.WarmupRegionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* WarmupRegionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.WarmupRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.WarmupRegionResponse)
  return target;
}

size_t WarmupRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.WarmupRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarmupRegionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.WarmupRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WarmupRegionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WarmupRegionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.WarmupRegionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.WarmupRegionResponse)
    MergeFrom(*source);
  }
}

void WarmupRegionResponse::MergeFrom(const WarmupRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.WarmupRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WarmupRegionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.WarmupRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarmupRegionResponse::CopyFrom(const WarmupRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.WarmupRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmupRegionResponse::IsInitialized() const {
  return true;
}

void WarmupRegionResponse::InternalSwap(WarmupRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WarmupRegionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseRegionRequest::InitAsDefaultInstance() {
  ::hbase::pb::_CloseRegionRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
  ::hbase::pb::_CloseRegionRequest_default_instance_._instance.get_mutable()->destination_server_ = const_cast< ::hbase::pb::ServerName*>(
      ::hbase::pb::ServerName::internal_default_instance());
}
class CloseRegionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseRegionRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const CloseRegionRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version_of_closing_node(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transition_in_zk(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hbase::pb::ServerName& destination_server(const CloseRegionRequest* msg);
  static void set_has_destination_server(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serverstartcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::RegionSpecifier&
CloseRegionRequest::_Internal::region(const CloseRegionRequest* msg) {
  return *msg->region_;
}
const ::hbase::pb::ServerName&
CloseRegionRequest::_Internal::destination_server(const CloseRegionRequest* msg) {
  return *msg->destination_server_;
}
void CloseRegionRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CloseRegionRequest::clear_destination_server() {
  if (destination_server_ != nullptr) destination_server_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CloseRegionRequest::CloseRegionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CloseRegionRequest)
}
CloseRegionRequest::CloseRegionRequest(const CloseRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_destination_server()) {
    destination_server_ = new ::hbase::pb::ServerName(*from.destination_server_);
  } else {
    destination_server_ = nullptr;
  }
  ::memcpy(&serverstartcode_, &from.serverstartcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&transition_in_zk_) -
    reinterpret_cast<char*>(&serverstartcode_)) + sizeof(transition_in_zk_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CloseRegionRequest)
}

void CloseRegionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseRegionRequest_Admin_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_of_closing_node_) -
      reinterpret_cast<char*>(&region_)) + sizeof(version_of_closing_node_));
  transition_in_zk_ = true;
}

CloseRegionRequest::~CloseRegionRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.CloseRegionRequest)
  SharedDtor();
}

void CloseRegionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete destination_server_;
}

void CloseRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseRegionRequest& CloseRegionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseRegionRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void CloseRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CloseRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(destination_server_ != nullptr);
      destination_server_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&serverstartcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_of_closing_node_) -
        reinterpret_cast<char*>(&serverstartcode_)) + sizeof(version_of_closing_node_));
    transition_in_zk_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseRegionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_of_closing_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version_of_closing_node(&has_bits);
          version_of_closing_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool transition_in_ZK = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_transition_in_zk(&has_bits);
          transition_in_zk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.ServerName destination_server = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_destination_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 serverStartCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_serverstartcode(&has_bits);
          serverstartcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseRegionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CloseRegionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version_of_closing_node = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_version_of_closing_node(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_of_closing_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool transition_in_ZK = 3 [default = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_transition_in_zk(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transition_in_zk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.ServerName destination_server = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 serverStartCode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_serverstartcode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverstartcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CloseRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CloseRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseRegionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CloseRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // optional uint32 version_of_closing_node = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->version_of_closing_node(), output);
  }

  // optional bool transition_in_ZK = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->transition_in_zk(), output);
  }

  // optional .hbase.pb.ServerName destination_server = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::destination_server(this), output);
  }

  // optional uint64 serverStartCode = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->serverstartcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CloseRegionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseRegionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CloseRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // optional uint32 version_of_closing_node = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->version_of_closing_node(), target);
  }

  // optional bool transition_in_ZK = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->transition_in_zk(), target);
  }

  // optional .hbase.pb.ServerName destination_server = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::destination_server(this), target);
  }

  // optional uint64 serverStartCode = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->serverstartcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CloseRegionRequest)
  return target;
}

size_t CloseRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CloseRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .hbase.pb.ServerName destination_server = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *destination_server_);
    }

    // optional uint64 serverStartCode = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->serverstartcode());
    }

    // optional uint32 version_of_closing_node = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->version_of_closing_node());
    }

    // optional bool transition_in_ZK = 3 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseRegionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CloseRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseRegionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseRegionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CloseRegionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CloseRegionRequest)
    MergeFrom(*source);
  }
}

void CloseRegionRequest::MergeFrom(const CloseRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CloseRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_destination_server()->::hbase::pb::ServerName::MergeFrom(from.destination_server());
    }
    if (cached_has_bits & 0x00000004u) {
      serverstartcode_ = from.serverstartcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_of_closing_node_ = from.version_of_closing_node_;
    }
    if (cached_has_bits & 0x00000010u) {
      transition_in_zk_ = from.transition_in_zk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseRegionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CloseRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseRegionRequest::CopyFrom(const CloseRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CloseRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  if (has_destination_server()) {
    if (!this->destination_server_->IsInitialized()) return false;
  }
  return true;
}

void CloseRegionRequest::InternalSwap(CloseRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_, other->region_);
  swap(destination_server_, other->destination_server_);
  swap(serverstartcode_, other->serverstartcode_);
  swap(version_of_closing_node_, other->version_of_closing_node_);
  swap(transition_in_zk_, other->transition_in_zk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseRegionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseRegionResponse::InitAsDefaultInstance() {
}
class CloseRegionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CloseRegionResponse>()._has_bits_);
  static void set_has_closed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CloseRegionResponse::CloseRegionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CloseRegionResponse)
}
CloseRegionResponse::CloseRegionResponse(const CloseRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  closed_ = from.closed_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CloseRegionResponse)
}

void CloseRegionResponse::SharedCtor() {
  closed_ = false;
}

CloseRegionResponse::~CloseRegionResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.CloseRegionResponse)
  SharedDtor();
}

void CloseRegionResponse::SharedDtor() {
}

void CloseRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseRegionResponse& CloseRegionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseRegionResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void CloseRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CloseRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  closed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseRegionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool closed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_closed(&has_bits);
          closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseRegionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CloseRegionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool closed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_closed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CloseRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CloseRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseRegionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CloseRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool closed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->closed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CloseRegionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseRegionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CloseRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool closed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->closed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CloseRegionResponse)
  return target;
}

size_t CloseRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CloseRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool closed = 1;
  if (has_closed()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseRegionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CloseRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseRegionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseRegionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CloseRegionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CloseRegionResponse)
    MergeFrom(*source);
  }
}

void CloseRegionResponse::MergeFrom(const CloseRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CloseRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_closed()) {
    set_closed(from.closed());
  }
}

void CloseRegionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CloseRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseRegionResponse::CopyFrom(const CloseRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CloseRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRegionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CloseRegionResponse::InternalSwap(CloseRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(closed_, other->closed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseRegionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushRegionRequest::InitAsDefaultInstance() {
  ::hbase::pb::_FlushRegionRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class FlushRegionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FlushRegionRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const FlushRegionRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_if_older_than_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_write_flush_wal_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::RegionSpecifier&
FlushRegionRequest::_Internal::region(const FlushRegionRequest* msg) {
  return *msg->region_;
}
void FlushRegionRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FlushRegionRequest::FlushRegionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FlushRegionRequest)
}
FlushRegionRequest::FlushRegionRequest(const FlushRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  ::memcpy(&if_older_than_ts_, &from.if_older_than_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_flush_wal_marker_) -
    reinterpret_cast<char*>(&if_older_than_ts_)) + sizeof(write_flush_wal_marker_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FlushRegionRequest)
}

void FlushRegionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushRegionRequest_Admin_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_flush_wal_marker_) -
      reinterpret_cast<char*>(&region_)) + sizeof(write_flush_wal_marker_));
}

FlushRegionRequest::~FlushRegionRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.FlushRegionRequest)
  SharedDtor();
}

void FlushRegionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void FlushRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushRegionRequest& FlushRegionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushRegionRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void FlushRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FlushRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_ != nullptr);
    region_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&if_older_than_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&write_flush_wal_marker_) -
        reinterpret_cast<char*>(&if_older_than_ts_)) + sizeof(write_flush_wal_marker_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushRegionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 if_older_than_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_if_older_than_ts(&has_bits);
          if_older_than_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool write_flush_wal_marker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_write_flush_wal_marker(&has_bits);
          write_flush_wal_marker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushRegionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FlushRegionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 if_older_than_ts = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_if_older_than_ts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &if_older_than_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool write_flush_wal_marker = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_write_flush_wal_marker(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_flush_wal_marker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FlushRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FlushRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushRegionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FlushRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // optional uint64 if_older_than_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->if_older_than_ts(), output);
  }

  // optional bool write_flush_wal_marker = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->write_flush_wal_marker(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FlushRegionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushRegionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FlushRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // optional uint64 if_older_than_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->if_older_than_ts(), target);
  }

  // optional bool write_flush_wal_marker = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->write_flush_wal_marker(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FlushRegionRequest)
  return target;
}

size_t FlushRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FlushRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint64 if_older_than_ts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->if_older_than_ts());
    }

    // optional bool write_flush_wal_marker = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushRegionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FlushRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushRegionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushRegionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FlushRegionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FlushRegionRequest)
    MergeFrom(*source);
  }
}

void FlushRegionRequest::MergeFrom(const FlushRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FlushRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      if_older_than_ts_ = from.if_older_than_ts_;
    }
    if (cached_has_bits & 0x00000004u) {
      write_flush_wal_marker_ = from.write_flush_wal_marker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlushRegionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FlushRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRegionRequest::CopyFrom(const FlushRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FlushRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void FlushRegionRequest::InternalSwap(FlushRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_, other->region_);
  swap(if_older_than_ts_, other->if_older_than_ts_);
  swap(write_flush_wal_marker_, other->write_flush_wal_marker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushRegionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushRegionResponse::InitAsDefaultInstance() {
}
class FlushRegionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FlushRegionResponse>()._has_bits_);
  static void set_has_last_flush_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flushed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wrote_flush_wal_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FlushRegionResponse::FlushRegionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FlushRegionResponse)
}
FlushRegionResponse::FlushRegionResponse(const FlushRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_flush_time_, &from.last_flush_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&wrote_flush_wal_marker_) -
    reinterpret_cast<char*>(&last_flush_time_)) + sizeof(wrote_flush_wal_marker_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FlushRegionResponse)
}

void FlushRegionResponse::SharedCtor() {
  ::memset(&last_flush_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wrote_flush_wal_marker_) -
      reinterpret_cast<char*>(&last_flush_time_)) + sizeof(wrote_flush_wal_marker_));
}

FlushRegionResponse::~FlushRegionResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.FlushRegionResponse)
  SharedDtor();
}

void FlushRegionResponse::SharedDtor() {
}

void FlushRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushRegionResponse& FlushRegionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushRegionResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void FlushRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FlushRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&last_flush_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wrote_flush_wal_marker_) -
        reinterpret_cast<char*>(&last_flush_time_)) + sizeof(wrote_flush_wal_marker_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushRegionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 last_flush_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_flush_time(&has_bits);
          last_flush_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flushed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flushed(&has_bits);
          flushed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wrote_flush_wal_marker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wrote_flush_wal_marker(&has_bits);
          wrote_flush_wal_marker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushRegionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FlushRegionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 last_flush_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_flush_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_flush_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flushed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_flushed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flushed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wrote_flush_wal_marker = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_wrote_flush_wal_marker(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wrote_flush_wal_marker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FlushRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FlushRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushRegionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FlushRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 last_flush_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->last_flush_time(), output);
  }

  // optional bool flushed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->flushed(), output);
  }

  // optional bool wrote_flush_wal_marker = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->wrote_flush_wal_marker(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FlushRegionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushRegionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FlushRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 last_flush_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_flush_time(), target);
  }

  // optional bool flushed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->flushed(), target);
  }

  // optional bool wrote_flush_wal_marker = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->wrote_flush_wal_marker(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FlushRegionResponse)
  return target;
}

size_t FlushRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FlushRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 last_flush_time = 1;
  if (has_last_flush_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->last_flush_time());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool flushed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool wrote_flush_wal_marker = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushRegionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FlushRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushRegionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushRegionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FlushRegionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FlushRegionResponse)
    MergeFrom(*source);
  }
}

void FlushRegionResponse::MergeFrom(const FlushRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FlushRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      last_flush_time_ = from.last_flush_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      flushed_ = from.flushed_;
    }
    if (cached_has_bits & 0x00000004u) {
      wrote_flush_wal_marker_ = from.wrote_flush_wal_marker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlushRegionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FlushRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushRegionResponse::CopyFrom(const FlushRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FlushRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRegionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FlushRegionResponse::InternalSwap(FlushRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_flush_time_, other->last_flush_time_);
  swap(flushed_, other->flushed_);
  swap(wrote_flush_wal_marker_, other->wrote_flush_wal_marker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushRegionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitRegionRequest::InitAsDefaultInstance() {
  ::hbase::pb::_SplitRegionRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class SplitRegionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SplitRegionRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const SplitRegionRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_split_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::RegionSpecifier&
SplitRegionRequest::_Internal::region(const SplitRegionRequest* msg) {
  return *msg->region_;
}
void SplitRegionRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SplitRegionRequest::SplitRegionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SplitRegionRequest)
}
SplitRegionRequest::SplitRegionRequest(const SplitRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_split_point()) {
    split_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.split_point_);
  }
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SplitRegionRequest)
}

void SplitRegionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SplitRegionRequest_Admin_2eproto.base);
  split_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_ = nullptr;
}

SplitRegionRequest::~SplitRegionRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.SplitRegionRequest)
  SharedDtor();
}

void SplitRegionRequest::SharedDtor() {
  split_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_;
}

void SplitRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitRegionRequest& SplitRegionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitRegionRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void SplitRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SplitRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      split_point_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitRegionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes split_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_split_point(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitRegionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SplitRegionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes split_point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SplitRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SplitRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitRegionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SplitRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // optional bytes split_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->split_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SplitRegionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitRegionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SplitRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // optional bytes split_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->split_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SplitRegionRequest)
  return target;
}

size_t SplitRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SplitRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes split_point = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->split_point());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitRegionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SplitRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitRegionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitRegionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SplitRegionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SplitRegionRequest)
    MergeFrom(*source);
  }
}

void SplitRegionRequest::MergeFrom(const SplitRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SplitRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      split_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.split_point_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
  }
}

void SplitRegionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SplitRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRegionRequest::CopyFrom(const SplitRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SplitRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void SplitRegionRequest::InternalSwap(SplitRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  split_point_.Swap(&other->split_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitRegionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitRegionResponse::InitAsDefaultInstance() {
}
class SplitRegionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SplitRegionResponse>()._has_bits_);
};

SplitRegionResponse::SplitRegionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SplitRegionResponse)
}
SplitRegionResponse::SplitRegionResponse(const SplitRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SplitRegionResponse)
}

void SplitRegionResponse::SharedCtor() {
}

SplitRegionResponse::~SplitRegionResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.SplitRegionResponse)
  SharedDtor();
}

void SplitRegionResponse::SharedDtor() {
}

void SplitRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitRegionResponse& SplitRegionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitRegionResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void SplitRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SplitRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitRegionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitRegionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SplitRegionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SplitRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SplitRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitRegionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SplitRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SplitRegionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitRegionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SplitRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SplitRegionResponse)
  return target;
}

size_t SplitRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SplitRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitRegionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SplitRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitRegionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitRegionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SplitRegionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SplitRegionResponse)
    MergeFrom(*source);
  }
}

void SplitRegionResponse::MergeFrom(const SplitRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SplitRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SplitRegionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SplitRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRegionResponse::CopyFrom(const SplitRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SplitRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRegionResponse::IsInitialized() const {
  return true;
}

void SplitRegionResponse::InternalSwap(SplitRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitRegionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompactRegionRequest::InitAsDefaultInstance() {
  ::hbase::pb::_CompactRegionRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class CompactRegionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CompactRegionRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const CompactRegionRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_major(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::RegionSpecifier&
CompactRegionRequest::_Internal::region(const CompactRegionRequest* msg) {
  return *msg->region_;
}
void CompactRegionRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CompactRegionRequest::CompactRegionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CompactRegionRequest)
}
CompactRegionRequest::CompactRegionRequest(const CompactRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family()) {
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  major_ = from.major_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CompactRegionRequest)
}

void CompactRegionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompactRegionRequest_Admin_2eproto.base);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&major_) -
      reinterpret_cast<char*>(&region_)) + sizeof(major_));
}

CompactRegionRequest::~CompactRegionRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.CompactRegionRequest)
  SharedDtor();
}

void CompactRegionRequest::SharedDtor() {
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_;
}

void CompactRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactRegionRequest& CompactRegionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompactRegionRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void CompactRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CompactRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
  }
  major_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompactRegionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool major = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_major(&has_bits);
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompactRegionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CompactRegionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool major = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_major(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes family = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CompactRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CompactRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompactRegionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CompactRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // optional bool major = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->major(), output);
  }

  // optional bytes family = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->family(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CompactRegionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompactRegionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CompactRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // optional bool major = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->major(), target);
  }

  // optional bytes family = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->family(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CompactRegionRequest)
  return target;
}

size_t CompactRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CompactRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes family = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());
  }

  // optional bool major = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactRegionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CompactRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactRegionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompactRegionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CompactRegionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CompactRegionRequest)
    MergeFrom(*source);
  }
}

void CompactRegionRequest::MergeFrom(const CompactRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CompactRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000004u) {
      major_ = from.major_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CompactRegionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CompactRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactRegionRequest::CopyFrom(const CompactRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CompactRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactRegionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void CompactRegionRequest::InternalSwap(CompactRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_, other->region_);
  swap(major_, other->major_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactRegionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompactRegionResponse::InitAsDefaultInstance() {
}
class CompactRegionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CompactRegionResponse>()._has_bits_);
};

CompactRegionResponse::CompactRegionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CompactRegionResponse)
}
CompactRegionResponse::CompactRegionResponse(const CompactRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CompactRegionResponse)
}

void CompactRegionResponse::SharedCtor() {
}

CompactRegionResponse::~CompactRegionResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.CompactRegionResponse)
  SharedDtor();
}

void CompactRegionResponse::SharedDtor() {
}

void CompactRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactRegionResponse& CompactRegionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompactRegionResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void CompactRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CompactRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompactRegionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompactRegionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CompactRegionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CompactRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CompactRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompactRegionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CompactRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CompactRegionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompactRegionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CompactRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CompactRegionResponse)
  return target;
}

size_t CompactRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CompactRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactRegionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CompactRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactRegionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompactRegionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CompactRegionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CompactRegionResponse)
    MergeFrom(*source);
  }
}

void CompactRegionResponse::MergeFrom(const CompactRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CompactRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CompactRegionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CompactRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactRegionResponse::CopyFrom(const CompactRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CompactRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactRegionResponse::IsInitialized() const {
  return true;
}

void CompactRegionResponse::InternalSwap(CompactRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactRegionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateFavoredNodesRequest_RegionUpdateInfo::InitAsDefaultInstance() {
  ::hbase::pb::_UpdateFavoredNodesRequest_RegionUpdateInfo_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionInfo*>(
      ::hbase::pb::RegionInfo::internal_default_instance());
}
class UpdateFavoredNodesRequest_RegionUpdateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateFavoredNodesRequest_RegionUpdateInfo>()._has_bits_);
  static const ::hbase::pb::RegionInfo& region(const UpdateFavoredNodesRequest_RegionUpdateInfo* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::RegionInfo&
UpdateFavoredNodesRequest_RegionUpdateInfo::_Internal::region(const UpdateFavoredNodesRequest_RegionUpdateInfo* msg) {
  return *msg->region_;
}
void UpdateFavoredNodesRequest_RegionUpdateInfo::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateFavoredNodesRequest_RegionUpdateInfo::clear_favored_nodes() {
  favored_nodes_.Clear();
}
UpdateFavoredNodesRequest_RegionUpdateInfo::UpdateFavoredNodesRequest_RegionUpdateInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
}
UpdateFavoredNodesRequest_RegionUpdateInfo::UpdateFavoredNodesRequest_RegionUpdateInfo(const UpdateFavoredNodesRequest_RegionUpdateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      favored_nodes_(from.favored_nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionInfo(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFavoredNodesRequest_RegionUpdateInfo_Admin_2eproto.base);
  region_ = nullptr;
}

UpdateFavoredNodesRequest_RegionUpdateInfo::~UpdateFavoredNodesRequest_RegionUpdateInfo() {
  // @@protoc_insertion_point(destructor:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  SharedDtor();
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFavoredNodesRequest_RegionUpdateInfo& UpdateFavoredNodesRequest_RegionUpdateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFavoredNodesRequest_RegionUpdateInfo_Admin_2eproto.base);
  return *internal_default_instance();
}


void UpdateFavoredNodesRequest_RegionUpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  favored_nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_ != nullptr);
    region_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateFavoredNodesRequest_RegionUpdateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionInfo region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.ServerName favored_nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_favored_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateFavoredNodesRequest_RegionUpdateInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.ServerName favored_nodes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_favored_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateFavoredNodesRequest_RegionUpdateInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // repeated .hbase.pb.ServerName favored_nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->favored_nodes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->favored_nodes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFavoredNodesRequest_RegionUpdateInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // repeated .hbase.pb.ServerName favored_nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->favored_nodes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->favored_nodes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  return target;
}

size_t UpdateFavoredNodesRequest_RegionUpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionInfo region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.ServerName favored_nodes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->favored_nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->favored_nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFavoredNodesRequest_RegionUpdateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFavoredNodesRequest_RegionUpdateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
    MergeFrom(*source);
  }
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::MergeFrom(const UpdateFavoredNodesRequest_RegionUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  favored_nodes_.MergeFrom(from.favored_nodes_);
  if (from.has_region()) {
    mutable_region()->::hbase::pb::RegionInfo::MergeFrom(from.region());
  }
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::CopyFrom(const UpdateFavoredNodesRequest_RegionUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFavoredNodesRequest_RegionUpdateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->favored_nodes())) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void UpdateFavoredNodesRequest_RegionUpdateInfo::InternalSwap(UpdateFavoredNodesRequest_RegionUpdateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&favored_nodes_)->InternalSwap(CastToBase(&other->favored_nodes_));
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFavoredNodesRequest_RegionUpdateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateFavoredNodesRequest::InitAsDefaultInstance() {
}
class UpdateFavoredNodesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateFavoredNodesRequest>()._has_bits_);
};

UpdateFavoredNodesRequest::UpdateFavoredNodesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.UpdateFavoredNodesRequest)
}
UpdateFavoredNodesRequest::UpdateFavoredNodesRequest(const UpdateFavoredNodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      update_info_(from.update_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.UpdateFavoredNodesRequest)
}

void UpdateFavoredNodesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFavoredNodesRequest_Admin_2eproto.base);
}

UpdateFavoredNodesRequest::~UpdateFavoredNodesRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.UpdateFavoredNodesRequest)
  SharedDtor();
}

void UpdateFavoredNodesRequest::SharedDtor() {
}

void UpdateFavoredNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFavoredNodesRequest& UpdateFavoredNodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFavoredNodesRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void UpdateFavoredNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.UpdateFavoredNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateFavoredNodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_update_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateFavoredNodesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.UpdateFavoredNodesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_update_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.UpdateFavoredNodesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.UpdateFavoredNodesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateFavoredNodesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.UpdateFavoredNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->update_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->update_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.UpdateFavoredNodesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFavoredNodesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.UpdateFavoredNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->update_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->update_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.UpdateFavoredNodesRequest)
  return target;
}

size_t UpdateFavoredNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.UpdateFavoredNodesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->update_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->update_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFavoredNodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.UpdateFavoredNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFavoredNodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFavoredNodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.UpdateFavoredNodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.UpdateFavoredNodesRequest)
    MergeFrom(*source);
  }
}

void UpdateFavoredNodesRequest::MergeFrom(const UpdateFavoredNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.UpdateFavoredNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  update_info_.MergeFrom(from.update_info_);
}

void UpdateFavoredNodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.UpdateFavoredNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFavoredNodesRequest::CopyFrom(const UpdateFavoredNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.UpdateFavoredNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFavoredNodesRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->update_info())) return false;
  return true;
}

void UpdateFavoredNodesRequest::InternalSwap(UpdateFavoredNodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&update_info_)->InternalSwap(CastToBase(&other->update_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFavoredNodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateFavoredNodesResponse::InitAsDefaultInstance() {
}
class UpdateFavoredNodesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateFavoredNodesResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UpdateFavoredNodesResponse::UpdateFavoredNodesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.UpdateFavoredNodesResponse)
}
UpdateFavoredNodesResponse::UpdateFavoredNodesResponse(const UpdateFavoredNodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.UpdateFavoredNodesResponse)
}

void UpdateFavoredNodesResponse::SharedCtor() {
  response_ = 0u;
}

UpdateFavoredNodesResponse::~UpdateFavoredNodesResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.UpdateFavoredNodesResponse)
  SharedDtor();
}

void UpdateFavoredNodesResponse::SharedDtor() {
}

void UpdateFavoredNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFavoredNodesResponse& UpdateFavoredNodesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFavoredNodesResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void UpdateFavoredNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.UpdateFavoredNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateFavoredNodesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateFavoredNodesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.UpdateFavoredNodesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_response(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.UpdateFavoredNodesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.UpdateFavoredNodesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateFavoredNodesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.UpdateFavoredNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.UpdateFavoredNodesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFavoredNodesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.UpdateFavoredNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.UpdateFavoredNodesResponse)
  return target;
}

size_t UpdateFavoredNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.UpdateFavoredNodesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 response = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->response());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFavoredNodesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.UpdateFavoredNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFavoredNodesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFavoredNodesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.UpdateFavoredNodesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.UpdateFavoredNodesResponse)
    MergeFrom(*source);
  }
}

void UpdateFavoredNodesResponse::MergeFrom(const UpdateFavoredNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.UpdateFavoredNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    set_response(from.response());
  }
}

void UpdateFavoredNodesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.UpdateFavoredNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFavoredNodesResponse::CopyFrom(const UpdateFavoredNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.UpdateFavoredNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFavoredNodesResponse::IsInitialized() const {
  return true;
}

void UpdateFavoredNodesResponse::InternalSwap(UpdateFavoredNodesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFavoredNodesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MergeRegionsRequest::InitAsDefaultInstance() {
  ::hbase::pb::_MergeRegionsRequest_default_instance_._instance.get_mutable()->region_a_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
  ::hbase::pb::_MergeRegionsRequest_default_instance_._instance.get_mutable()->region_b_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class MergeRegionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeRegionsRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region_a(const MergeRegionsRequest* msg);
  static void set_has_region_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::RegionSpecifier& region_b(const MergeRegionsRequest* msg);
  static void set_has_region_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_forcible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_master_system_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::RegionSpecifier&
MergeRegionsRequest::_Internal::region_a(const MergeRegionsRequest* msg) {
  return *msg->region_a_;
}
const ::hbase::pb::RegionSpecifier&
MergeRegionsRequest::_Internal::region_b(const MergeRegionsRequest* msg) {
  return *msg->region_b_;
}
void MergeRegionsRequest::clear_region_a() {
  if (region_a_ != nullptr) region_a_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MergeRegionsRequest::clear_region_b() {
  if (region_b_ != nullptr) region_b_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MergeRegionsRequest::MergeRegionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MergeRegionsRequest)
}
MergeRegionsRequest::MergeRegionsRequest(const MergeRegionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_a()) {
    region_a_ = new ::hbase::pb::RegionSpecifier(*from.region_a_);
  } else {
    region_a_ = nullptr;
  }
  if (from.has_region_b()) {
    region_b_ = new ::hbase::pb::RegionSpecifier(*from.region_b_);
  } else {
    region_b_ = nullptr;
  }
  ::memcpy(&master_system_time_, &from.master_system_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&forcible_) -
    reinterpret_cast<char*>(&master_system_time_)) + sizeof(forcible_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MergeRegionsRequest)
}

void MergeRegionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MergeRegionsRequest_Admin_2eproto.base);
  ::memset(&region_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forcible_) -
      reinterpret_cast<char*>(&region_a_)) + sizeof(forcible_));
}

MergeRegionsRequest::~MergeRegionsRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.MergeRegionsRequest)
  SharedDtor();
}

void MergeRegionsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_a_;
  if (this != internal_default_instance()) delete region_b_;
}

void MergeRegionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeRegionsRequest& MergeRegionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MergeRegionsRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void MergeRegionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MergeRegionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(region_a_ != nullptr);
      region_a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(region_b_ != nullptr);
      region_b_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&master_system_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&forcible_) -
        reinterpret_cast<char*>(&master_system_time_)) + sizeof(forcible_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MergeRegionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.RegionSpecifier region_b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_region_b(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool forcible = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_forcible(&has_bits);
          forcible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 master_system_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_master_system_time(&has_bits);
          master_system_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MergeRegionsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MergeRegionsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region_a = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.RegionSpecifier region_b = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool forcible = 3 [default = false];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_forcible(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forcible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 master_system_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_master_system_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &master_system_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MergeRegionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MergeRegionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MergeRegionsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MergeRegionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region_a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region_a(this), output);
  }

  // required .hbase.pb.RegionSpecifier region_b = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::region_b(this), output);
  }

  // optional bool forcible = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->forcible(), output);
  }

  // optional uint64 master_system_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->master_system_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MergeRegionsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeRegionsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MergeRegionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region_a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region_a(this), target);
  }

  // required .hbase.pb.RegionSpecifier region_b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::region_b(this), target);
  }

  // optional bool forcible = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->forcible(), target);
  }

  // optional uint64 master_system_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->master_system_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MergeRegionsRequest)
  return target;
}

size_t MergeRegionsRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.MergeRegionsRequest)
  size_t total_size = 0;

  if (has_region_a()) {
    // required .hbase.pb.RegionSpecifier region_a = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_a_);
  }

  if (has_region_b()) {
    // required .hbase.pb.RegionSpecifier region_b = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_b_);
  }

  return total_size;
}
size_t MergeRegionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MergeRegionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .hbase.pb.RegionSpecifier region_a = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_a_);

    // required .hbase.pb.RegionSpecifier region_b = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_b_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional uint64 master_system_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->master_system_time());
    }

    // optional bool forcible = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeRegionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MergeRegionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeRegionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeRegionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MergeRegionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MergeRegionsRequest)
    MergeFrom(*source);
  }
}

void MergeRegionsRequest::MergeFrom(const MergeRegionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MergeRegionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region_a()->::hbase::pb::RegionSpecifier::MergeFrom(from.region_a());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_region_b()->::hbase::pb::RegionSpecifier::MergeFrom(from.region_b());
    }
    if (cached_has_bits & 0x00000004u) {
      master_system_time_ = from.master_system_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      forcible_ = from.forcible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MergeRegionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MergeRegionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeRegionsRequest::CopyFrom(const MergeRegionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MergeRegionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRegionsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_region_a()) {
    if (!this->region_a_->IsInitialized()) return false;
  }
  if (has_region_b()) {
    if (!this->region_b_->IsInitialized()) return false;
  }
  return true;
}

void MergeRegionsRequest::InternalSwap(MergeRegionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_a_, other->region_a_);
  swap(region_b_, other->region_b_);
  swap(master_system_time_, other->master_system_time_);
  swap(forcible_, other->forcible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeRegionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MergeRegionsResponse::InitAsDefaultInstance() {
}
class MergeRegionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeRegionsResponse>()._has_bits_);
};

MergeRegionsResponse::MergeRegionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MergeRegionsResponse)
}
MergeRegionsResponse::MergeRegionsResponse(const MergeRegionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MergeRegionsResponse)
}

void MergeRegionsResponse::SharedCtor() {
}

MergeRegionsResponse::~MergeRegionsResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.MergeRegionsResponse)
  SharedDtor();
}

void MergeRegionsResponse::SharedDtor() {
}

void MergeRegionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MergeRegionsResponse& MergeRegionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MergeRegionsResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void MergeRegionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MergeRegionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MergeRegionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MergeRegionsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MergeRegionsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MergeRegionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MergeRegionsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MergeRegionsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MergeRegionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MergeRegionsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeRegionsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MergeRegionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MergeRegionsResponse)
  return target;
}

size_t MergeRegionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MergeRegionsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeRegionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MergeRegionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeRegionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeRegionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MergeRegionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MergeRegionsResponse)
    MergeFrom(*source);
  }
}

void MergeRegionsResponse::MergeFrom(const MergeRegionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MergeRegionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MergeRegionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MergeRegionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeRegionsResponse::CopyFrom(const MergeRegionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MergeRegionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRegionsResponse::IsInitialized() const {
  return true;
}

void MergeRegionsResponse::InternalSwap(MergeRegionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeRegionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WALEntry::InitAsDefaultInstance() {
  ::hbase::pb::_WALEntry_default_instance_._instance.get_mutable()->key_ = const_cast< ::hbase::pb::WALKey*>(
      ::hbase::pb::WALKey::internal_default_instance());
}
class WALEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<WALEntry>()._has_bits_);
  static const ::hbase::pb::WALKey& key(const WALEntry* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_associated_cell_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::WALKey&
WALEntry::_Internal::key(const WALEntry* msg) {
  return *msg->key_;
}
void WALEntry::clear_key() {
  if (key_ != nullptr) key_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
WALEntry::WALEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.WALEntry)
}
WALEntry::WALEntry(const WALEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      key_value_bytes_(from.key_value_bytes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::hbase::pb::WALKey(*from.key_);
  } else {
    key_ = nullptr;
  }
  associated_cell_count_ = from.associated_cell_count_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.WALEntry)
}

void WALEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WALEntry_Admin_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associated_cell_count_) -
      reinterpret_cast<char*>(&key_)) + sizeof(associated_cell_count_));
}

WALEntry::~WALEntry() {
  // @@protoc_insertion_point(destructor:hbase.pb.WALEntry)
  SharedDtor();
}

void WALEntry::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
}

void WALEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WALEntry& WALEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WALEntry_Admin_2eproto.base);
  return *internal_default_instance();
}


void WALEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.WALEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_value_bytes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(key_ != nullptr);
    key_->Clear();
  }
  associated_cell_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WALEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.WALKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes key_value_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_key_value_bytes(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int32 associated_cell_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_associated_cell_count(&has_bits);
          associated_cell_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WALEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.WALEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.WALKey key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes key_value_bytes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_key_value_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 associated_cell_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_associated_cell_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &associated_cell_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.WALEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.WALEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WALEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.WALEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.WALKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::key(this), output);
  }

  // repeated bytes key_value_bytes = 2;
  for (int i = 0, n = this->key_value_bytes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->key_value_bytes(i), output);
  }

  // optional int32 associated_cell_count = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->associated_cell_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.WALEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* WALEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.WALEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.WALKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::key(this), target);
  }

  // repeated bytes key_value_bytes = 2;
  for (int i = 0, n = this->key_value_bytes_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->key_value_bytes(i), target);
  }

  // optional int32 associated_cell_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->associated_cell_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.WALEntry)
  return target;
}

size_t WALEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.WALEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.WALKey key = 1;
  if (has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes key_value_bytes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->key_value_bytes_size());
  for (int i = 0, n = this->key_value_bytes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->key_value_bytes(i));
  }

  // optional int32 associated_cell_count = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->associated_cell_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WALEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.WALEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const WALEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WALEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.WALEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.WALEntry)
    MergeFrom(*source);
  }
}

void WALEntry::MergeFrom(const WALEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.WALEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_value_bytes_.MergeFrom(from.key_value_bytes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_key()->::hbase::pb::WALKey::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000002u) {
      associated_cell_count_ = from.associated_cell_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WALEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.WALEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WALEntry::CopyFrom(const WALEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.WALEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  return true;
}

void WALEntry::InternalSwap(WALEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_value_bytes_.InternalSwap(CastToBase(&other->key_value_bytes_));
  swap(key_, other->key_);
  swap(associated_cell_count_, other->associated_cell_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WALEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicateWALEntryRequest::InitAsDefaultInstance() {
}
class ReplicateWALEntryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicateWALEntryRequest>()._has_bits_);
  static void set_has_replicationclusterid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sourcebasenamespacedirpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sourcehfilearchivedirpath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ReplicateWALEntryRequest::ReplicateWALEntryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ReplicateWALEntryRequest)
}
ReplicateWALEntryRequest::ReplicateWALEntryRequest(const ReplicateWALEntryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replicationclusterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_replicationclusterid()) {
    replicationclusterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.replicationclusterid_);
  }
  sourcebasenamespacedirpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sourcebasenamespacedirpath()) {
    sourcebasenamespacedirpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcebasenamespacedirpath_);
  }
  sourcehfilearchivedirpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sourcehfilearchivedirpath()) {
    sourcehfilearchivedirpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcehfilearchivedirpath_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ReplicateWALEntryRequest)
}

void ReplicateWALEntryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicateWALEntryRequest_Admin_2eproto.base);
  replicationclusterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcebasenamespacedirpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcehfilearchivedirpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReplicateWALEntryRequest::~ReplicateWALEntryRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.ReplicateWALEntryRequest)
  SharedDtor();
}

void ReplicateWALEntryRequest::SharedDtor() {
  replicationclusterid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcebasenamespacedirpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcehfilearchivedirpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplicateWALEntryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicateWALEntryRequest& ReplicateWALEntryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicateWALEntryRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void ReplicateWALEntryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ReplicateWALEntryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      replicationclusterid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sourcebasenamespacedirpath_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sourcehfilearchivedirpath_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplicateWALEntryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.WALEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional string replicationClusterId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_replicationclusterid(), ptr, ctx, "hbase.pb.ReplicateWALEntryRequest.replicationClusterId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sourceBaseNamespaceDirPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_sourcebasenamespacedirpath(), ptr, ctx, "hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sourceHFileArchiveDirPath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_sourcehfilearchivedirpath(), ptr, ctx, "hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplicateWALEntryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ReplicateWALEntryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.WALEntry entry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string replicationClusterId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_replicationclusterid()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replicationclusterid().data(), static_cast<int>(this->replicationclusterid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ReplicateWALEntryRequest.replicationClusterId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sourceBaseNamespaceDirPath = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcebasenamespacedirpath()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcebasenamespacedirpath().data(), static_cast<int>(this->sourcebasenamespacedirpath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sourceHFileArchiveDirPath = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcehfilearchivedirpath()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcehfilearchivedirpath().data(), static_cast<int>(this->sourcehfilearchivedirpath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ReplicateWALEntryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ReplicateWALEntryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplicateWALEntryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ReplicateWALEntryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.WALEntry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entry(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string replicationClusterId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replicationclusterid().data(), static_cast<int>(this->replicationclusterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicateWALEntryRequest.replicationClusterId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->replicationclusterid(), output);
  }

  // optional string sourceBaseNamespaceDirPath = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcebasenamespacedirpath().data(), static_cast<int>(this->sourcebasenamespacedirpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sourcebasenamespacedirpath(), output);
  }

  // optional string sourceHFileArchiveDirPath = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcehfilearchivedirpath().data(), static_cast<int>(this->sourcehfilearchivedirpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sourcehfilearchivedirpath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ReplicateWALEntryRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicateWALEntryRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ReplicateWALEntryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.WALEntry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entry(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string replicationClusterId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replicationclusterid().data(), static_cast<int>(this->replicationclusterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicateWALEntryRequest.replicationClusterId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->replicationclusterid(), target);
  }

  // optional string sourceBaseNamespaceDirPath = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcebasenamespacedirpath().data(), static_cast<int>(this->sourcebasenamespacedirpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->sourcebasenamespacedirpath(), target);
  }

  // optional string sourceHFileArchiveDirPath = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcehfilearchivedirpath().data(), static_cast<int>(this->sourcehfilearchivedirpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->sourcehfilearchivedirpath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ReplicateWALEntryRequest)
  return target;
}

size_t ReplicateWALEntryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ReplicateWALEntryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.WALEntry entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entry(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string replicationClusterId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->replicationclusterid());
    }

    // optional string sourceBaseNamespaceDirPath = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sourcebasenamespacedirpath());
    }

    // optional string sourceHFileArchiveDirPath = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sourcehfilearchivedirpath());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicateWALEntryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ReplicateWALEntryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicateWALEntryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicateWALEntryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ReplicateWALEntryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ReplicateWALEntryRequest)
    MergeFrom(*source);
  }
}

void ReplicateWALEntryRequest::MergeFrom(const ReplicateWALEntryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ReplicateWALEntryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      replicationclusterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.replicationclusterid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sourcebasenamespacedirpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcebasenamespacedirpath_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      sourcehfilearchivedirpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcehfilearchivedirpath_);
    }
  }
}

void ReplicateWALEntryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ReplicateWALEntryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateWALEntryRequest::CopyFrom(const ReplicateWALEntryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ReplicateWALEntryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateWALEntryRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->entry())) return false;
  return true;
}

void ReplicateWALEntryRequest::InternalSwap(ReplicateWALEntryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entry_)->InternalSwap(CastToBase(&other->entry_));
  replicationclusterid_.Swap(&other->replicationclusterid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sourcebasenamespacedirpath_.Swap(&other->sourcebasenamespacedirpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sourcehfilearchivedirpath_.Swap(&other->sourcehfilearchivedirpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicateWALEntryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicateWALEntryResponse::InitAsDefaultInstance() {
}
class ReplicateWALEntryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicateWALEntryResponse>()._has_bits_);
};

ReplicateWALEntryResponse::ReplicateWALEntryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ReplicateWALEntryResponse)
}
ReplicateWALEntryResponse::ReplicateWALEntryResponse(const ReplicateWALEntryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ReplicateWALEntryResponse)
}

void ReplicateWALEntryResponse::SharedCtor() {
}

ReplicateWALEntryResponse::~ReplicateWALEntryResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.ReplicateWALEntryResponse)
  SharedDtor();
}

void ReplicateWALEntryResponse::SharedDtor() {
}

void ReplicateWALEntryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicateWALEntryResponse& ReplicateWALEntryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicateWALEntryResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void ReplicateWALEntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ReplicateWALEntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplicateWALEntryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplicateWALEntryResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ReplicateWALEntryResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ReplicateWALEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ReplicateWALEntryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplicateWALEntryResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ReplicateWALEntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ReplicateWALEntryResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicateWALEntryResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ReplicateWALEntryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ReplicateWALEntryResponse)
  return target;
}

size_t ReplicateWALEntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ReplicateWALEntryResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicateWALEntryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ReplicateWALEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicateWALEntryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicateWALEntryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ReplicateWALEntryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ReplicateWALEntryResponse)
    MergeFrom(*source);
  }
}

void ReplicateWALEntryResponse::MergeFrom(const ReplicateWALEntryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ReplicateWALEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReplicateWALEntryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ReplicateWALEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicateWALEntryResponse::CopyFrom(const ReplicateWALEntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ReplicateWALEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicateWALEntryResponse::IsInitialized() const {
  return true;
}

void ReplicateWALEntryResponse::InternalSwap(ReplicateWALEntryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicateWALEntryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RollWALWriterRequest::InitAsDefaultInstance() {
}
class RollWALWriterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RollWALWriterRequest>()._has_bits_);
};

RollWALWriterRequest::RollWALWriterRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RollWALWriterRequest)
}
RollWALWriterRequest::RollWALWriterRequest(const RollWALWriterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RollWALWriterRequest)
}

void RollWALWriterRequest::SharedCtor() {
}

RollWALWriterRequest::~RollWALWriterRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.RollWALWriterRequest)
  SharedDtor();
}

void RollWALWriterRequest::SharedDtor() {
}

void RollWALWriterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RollWALWriterRequest& RollWALWriterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RollWALWriterRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void RollWALWriterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RollWALWriterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RollWALWriterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RollWALWriterRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RollWALWriterRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RollWALWriterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RollWALWriterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RollWALWriterRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RollWALWriterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RollWALWriterRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RollWALWriterRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RollWALWriterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RollWALWriterRequest)
  return target;
}

size_t RollWALWriterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RollWALWriterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RollWALWriterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RollWALWriterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RollWALWriterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RollWALWriterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RollWALWriterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RollWALWriterRequest)
    MergeFrom(*source);
  }
}

void RollWALWriterRequest::MergeFrom(const RollWALWriterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RollWALWriterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RollWALWriterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RollWALWriterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollWALWriterRequest::CopyFrom(const RollWALWriterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RollWALWriterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollWALWriterRequest::IsInitialized() const {
  return true;
}

void RollWALWriterRequest::InternalSwap(RollWALWriterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RollWALWriterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RollWALWriterResponse::InitAsDefaultInstance() {
}
class RollWALWriterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RollWALWriterResponse>()._has_bits_);
};

RollWALWriterResponse::RollWALWriterResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RollWALWriterResponse)
}
RollWALWriterResponse::RollWALWriterResponse(const RollWALWriterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      region_to_flush_(from.region_to_flush_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RollWALWriterResponse)
}

void RollWALWriterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RollWALWriterResponse_Admin_2eproto.base);
}

RollWALWriterResponse::~RollWALWriterResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.RollWALWriterResponse)
  SharedDtor();
}

void RollWALWriterResponse::SharedDtor() {
}

void RollWALWriterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RollWALWriterResponse& RollWALWriterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RollWALWriterResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void RollWALWriterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RollWALWriterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_to_flush_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RollWALWriterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes region_to_flush = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_region_to_flush(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RollWALWriterResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RollWALWriterResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes region_to_flush = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_region_to_flush()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RollWALWriterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RollWALWriterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RollWALWriterResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RollWALWriterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes region_to_flush = 1;
  for (int i = 0, n = this->region_to_flush_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->region_to_flush(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RollWALWriterResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RollWALWriterResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RollWALWriterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes region_to_flush = 1;
  for (int i = 0, n = this->region_to_flush_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->region_to_flush(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RollWALWriterResponse)
  return target;
}

size_t RollWALWriterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RollWALWriterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes region_to_flush = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->region_to_flush_size());
  for (int i = 0, n = this->region_to_flush_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->region_to_flush(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RollWALWriterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RollWALWriterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RollWALWriterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RollWALWriterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RollWALWriterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RollWALWriterResponse)
    MergeFrom(*source);
  }
}

void RollWALWriterResponse::MergeFrom(const RollWALWriterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RollWALWriterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_to_flush_.MergeFrom(from.region_to_flush_);
}

void RollWALWriterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RollWALWriterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollWALWriterResponse::CopyFrom(const RollWALWriterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RollWALWriterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollWALWriterResponse::IsInitialized() const {
  return true;
}

void RollWALWriterResponse::InternalSwap(RollWALWriterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  region_to_flush_.InternalSwap(CastToBase(&other->region_to_flush_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RollWALWriterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopServerRequest::InitAsDefaultInstance() {
}
class StopServerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<StopServerRequest>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopServerRequest::StopServerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.StopServerRequest)
}
StopServerRequest::StopServerRequest(const StopServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.StopServerRequest)
}

void StopServerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopServerRequest_Admin_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopServerRequest::~StopServerRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.StopServerRequest)
  SharedDtor();
}

void StopServerRequest::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopServerRequest& StopServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopServerRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void StopServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.StopServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_reason(), ptr, ctx, "hbase.pb.StopServerRequest.reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopServerRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.StopServerRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reason = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.StopServerRequest.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.StopServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.StopServerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopServerRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.StopServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.StopServerRequest.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.StopServerRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopServerRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.StopServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.StopServerRequest.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.StopServerRequest)
  return target;
}

size_t StopServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.StopServerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string reason = 1;
  if (has_reason()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.StopServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.StopServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.StopServerRequest)
    MergeFrom(*source);
  }
}

void StopServerRequest::MergeFrom(const StopServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.StopServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason()) {
    _has_bits_[0] |= 0x00000001u;
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void StopServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.StopServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServerRequest::CopyFrom(const StopServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.StopServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StopServerRequest::InternalSwap(StopServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopServerResponse::InitAsDefaultInstance() {
}
class StopServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StopServerResponse>()._has_bits_);
};

StopServerResponse::StopServerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.StopServerResponse)
}
StopServerResponse::StopServerResponse(const StopServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.StopServerResponse)
}

void StopServerResponse::SharedCtor() {
}

StopServerResponse::~StopServerResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.StopServerResponse)
  SharedDtor();
}

void StopServerResponse::SharedDtor() {
}

void StopServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopServerResponse& StopServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopServerResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void StopServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.StopServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopServerResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.StopServerResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.StopServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.StopServerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopServerResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.StopServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.StopServerResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopServerResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.StopServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.StopServerResponse)
  return target;
}

size_t StopServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.StopServerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.StopServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.StopServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.StopServerResponse)
    MergeFrom(*source);
  }
}

void StopServerResponse::MergeFrom(const StopServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.StopServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.StopServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopServerResponse::CopyFrom(const StopServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.StopServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopServerResponse::IsInitialized() const {
  return true;
}

void StopServerResponse::InternalSwap(StopServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetServerInfoRequest::InitAsDefaultInstance() {
}
class GetServerInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetServerInfoRequest>()._has_bits_);
};

GetServerInfoRequest::GetServerInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetServerInfoRequest)
}
GetServerInfoRequest::GetServerInfoRequest(const GetServerInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetServerInfoRequest)
}

void GetServerInfoRequest::SharedCtor() {
}

GetServerInfoRequest::~GetServerInfoRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetServerInfoRequest)
  SharedDtor();
}

void GetServerInfoRequest::SharedDtor() {
}

void GetServerInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServerInfoRequest& GetServerInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServerInfoRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void GetServerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetServerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetServerInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetServerInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetServerInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetServerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetServerInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetServerInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetServerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetServerInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServerInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetServerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetServerInfoRequest)
  return target;
}

size_t GetServerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetServerInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServerInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetServerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServerInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetServerInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetServerInfoRequest)
    MergeFrom(*source);
  }
}

void GetServerInfoRequest::MergeFrom(const GetServerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetServerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServerInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetServerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerInfoRequest::CopyFrom(const GetServerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetServerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerInfoRequest::IsInitialized() const {
  return true;
}

void GetServerInfoRequest::InternalSwap(GetServerInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
  ::hbase::pb::_ServerInfo_default_instance_._instance.get_mutable()->server_name_ = const_cast< ::hbase::pb::ServerName*>(
      ::hbase::pb::ServerName::internal_default_instance());
}
class ServerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerInfo>()._has_bits_);
  static const ::hbase::pb::ServerName& server_name(const ServerInfo* msg);
  static void set_has_server_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_webui_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::ServerName&
ServerInfo::_Internal::server_name(const ServerInfo* msg) {
  return *msg->server_name_;
}
void ServerInfo::clear_server_name() {
  if (server_name_ != nullptr) server_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ServerInfo::ServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_name()) {
    server_name_ = new ::hbase::pb::ServerName(*from.server_name_);
  } else {
    server_name_ = nullptr;
  }
  webui_port_ = from.webui_port_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfo_Admin_2eproto.base);
  ::memset(&server_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webui_port_) -
      reinterpret_cast<char*>(&server_name_)) + sizeof(webui_port_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:hbase.pb.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete server_name_;
}

void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfo& ServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfo_Admin_2eproto.base);
  return *internal_default_instance();
}


void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_name_ != nullptr);
    server_name_->Clear();
  }
  webui_port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ServerName server_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_server_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 webui_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_webui_port(&has_bits);
          webui_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ServerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 webui_port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_webui_port(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webui_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerName server_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::server_name(this), output);
  }

  // optional uint32 webui_port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->webui_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ServerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerName server_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::server_name(this), target);
  }

  // optional uint32 webui_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->webui_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.ServerName server_name = 1;
  if (has_server_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_name_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 webui_port = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->webui_port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server_name()->::hbase::pb::ServerName::MergeFrom(from.server_name());
    }
    if (cached_has_bits & 0x00000002u) {
      webui_port_ = from.webui_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_server_name()) {
    if (!this->server_name_->IsInitialized()) return false;
  }
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_name_, other->server_name_);
  swap(webui_port_, other->webui_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetServerInfoResponse::InitAsDefaultInstance() {
  ::hbase::pb::_GetServerInfoResponse_default_instance_._instance.get_mutable()->server_info_ = const_cast< ::hbase::pb::ServerInfo*>(
      ::hbase::pb::ServerInfo::internal_default_instance());
}
class GetServerInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetServerInfoResponse>()._has_bits_);
  static const ::hbase::pb::ServerInfo& server_info(const GetServerInfoResponse* msg);
  static void set_has_server_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::ServerInfo&
GetServerInfoResponse::_Internal::server_info(const GetServerInfoResponse* msg) {
  return *msg->server_info_;
}
GetServerInfoResponse::GetServerInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetServerInfoResponse)
}
GetServerInfoResponse::GetServerInfoResponse(const GetServerInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_info()) {
    server_info_ = new ::hbase::pb::ServerInfo(*from.server_info_);
  } else {
    server_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetServerInfoResponse)
}

void GetServerInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetServerInfoResponse_Admin_2eproto.base);
  server_info_ = nullptr;
}

GetServerInfoResponse::~GetServerInfoResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetServerInfoResponse)
  SharedDtor();
}

void GetServerInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete server_info_;
}

void GetServerInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServerInfoResponse& GetServerInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetServerInfoResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void GetServerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetServerInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_info_ != nullptr);
    server_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetServerInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ServerInfo server_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_server_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetServerInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetServerInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerInfo server_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetServerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetServerInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetServerInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetServerInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerInfo server_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::server_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetServerInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetServerInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetServerInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerInfo server_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::server_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetServerInfoResponse)
  return target;
}

size_t GetServerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetServerInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.ServerInfo server_info = 1;
  if (has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_info_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServerInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetServerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetServerInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetServerInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetServerInfoResponse)
    MergeFrom(*source);
  }
}

void GetServerInfoResponse::MergeFrom(const GetServerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetServerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_info()) {
    mutable_server_info()->::hbase::pb::ServerInfo::MergeFrom(from.server_info());
  }
}

void GetServerInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetServerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerInfoResponse::CopyFrom(const GetServerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetServerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_server_info()) {
    if (!this->server_info_->IsInitialized()) return false;
  }
  return true;
}

void GetServerInfoResponse::InternalSwap(GetServerInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_info_, other->server_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateConfigurationRequest::InitAsDefaultInstance() {
}
class UpdateConfigurationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateConfigurationRequest>()._has_bits_);
};

UpdateConfigurationRequest::UpdateConfigurationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.UpdateConfigurationRequest)
}
UpdateConfigurationRequest::UpdateConfigurationRequest(const UpdateConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.UpdateConfigurationRequest)
}

void UpdateConfigurationRequest::SharedCtor() {
}

UpdateConfigurationRequest::~UpdateConfigurationRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.UpdateConfigurationRequest)
  SharedDtor();
}

void UpdateConfigurationRequest::SharedDtor() {
}

void UpdateConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateConfigurationRequest& UpdateConfigurationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateConfigurationRequest_Admin_2eproto.base);
  return *internal_default_instance();
}


void UpdateConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.UpdateConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateConfigurationRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.UpdateConfigurationRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.UpdateConfigurationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.UpdateConfigurationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateConfigurationRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.UpdateConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.UpdateConfigurationRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateConfigurationRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.UpdateConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.UpdateConfigurationRequest)
  return target;
}

size_t UpdateConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.UpdateConfigurationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateConfigurationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.UpdateConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateConfigurationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateConfigurationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.UpdateConfigurationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.UpdateConfigurationRequest)
    MergeFrom(*source);
  }
}

void UpdateConfigurationRequest::MergeFrom(const UpdateConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.UpdateConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateConfigurationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.UpdateConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConfigurationRequest::CopyFrom(const UpdateConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.UpdateConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConfigurationRequest::IsInitialized() const {
  return true;
}

void UpdateConfigurationRequest::InternalSwap(UpdateConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateConfigurationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateConfigurationResponse::InitAsDefaultInstance() {
}
class UpdateConfigurationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateConfigurationResponse>()._has_bits_);
};

UpdateConfigurationResponse::UpdateConfigurationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.UpdateConfigurationResponse)
}
UpdateConfigurationResponse::UpdateConfigurationResponse(const UpdateConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.UpdateConfigurationResponse)
}

void UpdateConfigurationResponse::SharedCtor() {
}

UpdateConfigurationResponse::~UpdateConfigurationResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.UpdateConfigurationResponse)
  SharedDtor();
}

void UpdateConfigurationResponse::SharedDtor() {
}

void UpdateConfigurationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateConfigurationResponse& UpdateConfigurationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateConfigurationResponse_Admin_2eproto.base);
  return *internal_default_instance();
}


void UpdateConfigurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.UpdateConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateConfigurationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateConfigurationResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.UpdateConfigurationResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.UpdateConfigurationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.UpdateConfigurationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateConfigurationResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.UpdateConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.UpdateConfigurationResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateConfigurationResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.UpdateConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.UpdateConfigurationResponse)
  return target;
}

size_t UpdateConfigurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.UpdateConfigurationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateConfigurationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.UpdateConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateConfigurationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateConfigurationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.UpdateConfigurationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.UpdateConfigurationResponse)
    MergeFrom(*source);
  }
}

void UpdateConfigurationResponse::MergeFrom(const UpdateConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.UpdateConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateConfigurationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.UpdateConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConfigurationResponse::CopyFrom(const UpdateConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.UpdateConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConfigurationResponse::IsInitialized() const {
  return true;
}

void UpdateConfigurationResponse::InternalSwap(UpdateConfigurationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateConfigurationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::GetRegionInfoRequest* Arena::CreateMaybeMessage< ::hbase::pb::GetRegionInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetRegionInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetRegionInfoResponse* Arena::CreateMaybeMessage< ::hbase::pb::GetRegionInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetRegionInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetStoreFileRequest* Arena::CreateMaybeMessage< ::hbase::pb::GetStoreFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetStoreFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetStoreFileResponse* Arena::CreateMaybeMessage< ::hbase::pb::GetStoreFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetStoreFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetOnlineRegionRequest* Arena::CreateMaybeMessage< ::hbase::pb::GetOnlineRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetOnlineRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetOnlineRegionResponse* Arena::CreateMaybeMessage< ::hbase::pb::GetOnlineRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetOnlineRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::OpenRegionRequest_RegionOpenInfo* Arena::CreateMaybeMessage< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::OpenRegionRequest* Arena::CreateMaybeMessage< ::hbase::pb::OpenRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::OpenRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::OpenRegionResponse* Arena::CreateMaybeMessage< ::hbase::pb::OpenRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::OpenRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::WarmupRegionRequest* Arena::CreateMaybeMessage< ::hbase::pb::WarmupRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::WarmupRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::WarmupRegionResponse* Arena::CreateMaybeMessage< ::hbase::pb::WarmupRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::WarmupRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CloseRegionRequest* Arena::CreateMaybeMessage< ::hbase::pb::CloseRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CloseRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CloseRegionResponse* Arena::CreateMaybeMessage< ::hbase::pb::CloseRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CloseRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FlushRegionRequest* Arena::CreateMaybeMessage< ::hbase::pb::FlushRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FlushRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FlushRegionResponse* Arena::CreateMaybeMessage< ::hbase::pb::FlushRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FlushRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SplitRegionRequest* Arena::CreateMaybeMessage< ::hbase::pb::SplitRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SplitRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SplitRegionResponse* Arena::CreateMaybeMessage< ::hbase::pb::SplitRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SplitRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CompactRegionRequest* Arena::CreateMaybeMessage< ::hbase::pb::CompactRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CompactRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CompactRegionResponse* Arena::CreateMaybeMessage< ::hbase::pb::CompactRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CompactRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* Arena::CreateMaybeMessage< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::UpdateFavoredNodesRequest* Arena::CreateMaybeMessage< ::hbase::pb::UpdateFavoredNodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::UpdateFavoredNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::UpdateFavoredNodesResponse* Arena::CreateMaybeMessage< ::hbase::pb::UpdateFavoredNodesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::UpdateFavoredNodesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MergeRegionsRequest* Arena::CreateMaybeMessage< ::hbase::pb::MergeRegionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MergeRegionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MergeRegionsResponse* Arena::CreateMaybeMessage< ::hbase::pb::MergeRegionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MergeRegionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::WALEntry* Arena::CreateMaybeMessage< ::hbase::pb::WALEntry >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::WALEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ReplicateWALEntryRequest* Arena::CreateMaybeMessage< ::hbase::pb::ReplicateWALEntryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ReplicateWALEntryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ReplicateWALEntryResponse* Arena::CreateMaybeMessage< ::hbase::pb::ReplicateWALEntryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ReplicateWALEntryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RollWALWriterRequest* Arena::CreateMaybeMessage< ::hbase::pb::RollWALWriterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RollWALWriterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RollWALWriterResponse* Arena::CreateMaybeMessage< ::hbase::pb::RollWALWriterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RollWALWriterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::StopServerRequest* Arena::CreateMaybeMessage< ::hbase::pb::StopServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::StopServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::StopServerResponse* Arena::CreateMaybeMessage< ::hbase::pb::StopServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::StopServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetServerInfoRequest* Arena::CreateMaybeMessage< ::hbase::pb::GetServerInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetServerInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ServerInfo* Arena::CreateMaybeMessage< ::hbase::pb::ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetServerInfoResponse* Arena::CreateMaybeMessage< ::hbase::pb::GetServerInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetServerInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::UpdateConfigurationRequest* Arena::CreateMaybeMessage< ::hbase::pb::UpdateConfigurationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::UpdateConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::UpdateConfigurationResponse* Arena::CreateMaybeMessage< ::hbase::pb::UpdateConfigurationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::UpdateConfigurationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
