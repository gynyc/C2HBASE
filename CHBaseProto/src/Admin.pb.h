// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Admin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Admin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "HBase.pb.h"
#include "WAL.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Admin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Admin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[36]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Admin_2eproto;
namespace hbase {
namespace pb {
class CloseRegionRequest;
class CloseRegionRequestDefaultTypeInternal;
extern CloseRegionRequestDefaultTypeInternal _CloseRegionRequest_default_instance_;
class CloseRegionResponse;
class CloseRegionResponseDefaultTypeInternal;
extern CloseRegionResponseDefaultTypeInternal _CloseRegionResponse_default_instance_;
class CompactRegionRequest;
class CompactRegionRequestDefaultTypeInternal;
extern CompactRegionRequestDefaultTypeInternal _CompactRegionRequest_default_instance_;
class CompactRegionResponse;
class CompactRegionResponseDefaultTypeInternal;
extern CompactRegionResponseDefaultTypeInternal _CompactRegionResponse_default_instance_;
class FlushRegionRequest;
class FlushRegionRequestDefaultTypeInternal;
extern FlushRegionRequestDefaultTypeInternal _FlushRegionRequest_default_instance_;
class FlushRegionResponse;
class FlushRegionResponseDefaultTypeInternal;
extern FlushRegionResponseDefaultTypeInternal _FlushRegionResponse_default_instance_;
class GetOnlineRegionRequest;
class GetOnlineRegionRequestDefaultTypeInternal;
extern GetOnlineRegionRequestDefaultTypeInternal _GetOnlineRegionRequest_default_instance_;
class GetOnlineRegionResponse;
class GetOnlineRegionResponseDefaultTypeInternal;
extern GetOnlineRegionResponseDefaultTypeInternal _GetOnlineRegionResponse_default_instance_;
class GetRegionInfoRequest;
class GetRegionInfoRequestDefaultTypeInternal;
extern GetRegionInfoRequestDefaultTypeInternal _GetRegionInfoRequest_default_instance_;
class GetRegionInfoResponse;
class GetRegionInfoResponseDefaultTypeInternal;
extern GetRegionInfoResponseDefaultTypeInternal _GetRegionInfoResponse_default_instance_;
class GetServerInfoRequest;
class GetServerInfoRequestDefaultTypeInternal;
extern GetServerInfoRequestDefaultTypeInternal _GetServerInfoRequest_default_instance_;
class GetServerInfoResponse;
class GetServerInfoResponseDefaultTypeInternal;
extern GetServerInfoResponseDefaultTypeInternal _GetServerInfoResponse_default_instance_;
class GetStoreFileRequest;
class GetStoreFileRequestDefaultTypeInternal;
extern GetStoreFileRequestDefaultTypeInternal _GetStoreFileRequest_default_instance_;
class GetStoreFileResponse;
class GetStoreFileResponseDefaultTypeInternal;
extern GetStoreFileResponseDefaultTypeInternal _GetStoreFileResponse_default_instance_;
class MergeRegionsRequest;
class MergeRegionsRequestDefaultTypeInternal;
extern MergeRegionsRequestDefaultTypeInternal _MergeRegionsRequest_default_instance_;
class MergeRegionsResponse;
class MergeRegionsResponseDefaultTypeInternal;
extern MergeRegionsResponseDefaultTypeInternal _MergeRegionsResponse_default_instance_;
class OpenRegionRequest;
class OpenRegionRequestDefaultTypeInternal;
extern OpenRegionRequestDefaultTypeInternal _OpenRegionRequest_default_instance_;
class OpenRegionRequest_RegionOpenInfo;
class OpenRegionRequest_RegionOpenInfoDefaultTypeInternal;
extern OpenRegionRequest_RegionOpenInfoDefaultTypeInternal _OpenRegionRequest_RegionOpenInfo_default_instance_;
class OpenRegionResponse;
class OpenRegionResponseDefaultTypeInternal;
extern OpenRegionResponseDefaultTypeInternal _OpenRegionResponse_default_instance_;
class ReplicateWALEntryRequest;
class ReplicateWALEntryRequestDefaultTypeInternal;
extern ReplicateWALEntryRequestDefaultTypeInternal _ReplicateWALEntryRequest_default_instance_;
class ReplicateWALEntryResponse;
class ReplicateWALEntryResponseDefaultTypeInternal;
extern ReplicateWALEntryResponseDefaultTypeInternal _ReplicateWALEntryResponse_default_instance_;
class RollWALWriterRequest;
class RollWALWriterRequestDefaultTypeInternal;
extern RollWALWriterRequestDefaultTypeInternal _RollWALWriterRequest_default_instance_;
class RollWALWriterResponse;
class RollWALWriterResponseDefaultTypeInternal;
extern RollWALWriterResponseDefaultTypeInternal _RollWALWriterResponse_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class SplitRegionRequest;
class SplitRegionRequestDefaultTypeInternal;
extern SplitRegionRequestDefaultTypeInternal _SplitRegionRequest_default_instance_;
class SplitRegionResponse;
class SplitRegionResponseDefaultTypeInternal;
extern SplitRegionResponseDefaultTypeInternal _SplitRegionResponse_default_instance_;
class StopServerRequest;
class StopServerRequestDefaultTypeInternal;
extern StopServerRequestDefaultTypeInternal _StopServerRequest_default_instance_;
class StopServerResponse;
class StopServerResponseDefaultTypeInternal;
extern StopServerResponseDefaultTypeInternal _StopServerResponse_default_instance_;
class UpdateConfigurationRequest;
class UpdateConfigurationRequestDefaultTypeInternal;
extern UpdateConfigurationRequestDefaultTypeInternal _UpdateConfigurationRequest_default_instance_;
class UpdateConfigurationResponse;
class UpdateConfigurationResponseDefaultTypeInternal;
extern UpdateConfigurationResponseDefaultTypeInternal _UpdateConfigurationResponse_default_instance_;
class UpdateFavoredNodesRequest;
class UpdateFavoredNodesRequestDefaultTypeInternal;
extern UpdateFavoredNodesRequestDefaultTypeInternal _UpdateFavoredNodesRequest_default_instance_;
class UpdateFavoredNodesRequest_RegionUpdateInfo;
class UpdateFavoredNodesRequest_RegionUpdateInfoDefaultTypeInternal;
extern UpdateFavoredNodesRequest_RegionUpdateInfoDefaultTypeInternal _UpdateFavoredNodesRequest_RegionUpdateInfo_default_instance_;
class UpdateFavoredNodesResponse;
class UpdateFavoredNodesResponseDefaultTypeInternal;
extern UpdateFavoredNodesResponseDefaultTypeInternal _UpdateFavoredNodesResponse_default_instance_;
class WALEntry;
class WALEntryDefaultTypeInternal;
extern WALEntryDefaultTypeInternal _WALEntry_default_instance_;
class WarmupRegionRequest;
class WarmupRegionRequestDefaultTypeInternal;
extern WarmupRegionRequestDefaultTypeInternal _WarmupRegionRequest_default_instance_;
class WarmupRegionResponse;
class WarmupRegionResponseDefaultTypeInternal;
extern WarmupRegionResponseDefaultTypeInternal _WarmupRegionResponse_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::CloseRegionRequest* Arena::CreateMaybeMessage<::hbase::pb::CloseRegionRequest>(Arena*);
template<> ::hbase::pb::CloseRegionResponse* Arena::CreateMaybeMessage<::hbase::pb::CloseRegionResponse>(Arena*);
template<> ::hbase::pb::CompactRegionRequest* Arena::CreateMaybeMessage<::hbase::pb::CompactRegionRequest>(Arena*);
template<> ::hbase::pb::CompactRegionResponse* Arena::CreateMaybeMessage<::hbase::pb::CompactRegionResponse>(Arena*);
template<> ::hbase::pb::FlushRegionRequest* Arena::CreateMaybeMessage<::hbase::pb::FlushRegionRequest>(Arena*);
template<> ::hbase::pb::FlushRegionResponse* Arena::CreateMaybeMessage<::hbase::pb::FlushRegionResponse>(Arena*);
template<> ::hbase::pb::GetOnlineRegionRequest* Arena::CreateMaybeMessage<::hbase::pb::GetOnlineRegionRequest>(Arena*);
template<> ::hbase::pb::GetOnlineRegionResponse* Arena::CreateMaybeMessage<::hbase::pb::GetOnlineRegionResponse>(Arena*);
template<> ::hbase::pb::GetRegionInfoRequest* Arena::CreateMaybeMessage<::hbase::pb::GetRegionInfoRequest>(Arena*);
template<> ::hbase::pb::GetRegionInfoResponse* Arena::CreateMaybeMessage<::hbase::pb::GetRegionInfoResponse>(Arena*);
template<> ::hbase::pb::GetServerInfoRequest* Arena::CreateMaybeMessage<::hbase::pb::GetServerInfoRequest>(Arena*);
template<> ::hbase::pb::GetServerInfoResponse* Arena::CreateMaybeMessage<::hbase::pb::GetServerInfoResponse>(Arena*);
template<> ::hbase::pb::GetStoreFileRequest* Arena::CreateMaybeMessage<::hbase::pb::GetStoreFileRequest>(Arena*);
template<> ::hbase::pb::GetStoreFileResponse* Arena::CreateMaybeMessage<::hbase::pb::GetStoreFileResponse>(Arena*);
template<> ::hbase::pb::MergeRegionsRequest* Arena::CreateMaybeMessage<::hbase::pb::MergeRegionsRequest>(Arena*);
template<> ::hbase::pb::MergeRegionsResponse* Arena::CreateMaybeMessage<::hbase::pb::MergeRegionsResponse>(Arena*);
template<> ::hbase::pb::OpenRegionRequest* Arena::CreateMaybeMessage<::hbase::pb::OpenRegionRequest>(Arena*);
template<> ::hbase::pb::OpenRegionRequest_RegionOpenInfo* Arena::CreateMaybeMessage<::hbase::pb::OpenRegionRequest_RegionOpenInfo>(Arena*);
template<> ::hbase::pb::OpenRegionResponse* Arena::CreateMaybeMessage<::hbase::pb::OpenRegionResponse>(Arena*);
template<> ::hbase::pb::ReplicateWALEntryRequest* Arena::CreateMaybeMessage<::hbase::pb::ReplicateWALEntryRequest>(Arena*);
template<> ::hbase::pb::ReplicateWALEntryResponse* Arena::CreateMaybeMessage<::hbase::pb::ReplicateWALEntryResponse>(Arena*);
template<> ::hbase::pb::RollWALWriterRequest* Arena::CreateMaybeMessage<::hbase::pb::RollWALWriterRequest>(Arena*);
template<> ::hbase::pb::RollWALWriterResponse* Arena::CreateMaybeMessage<::hbase::pb::RollWALWriterResponse>(Arena*);
template<> ::hbase::pb::ServerInfo* Arena::CreateMaybeMessage<::hbase::pb::ServerInfo>(Arena*);
template<> ::hbase::pb::SplitRegionRequest* Arena::CreateMaybeMessage<::hbase::pb::SplitRegionRequest>(Arena*);
template<> ::hbase::pb::SplitRegionResponse* Arena::CreateMaybeMessage<::hbase::pb::SplitRegionResponse>(Arena*);
template<> ::hbase::pb::StopServerRequest* Arena::CreateMaybeMessage<::hbase::pb::StopServerRequest>(Arena*);
template<> ::hbase::pb::StopServerResponse* Arena::CreateMaybeMessage<::hbase::pb::StopServerResponse>(Arena*);
template<> ::hbase::pb::UpdateConfigurationRequest* Arena::CreateMaybeMessage<::hbase::pb::UpdateConfigurationRequest>(Arena*);
template<> ::hbase::pb::UpdateConfigurationResponse* Arena::CreateMaybeMessage<::hbase::pb::UpdateConfigurationResponse>(Arena*);
template<> ::hbase::pb::UpdateFavoredNodesRequest* Arena::CreateMaybeMessage<::hbase::pb::UpdateFavoredNodesRequest>(Arena*);
template<> ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* Arena::CreateMaybeMessage<::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo>(Arena*);
template<> ::hbase::pb::UpdateFavoredNodesResponse* Arena::CreateMaybeMessage<::hbase::pb::UpdateFavoredNodesResponse>(Arena*);
template<> ::hbase::pb::WALEntry* Arena::CreateMaybeMessage<::hbase::pb::WALEntry>(Arena*);
template<> ::hbase::pb::WarmupRegionRequest* Arena::CreateMaybeMessage<::hbase::pb::WarmupRegionRequest>(Arena*);
template<> ::hbase::pb::WarmupRegionResponse* Arena::CreateMaybeMessage<::hbase::pb::WarmupRegionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

enum GetRegionInfoResponse_CompactionState : int {
  GetRegionInfoResponse_CompactionState_NONE = 0,
  GetRegionInfoResponse_CompactionState_MINOR = 1,
  GetRegionInfoResponse_CompactionState_MAJOR = 2,
  GetRegionInfoResponse_CompactionState_MAJOR_AND_MINOR = 3
};
bool GetRegionInfoResponse_CompactionState_IsValid(int value);
constexpr GetRegionInfoResponse_CompactionState GetRegionInfoResponse_CompactionState_CompactionState_MIN = GetRegionInfoResponse_CompactionState_NONE;
constexpr GetRegionInfoResponse_CompactionState GetRegionInfoResponse_CompactionState_CompactionState_MAX = GetRegionInfoResponse_CompactionState_MAJOR_AND_MINOR;
constexpr int GetRegionInfoResponse_CompactionState_CompactionState_ARRAYSIZE = GetRegionInfoResponse_CompactionState_CompactionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetRegionInfoResponse_CompactionState_descriptor();
template<typename T>
inline const std::string& GetRegionInfoResponse_CompactionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetRegionInfoResponse_CompactionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetRegionInfoResponse_CompactionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetRegionInfoResponse_CompactionState_descriptor(), enum_t_value);
}
inline bool GetRegionInfoResponse_CompactionState_Parse(
    const std::string& name, GetRegionInfoResponse_CompactionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetRegionInfoResponse_CompactionState>(
    GetRegionInfoResponse_CompactionState_descriptor(), name, value);
}
enum OpenRegionResponse_RegionOpeningState : int {
  OpenRegionResponse_RegionOpeningState_OPENED = 0,
  OpenRegionResponse_RegionOpeningState_ALREADY_OPENED = 1,
  OpenRegionResponse_RegionOpeningState_FAILED_OPENING = 2
};
bool OpenRegionResponse_RegionOpeningState_IsValid(int value);
constexpr OpenRegionResponse_RegionOpeningState OpenRegionResponse_RegionOpeningState_RegionOpeningState_MIN = OpenRegionResponse_RegionOpeningState_OPENED;
constexpr OpenRegionResponse_RegionOpeningState OpenRegionResponse_RegionOpeningState_RegionOpeningState_MAX = OpenRegionResponse_RegionOpeningState_FAILED_OPENING;
constexpr int OpenRegionResponse_RegionOpeningState_RegionOpeningState_ARRAYSIZE = OpenRegionResponse_RegionOpeningState_RegionOpeningState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenRegionResponse_RegionOpeningState_descriptor();
template<typename T>
inline const std::string& OpenRegionResponse_RegionOpeningState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpenRegionResponse_RegionOpeningState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpenRegionResponse_RegionOpeningState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpenRegionResponse_RegionOpeningState_descriptor(), enum_t_value);
}
inline bool OpenRegionResponse_RegionOpeningState_Parse(
    const std::string& name, OpenRegionResponse_RegionOpeningState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpenRegionResponse_RegionOpeningState>(
    OpenRegionResponse_RegionOpeningState_descriptor(), name, value);
}
// ===================================================================

class GetRegionInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetRegionInfoRequest) */ {
 public:
  GetRegionInfoRequest();
  virtual ~GetRegionInfoRequest();

  GetRegionInfoRequest(const GetRegionInfoRequest& from);
  GetRegionInfoRequest(GetRegionInfoRequest&& from) noexcept
    : GetRegionInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetRegionInfoRequest& operator=(const GetRegionInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRegionInfoRequest& operator=(GetRegionInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRegionInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRegionInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetRegionInfoRequest*>(
               &_GetRegionInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetRegionInfoRequest& a, GetRegionInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRegionInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRegionInfoRequest* New() const final {
    return CreateMaybeMessage<GetRegionInfoRequest>(nullptr);
  }

  GetRegionInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRegionInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRegionInfoRequest& from);
  void MergeFrom(const GetRegionInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRegionInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetRegionInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
    kCompactionStateFieldNumber = 2,
  };
  // required .hbase.pb.RegionSpecifier region = 1;
  bool has_region() const;
  void clear_region();
  const ::hbase::pb::RegionSpecifier& region() const;
  ::hbase::pb::RegionSpecifier* release_region();
  ::hbase::pb::RegionSpecifier* mutable_region();
  void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // optional bool compaction_state = 2;
  bool has_compaction_state() const;
  void clear_compaction_state();
  bool compaction_state() const;
  void set_compaction_state(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetRegionInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::RegionSpecifier* region_;
  bool compaction_state_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class GetRegionInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetRegionInfoResponse) */ {
 public:
  GetRegionInfoResponse();
  virtual ~GetRegionInfoResponse();

  GetRegionInfoResponse(const GetRegionInfoResponse& from);
  GetRegionInfoResponse(GetRegionInfoResponse&& from) noexcept
    : GetRegionInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetRegionInfoResponse& operator=(const GetRegionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRegionInfoResponse& operator=(GetRegionInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRegionInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRegionInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetRegionInfoResponse*>(
               &_GetRegionInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetRegionInfoResponse& a, GetRegionInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRegionInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRegionInfoResponse* New() const final {
    return CreateMaybeMessage<GetRegionInfoResponse>(nullptr);
  }

  GetRegionInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRegionInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRegionInfoResponse& from);
  void MergeFrom(const GetRegionInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRegionInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetRegionInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetRegionInfoResponse_CompactionState CompactionState;
  static constexpr CompactionState NONE =
    GetRegionInfoResponse_CompactionState_NONE;
  static constexpr CompactionState MINOR =
    GetRegionInfoResponse_CompactionState_MINOR;
  static constexpr CompactionState MAJOR =
    GetRegionInfoResponse_CompactionState_MAJOR;
  static constexpr CompactionState MAJOR_AND_MINOR =
    GetRegionInfoResponse_CompactionState_MAJOR_AND_MINOR;
  static inline bool CompactionState_IsValid(int value) {
    return GetRegionInfoResponse_CompactionState_IsValid(value);
  }
  static constexpr CompactionState CompactionState_MIN =
    GetRegionInfoResponse_CompactionState_CompactionState_MIN;
  static constexpr CompactionState CompactionState_MAX =
    GetRegionInfoResponse_CompactionState_CompactionState_MAX;
  static constexpr int CompactionState_ARRAYSIZE =
    GetRegionInfoResponse_CompactionState_CompactionState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CompactionState_descriptor() {
    return GetRegionInfoResponse_CompactionState_descriptor();
  }
  template<typename T>
  static inline const std::string& CompactionState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompactionState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompactionState_Name.");
    return GetRegionInfoResponse_CompactionState_Name(enum_t_value);
  }
  static inline bool CompactionState_Parse(const std::string& name,
      CompactionState* value) {
    return GetRegionInfoResponse_CompactionState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRegionInfoFieldNumber = 1,
    kCompactionStateFieldNumber = 2,
  };
  // required .hbase.pb.RegionInfo region_info = 1;
  bool has_region_info() const;
  void clear_region_info();
  const ::hbase::pb::RegionInfo& region_info() const;
  ::hbase::pb::RegionInfo* release_region_info();
  ::hbase::pb::RegionInfo* mutable_region_info();
  void set_allocated_region_info(::hbase::pb::RegionInfo* region_info);

  // optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
  bool has_compaction_state() const;
  void clear_compaction_state();
  ::hbase::pb::GetRegionInfoResponse_CompactionState compaction_state() const;
  void set_compaction_state(::hbase::pb::GetRegionInfoResponse_CompactionState value);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetRegionInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::RegionInfo* region_info_;
  int compaction_state_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class GetStoreFileRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetStoreFileRequest) */ {
 public:
  GetStoreFileRequest();
  virtual ~GetStoreFileRequest();

  GetStoreFileRequest(const GetStoreFileRequest& from);
  GetStoreFileRequest(GetStoreFileRequest&& from) noexcept
    : GetStoreFileRequest() {
    *this = ::std::move(from);
  }

  inline GetStoreFileRequest& operator=(const GetStoreFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStoreFileRequest& operator=(GetStoreFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStoreFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStoreFileRequest* internal_default_instance() {
    return reinterpret_cast<const GetStoreFileRequest*>(
               &_GetStoreFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetStoreFileRequest& a, GetStoreFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStoreFileRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStoreFileRequest* New() const final {
    return CreateMaybeMessage<GetStoreFileRequest>(nullptr);
  }

  GetStoreFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStoreFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStoreFileRequest& from);
  void MergeFrom(const GetStoreFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStoreFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetStoreFileRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 2,
    kRegionFieldNumber = 1,
  };
  // repeated bytes family = 2;
  int family_size() const;
  void clear_family();
  const std::string& family(int index) const;
  std::string* mutable_family(int index);
  void set_family(int index, const std::string& value);
  void set_family(int index, std::string&& value);
  void set_family(int index, const char* value);
  void set_family(int index, const void* value, size_t size);
  std::string* add_family();
  void add_family(const std::string& value);
  void add_family(std::string&& value);
  void add_family(const char* value);
  void add_family(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& family() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_family();

  // required .hbase.pb.RegionSpecifier region = 1;
  bool has_region() const;
  void clear_region();
  const ::hbase::pb::RegionSpecifier& region() const;
  ::hbase::pb::RegionSpecifier* release_region();
  ::hbase::pb::RegionSpecifier* mutable_region();
  void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetStoreFileRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> family_;
  ::hbase::pb::RegionSpecifier* region_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class GetStoreFileResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetStoreFileResponse) */ {
 public:
  GetStoreFileResponse();
  virtual ~GetStoreFileResponse();

  GetStoreFileResponse(const GetStoreFileResponse& from);
  GetStoreFileResponse(GetStoreFileResponse&& from) noexcept
    : GetStoreFileResponse() {
    *this = ::std::move(from);
  }

  inline GetStoreFileResponse& operator=(const GetStoreFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStoreFileResponse& operator=(GetStoreFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStoreFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStoreFileResponse* internal_default_instance() {
    return reinterpret_cast<const GetStoreFileResponse*>(
               &_GetStoreFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetStoreFileResponse& a, GetStoreFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStoreFileResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStoreFileResponse* New() const final {
    return CreateMaybeMessage<GetStoreFileResponse>(nullptr);
  }

  GetStoreFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStoreFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStoreFileResponse& from);
  void MergeFrom(const GetStoreFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStoreFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetStoreFileResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreFileFieldNumber = 1,
  };
  // repeated string store_file = 1;
  int store_file_size() const;
  void clear_store_file();
  const std::string& store_file(int index) const;
  std::string* mutable_store_file(int index);
  void set_store_file(int index, const std::string& value);
  void set_store_file(int index, std::string&& value);
  void set_store_file(int index, const char* value);
  void set_store_file(int index, const char* value, size_t size);
  std::string* add_store_file();
  void add_store_file(const std::string& value);
  void add_store_file(std::string&& value);
  void add_store_file(const char* value);
  void add_store_file(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& store_file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_store_file();

  // @@protoc_insertion_point(class_scope:hbase.pb.GetStoreFileResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> store_file_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class GetOnlineRegionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetOnlineRegionRequest) */ {
 public:
  GetOnlineRegionRequest();
  virtual ~GetOnlineRegionRequest();

  GetOnlineRegionRequest(const GetOnlineRegionRequest& from);
  GetOnlineRegionRequest(GetOnlineRegionRequest&& from) noexcept
    : GetOnlineRegionRequest() {
    *this = ::std::move(from);
  }

  inline GetOnlineRegionRequest& operator=(const GetOnlineRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOnlineRegionRequest& operator=(GetOnlineRegionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOnlineRegionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOnlineRegionRequest* internal_default_instance() {
    return reinterpret_cast<const GetOnlineRegionRequest*>(
               &_GetOnlineRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetOnlineRegionRequest& a, GetOnlineRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOnlineRegionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOnlineRegionRequest* New() const final {
    return CreateMaybeMessage<GetOnlineRegionRequest>(nullptr);
  }

  GetOnlineRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOnlineRegionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOnlineRegionRequest& from);
  void MergeFrom(const GetOnlineRegionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOnlineRegionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetOnlineRegionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.GetOnlineRegionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class GetOnlineRegionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetOnlineRegionResponse) */ {
 public:
  GetOnlineRegionResponse();
  virtual ~GetOnlineRegionResponse();

  GetOnlineRegionResponse(const GetOnlineRegionResponse& from);
  GetOnlineRegionResponse(GetOnlineRegionResponse&& from) noexcept
    : GetOnlineRegionResponse() {
    *this = ::std::move(from);
  }

  inline GetOnlineRegionResponse& operator=(const GetOnlineRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOnlineRegionResponse& operator=(GetOnlineRegionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOnlineRegionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOnlineRegionResponse* internal_default_instance() {
    return reinterpret_cast<const GetOnlineRegionResponse*>(
               &_GetOnlineRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetOnlineRegionResponse& a, GetOnlineRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOnlineRegionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOnlineRegionResponse* New() const final {
    return CreateMaybeMessage<GetOnlineRegionResponse>(nullptr);
  }

  GetOnlineRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOnlineRegionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOnlineRegionResponse& from);
  void MergeFrom(const GetOnlineRegionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOnlineRegionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetOnlineRegionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionInfoFieldNumber = 1,
  };
  // repeated .hbase.pb.RegionInfo region_info = 1;
  int region_info_size() const;
  void clear_region_info();
  ::hbase::pb::RegionInfo* mutable_region_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionInfo >*
      mutable_region_info();
  const ::hbase::pb::RegionInfo& region_info(int index) const;
  ::hbase::pb::RegionInfo* add_region_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionInfo >&
      region_info() const;

  // @@protoc_insertion_point(class_scope:hbase.pb.GetOnlineRegionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionInfo > region_info_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class OpenRegionRequest_RegionOpenInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.OpenRegionRequest.RegionOpenInfo) */ {
 public:
  OpenRegionRequest_RegionOpenInfo();
  virtual ~OpenRegionRequest_RegionOpenInfo();

  OpenRegionRequest_RegionOpenInfo(const OpenRegionRequest_RegionOpenInfo& from);
  OpenRegionRequest_RegionOpenInfo(OpenRegionRequest_RegionOpenInfo&& from) noexcept
    : OpenRegionRequest_RegionOpenInfo() {
    *this = ::std::move(from);
  }

  inline OpenRegionRequest_RegionOpenInfo& operator=(const OpenRegionRequest_RegionOpenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenRegionRequest_RegionOpenInfo& operator=(OpenRegionRequest_RegionOpenInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenRegionRequest_RegionOpenInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenRegionRequest_RegionOpenInfo* internal_default_instance() {
    return reinterpret_cast<const OpenRegionRequest_RegionOpenInfo*>(
               &_OpenRegionRequest_RegionOpenInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OpenRegionRequest_RegionOpenInfo& a, OpenRegionRequest_RegionOpenInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenRegionRequest_RegionOpenInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenRegionRequest_RegionOpenInfo* New() const final {
    return CreateMaybeMessage<OpenRegionRequest_RegionOpenInfo>(nullptr);
  }

  OpenRegionRequest_RegionOpenInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenRegionRequest_RegionOpenInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenRegionRequest_RegionOpenInfo& from);
  void MergeFrom(const OpenRegionRequest_RegionOpenInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenRegionRequest_RegionOpenInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.OpenRegionRequest.RegionOpenInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFavoredNodesFieldNumber = 3,
    kRegionFieldNumber = 1,
    kVersionOfOfflineNodeFieldNumber = 2,
  };
  // repeated .hbase.pb.ServerName favored_nodes = 3;
  int favored_nodes_size() const;
  void clear_favored_nodes();
  ::hbase::pb::ServerName* mutable_favored_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName >*
      mutable_favored_nodes();
  const ::hbase::pb::ServerName& favored_nodes(int index) const;
  ::hbase::pb::ServerName* add_favored_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName >&
      favored_nodes() const;

  // required .hbase.pb.RegionInfo region = 1;
  bool has_region() const;
  void clear_region();
  const ::hbase::pb::RegionInfo& region() const;
  ::hbase::pb::RegionInfo* release_region();
  ::hbase::pb::RegionInfo* mutable_region();
  void set_allocated_region(::hbase::pb::RegionInfo* region);

  // optional uint32 version_of_offline_node = 2;
  bool has_version_of_offline_node() const;
  void clear_version_of_offline_node();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_of_offline_node() const;
  void set_version_of_offline_node(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.OpenRegionRequest.RegionOpenInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName > favored_nodes_;
  ::hbase::pb::RegionInfo* region_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_of_offline_node_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class OpenRegionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.OpenRegionRequest) */ {
 public:
  OpenRegionRequest();
  virtual ~OpenRegionRequest();

  OpenRegionRequest(const OpenRegionRequest& from);
  OpenRegionRequest(OpenRegionRequest&& from) noexcept
    : OpenRegionRequest() {
    *this = ::std::move(from);
  }

  inline OpenRegionRequest& operator=(const OpenRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenRegionRequest& operator=(OpenRegionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenRegionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenRegionRequest* internal_default_instance() {
    return reinterpret_cast<const OpenRegionRequest*>(
               &_OpenRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OpenRegionRequest& a, OpenRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenRegionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenRegionRequest* New() const final {
    return CreateMaybeMessage<OpenRegionRequest>(nullptr);
  }

  OpenRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenRegionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenRegionRequest& from);
  void MergeFrom(const OpenRegionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenRegionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.OpenRegionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OpenRegionRequest_RegionOpenInfo RegionOpenInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kOpenInfoFieldNumber = 1,
    kServerStartCodeFieldNumber = 2,
    kMasterSystemTimeFieldNumber = 5,
  };
  // repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
  int open_info_size() const;
  void clear_open_info();
  ::hbase::pb::OpenRegionRequest_RegionOpenInfo* mutable_open_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >*
      mutable_open_info();
  const ::hbase::pb::OpenRegionRequest_RegionOpenInfo& open_info(int index) const;
  ::hbase::pb::OpenRegionRequest_RegionOpenInfo* add_open_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >&
      open_info() const;

  // optional uint64 serverStartCode = 2;
  bool has_serverstartcode() const;
  void clear_serverstartcode();
  ::PROTOBUF_NAMESPACE_ID::uint64 serverstartcode() const;
  void set_serverstartcode(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 master_system_time = 5;
  bool has_master_system_time() const;
  void clear_master_system_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 master_system_time() const;
  void set_master_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.OpenRegionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo > open_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 serverstartcode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 master_system_time_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class OpenRegionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.OpenRegionResponse) */ {
 public:
  OpenRegionResponse();
  virtual ~OpenRegionResponse();

  OpenRegionResponse(const OpenRegionResponse& from);
  OpenRegionResponse(OpenRegionResponse&& from) noexcept
    : OpenRegionResponse() {
    *this = ::std::move(from);
  }

  inline OpenRegionResponse& operator=(const OpenRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenRegionResponse& operator=(OpenRegionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenRegionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenRegionResponse* internal_default_instance() {
    return reinterpret_cast<const OpenRegionResponse*>(
               &_OpenRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OpenRegionResponse& a, OpenRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenRegionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenRegionResponse* New() const final {
    return CreateMaybeMessage<OpenRegionResponse>(nullptr);
  }

  OpenRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenRegionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenRegionResponse& from);
  void MergeFrom(const OpenRegionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenRegionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.OpenRegionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OpenRegionResponse_RegionOpeningState RegionOpeningState;
  static constexpr RegionOpeningState OPENED =
    OpenRegionResponse_RegionOpeningState_OPENED;
  static constexpr RegionOpeningState ALREADY_OPENED =
    OpenRegionResponse_RegionOpeningState_ALREADY_OPENED;
  static constexpr RegionOpeningState FAILED_OPENING =
    OpenRegionResponse_RegionOpeningState_FAILED_OPENING;
  static inline bool RegionOpeningState_IsValid(int value) {
    return OpenRegionResponse_RegionOpeningState_IsValid(value);
  }
  static constexpr RegionOpeningState RegionOpeningState_MIN =
    OpenRegionResponse_RegionOpeningState_RegionOpeningState_MIN;
  static constexpr RegionOpeningState RegionOpeningState_MAX =
    OpenRegionResponse_RegionOpeningState_RegionOpeningState_MAX;
  static constexpr int RegionOpeningState_ARRAYSIZE =
    OpenRegionResponse_RegionOpeningState_RegionOpeningState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RegionOpeningState_descriptor() {
    return OpenRegionResponse_RegionOpeningState_descriptor();
  }
  template<typename T>
  static inline const std::string& RegionOpeningState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RegionOpeningState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RegionOpeningState_Name.");
    return OpenRegionResponse_RegionOpeningState_Name(enum_t_value);
  }
  static inline bool RegionOpeningState_Parse(const std::string& name,
      RegionOpeningState* value) {
    return OpenRegionResponse_RegionOpeningState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOpeningStateFieldNumber = 1,
  };
  // repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
  int opening_state_size() const;
  void clear_opening_state();
  ::hbase::pb::OpenRegionResponse_RegionOpeningState opening_state(int index) const;
  void set_opening_state(int index, ::hbase::pb::OpenRegionResponse_RegionOpeningState value);
  void add_opening_state(::hbase::pb::OpenRegionResponse_RegionOpeningState value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& opening_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_opening_state();

  // @@protoc_insertion_point(class_scope:hbase.pb.OpenRegionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> opening_state_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class WarmupRegionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.WarmupRegionRequest) */ {
 public:
  WarmupRegionRequest();
  virtual ~WarmupRegionRequest();

  WarmupRegionRequest(const WarmupRegionRequest& from);
  WarmupRegionRequest(WarmupRegionRequest&& from) noexcept
    : WarmupRegionRequest() {
    *this = ::std::move(from);
  }

  inline WarmupRegionRequest& operator=(const WarmupRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarmupRegionRequest& operator=(WarmupRegionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WarmupRegionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarmupRegionRequest* internal_default_instance() {
    return reinterpret_cast<const WarmupRegionRequest*>(
               &_WarmupRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WarmupRegionRequest& a, WarmupRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WarmupRegionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WarmupRegionRequest* New() const final {
    return CreateMaybeMessage<WarmupRegionRequest>(nullptr);
  }

  WarmupRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WarmupRegionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WarmupRegionRequest& from);
  void MergeFrom(const WarmupRegionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarmupRegionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.WarmupRegionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionInfoFieldNumber = 1,
  };
  // required .hbase.pb.RegionInfo regionInfo = 1;
  bool has_regioninfo() const;
  void clear_regioninfo();
  const ::hbase::pb::RegionInfo& regioninfo() const;
  ::hbase::pb::RegionInfo* release_regioninfo();
  ::hbase::pb::RegionInfo* mutable_regioninfo();
  void set_allocated_regioninfo(::hbase::pb::RegionInfo* regioninfo);

  // @@protoc_insertion_point(class_scope:hbase.pb.WarmupRegionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::RegionInfo* regioninfo_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class WarmupRegionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.WarmupRegionResponse) */ {
 public:
  WarmupRegionResponse();
  virtual ~WarmupRegionResponse();

  WarmupRegionResponse(const WarmupRegionResponse& from);
  WarmupRegionResponse(WarmupRegionResponse&& from) noexcept
    : WarmupRegionResponse() {
    *this = ::std::move(from);
  }

  inline WarmupRegionResponse& operator=(const WarmupRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarmupRegionResponse& operator=(WarmupRegionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WarmupRegionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarmupRegionResponse* internal_default_instance() {
    return reinterpret_cast<const WarmupRegionResponse*>(
               &_WarmupRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WarmupRegionResponse& a, WarmupRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WarmupRegionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WarmupRegionResponse* New() const final {
    return CreateMaybeMessage<WarmupRegionResponse>(nullptr);
  }

  WarmupRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WarmupRegionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WarmupRegionResponse& from);
  void MergeFrom(const WarmupRegionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarmupRegionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.WarmupRegionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.WarmupRegionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class CloseRegionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.CloseRegionRequest) */ {
 public:
  CloseRegionRequest();
  virtual ~CloseRegionRequest();

  CloseRegionRequest(const CloseRegionRequest& from);
  CloseRegionRequest(CloseRegionRequest&& from) noexcept
    : CloseRegionRequest() {
    *this = ::std::move(from);
  }

  inline CloseRegionRequest& operator=(const CloseRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRegionRequest& operator=(CloseRegionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseRegionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseRegionRequest* internal_default_instance() {
    return reinterpret_cast<const CloseRegionRequest*>(
               &_CloseRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CloseRegionRequest& a, CloseRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRegionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseRegionRequest* New() const final {
    return CreateMaybeMessage<CloseRegionRequest>(nullptr);
  }

  CloseRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseRegionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseRegionRequest& from);
  void MergeFrom(const CloseRegionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRegionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.CloseRegionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
    kDestinationServerFieldNumber = 4,
    kServerStartCodeFieldNumber = 5,
    kVersionOfClosingNodeFieldNumber = 2,
    kTransitionInZKFieldNumber = 3,
  };
  // required .hbase.pb.RegionSpecifier region = 1;
  bool has_region() const;
  void clear_region();
  const ::hbase::pb::RegionSpecifier& region() const;
  ::hbase::pb::RegionSpecifier* release_region();
  ::hbase::pb::RegionSpecifier* mutable_region();
  void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // optional .hbase.pb.ServerName destination_server = 4;
  bool has_destination_server() const;
  void clear_destination_server();
  const ::hbase::pb::ServerName& destination_server() const;
  ::hbase::pb::ServerName* release_destination_server();
  ::hbase::pb::ServerName* mutable_destination_server();
  void set_allocated_destination_server(::hbase::pb::ServerName* destination_server);

  // optional uint64 serverStartCode = 5;
  bool has_serverstartcode() const;
  void clear_serverstartcode();
  ::PROTOBUF_NAMESPACE_ID::uint64 serverstartcode() const;
  void set_serverstartcode(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 version_of_closing_node = 2;
  bool has_version_of_closing_node() const;
  void clear_version_of_closing_node();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_of_closing_node() const;
  void set_version_of_closing_node(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool transition_in_ZK = 3 [default = true];
  bool has_transition_in_zk() const;
  void clear_transition_in_zk();
  bool transition_in_zk() const;
  void set_transition_in_zk(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.CloseRegionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::RegionSpecifier* region_;
  ::hbase::pb::ServerName* destination_server_;
  ::PROTOBUF_NAMESPACE_ID::uint64 serverstartcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_of_closing_node_;
  bool transition_in_zk_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class CloseRegionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.CloseRegionResponse) */ {
 public:
  CloseRegionResponse();
  virtual ~CloseRegionResponse();

  CloseRegionResponse(const CloseRegionResponse& from);
  CloseRegionResponse(CloseRegionResponse&& from) noexcept
    : CloseRegionResponse() {
    *this = ::std::move(from);
  }

  inline CloseRegionResponse& operator=(const CloseRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseRegionResponse& operator=(CloseRegionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseRegionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseRegionResponse* internal_default_instance() {
    return reinterpret_cast<const CloseRegionResponse*>(
               &_CloseRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CloseRegionResponse& a, CloseRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseRegionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseRegionResponse* New() const final {
    return CreateMaybeMessage<CloseRegionResponse>(nullptr);
  }

  CloseRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseRegionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseRegionResponse& from);
  void MergeFrom(const CloseRegionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRegionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.CloseRegionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClosedFieldNumber = 1,
  };
  // required bool closed = 1;
  bool has_closed() const;
  void clear_closed();
  bool closed() const;
  void set_closed(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.CloseRegionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool closed_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class FlushRegionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.FlushRegionRequest) */ {
 public:
  FlushRegionRequest();
  virtual ~FlushRegionRequest();

  FlushRegionRequest(const FlushRegionRequest& from);
  FlushRegionRequest(FlushRegionRequest&& from) noexcept
    : FlushRegionRequest() {
    *this = ::std::move(from);
  }

  inline FlushRegionRequest& operator=(const FlushRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushRegionRequest& operator=(FlushRegionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlushRegionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushRegionRequest* internal_default_instance() {
    return reinterpret_cast<const FlushRegionRequest*>(
               &_FlushRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FlushRegionRequest& a, FlushRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushRegionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushRegionRequest* New() const final {
    return CreateMaybeMessage<FlushRegionRequest>(nullptr);
  }

  FlushRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushRegionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlushRegionRequest& from);
  void MergeFrom(const FlushRegionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushRegionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.FlushRegionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
    kIfOlderThanTsFieldNumber = 2,
    kWriteFlushWalMarkerFieldNumber = 3,
  };
  // required .hbase.pb.RegionSpecifier region = 1;
  bool has_region() const;
  void clear_region();
  const ::hbase::pb::RegionSpecifier& region() const;
  ::hbase::pb::RegionSpecifier* release_region();
  ::hbase::pb::RegionSpecifier* mutable_region();
  void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // optional uint64 if_older_than_ts = 2;
  bool has_if_older_than_ts() const;
  void clear_if_older_than_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 if_older_than_ts() const;
  void set_if_older_than_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool write_flush_wal_marker = 3;
  bool has_write_flush_wal_marker() const;
  void clear_write_flush_wal_marker();
  bool write_flush_wal_marker() const;
  void set_write_flush_wal_marker(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.FlushRegionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::RegionSpecifier* region_;
  ::PROTOBUF_NAMESPACE_ID::uint64 if_older_than_ts_;
  bool write_flush_wal_marker_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class FlushRegionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.FlushRegionResponse) */ {
 public:
  FlushRegionResponse();
  virtual ~FlushRegionResponse();

  FlushRegionResponse(const FlushRegionResponse& from);
  FlushRegionResponse(FlushRegionResponse&& from) noexcept
    : FlushRegionResponse() {
    *this = ::std::move(from);
  }

  inline FlushRegionResponse& operator=(const FlushRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushRegionResponse& operator=(FlushRegionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlushRegionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushRegionResponse* internal_default_instance() {
    return reinterpret_cast<const FlushRegionResponse*>(
               &_FlushRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FlushRegionResponse& a, FlushRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushRegionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushRegionResponse* New() const final {
    return CreateMaybeMessage<FlushRegionResponse>(nullptr);
  }

  FlushRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushRegionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlushRegionResponse& from);
  void MergeFrom(const FlushRegionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushRegionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.FlushRegionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastFlushTimeFieldNumber = 1,
    kFlushedFieldNumber = 2,
    kWroteFlushWalMarkerFieldNumber = 3,
  };
  // required uint64 last_flush_time = 1;
  bool has_last_flush_time() const;
  void clear_last_flush_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_flush_time() const;
  void set_last_flush_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool flushed = 2;
  bool has_flushed() const;
  void clear_flushed();
  bool flushed() const;
  void set_flushed(bool value);

  // optional bool wrote_flush_wal_marker = 3;
  bool has_wrote_flush_wal_marker() const;
  void clear_wrote_flush_wal_marker();
  bool wrote_flush_wal_marker() const;
  void set_wrote_flush_wal_marker(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.FlushRegionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_flush_time_;
  bool flushed_;
  bool wrote_flush_wal_marker_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class SplitRegionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.SplitRegionRequest) */ {
 public:
  SplitRegionRequest();
  virtual ~SplitRegionRequest();

  SplitRegionRequest(const SplitRegionRequest& from);
  SplitRegionRequest(SplitRegionRequest&& from) noexcept
    : SplitRegionRequest() {
    *this = ::std::move(from);
  }

  inline SplitRegionRequest& operator=(const SplitRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitRegionRequest& operator=(SplitRegionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitRegionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitRegionRequest* internal_default_instance() {
    return reinterpret_cast<const SplitRegionRequest*>(
               &_SplitRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SplitRegionRequest& a, SplitRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitRegionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitRegionRequest* New() const final {
    return CreateMaybeMessage<SplitRegionRequest>(nullptr);
  }

  SplitRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitRegionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitRegionRequest& from);
  void MergeFrom(const SplitRegionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitRegionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.SplitRegionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSplitPointFieldNumber = 2,
    kRegionFieldNumber = 1,
  };
  // optional bytes split_point = 2;
  bool has_split_point() const;
  void clear_split_point();
  const std::string& split_point() const;
  void set_split_point(const std::string& value);
  void set_split_point(std::string&& value);
  void set_split_point(const char* value);
  void set_split_point(const void* value, size_t size);
  std::string* mutable_split_point();
  std::string* release_split_point();
  void set_allocated_split_point(std::string* split_point);

  // required .hbase.pb.RegionSpecifier region = 1;
  bool has_region() const;
  void clear_region();
  const ::hbase::pb::RegionSpecifier& region() const;
  ::hbase::pb::RegionSpecifier* release_region();
  ::hbase::pb::RegionSpecifier* mutable_region();
  void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // @@protoc_insertion_point(class_scope:hbase.pb.SplitRegionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr split_point_;
  ::hbase::pb::RegionSpecifier* region_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class SplitRegionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.SplitRegionResponse) */ {
 public:
  SplitRegionResponse();
  virtual ~SplitRegionResponse();

  SplitRegionResponse(const SplitRegionResponse& from);
  SplitRegionResponse(SplitRegionResponse&& from) noexcept
    : SplitRegionResponse() {
    *this = ::std::move(from);
  }

  inline SplitRegionResponse& operator=(const SplitRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitRegionResponse& operator=(SplitRegionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitRegionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitRegionResponse* internal_default_instance() {
    return reinterpret_cast<const SplitRegionResponse*>(
               &_SplitRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SplitRegionResponse& a, SplitRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitRegionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitRegionResponse* New() const final {
    return CreateMaybeMessage<SplitRegionResponse>(nullptr);
  }

  SplitRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitRegionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitRegionResponse& from);
  void MergeFrom(const SplitRegionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitRegionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.SplitRegionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.SplitRegionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class CompactRegionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.CompactRegionRequest) */ {
 public:
  CompactRegionRequest();
  virtual ~CompactRegionRequest();

  CompactRegionRequest(const CompactRegionRequest& from);
  CompactRegionRequest(CompactRegionRequest&& from) noexcept
    : CompactRegionRequest() {
    *this = ::std::move(from);
  }

  inline CompactRegionRequest& operator=(const CompactRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactRegionRequest& operator=(CompactRegionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompactRegionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactRegionRequest* internal_default_instance() {
    return reinterpret_cast<const CompactRegionRequest*>(
               &_CompactRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CompactRegionRequest& a, CompactRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactRegionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompactRegionRequest* New() const final {
    return CreateMaybeMessage<CompactRegionRequest>(nullptr);
  }

  CompactRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompactRegionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompactRegionRequest& from);
  void MergeFrom(const CompactRegionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactRegionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.CompactRegionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 3,
    kRegionFieldNumber = 1,
    kMajorFieldNumber = 2,
  };
  // optional bytes family = 3;
  bool has_family() const;
  void clear_family();
  const std::string& family() const;
  void set_family(const std::string& value);
  void set_family(std::string&& value);
  void set_family(const char* value);
  void set_family(const void* value, size_t size);
  std::string* mutable_family();
  std::string* release_family();
  void set_allocated_family(std::string* family);

  // required .hbase.pb.RegionSpecifier region = 1;
  bool has_region() const;
  void clear_region();
  const ::hbase::pb::RegionSpecifier& region() const;
  ::hbase::pb::RegionSpecifier* release_region();
  ::hbase::pb::RegionSpecifier* mutable_region();
  void set_allocated_region(::hbase::pb::RegionSpecifier* region);

  // optional bool major = 2;
  bool has_major() const;
  void clear_major();
  bool major() const;
  void set_major(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.CompactRegionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_;
  ::hbase::pb::RegionSpecifier* region_;
  bool major_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class CompactRegionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.CompactRegionResponse) */ {
 public:
  CompactRegionResponse();
  virtual ~CompactRegionResponse();

  CompactRegionResponse(const CompactRegionResponse& from);
  CompactRegionResponse(CompactRegionResponse&& from) noexcept
    : CompactRegionResponse() {
    *this = ::std::move(from);
  }

  inline CompactRegionResponse& operator=(const CompactRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactRegionResponse& operator=(CompactRegionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompactRegionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactRegionResponse* internal_default_instance() {
    return reinterpret_cast<const CompactRegionResponse*>(
               &_CompactRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CompactRegionResponse& a, CompactRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactRegionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompactRegionResponse* New() const final {
    return CreateMaybeMessage<CompactRegionResponse>(nullptr);
  }

  CompactRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompactRegionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompactRegionResponse& from);
  void MergeFrom(const CompactRegionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactRegionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.CompactRegionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.CompactRegionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class UpdateFavoredNodesRequest_RegionUpdateInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo) */ {
 public:
  UpdateFavoredNodesRequest_RegionUpdateInfo();
  virtual ~UpdateFavoredNodesRequest_RegionUpdateInfo();

  UpdateFavoredNodesRequest_RegionUpdateInfo(const UpdateFavoredNodesRequest_RegionUpdateInfo& from);
  UpdateFavoredNodesRequest_RegionUpdateInfo(UpdateFavoredNodesRequest_RegionUpdateInfo&& from) noexcept
    : UpdateFavoredNodesRequest_RegionUpdateInfo() {
    *this = ::std::move(from);
  }

  inline UpdateFavoredNodesRequest_RegionUpdateInfo& operator=(const UpdateFavoredNodesRequest_RegionUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFavoredNodesRequest_RegionUpdateInfo& operator=(UpdateFavoredNodesRequest_RegionUpdateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateFavoredNodesRequest_RegionUpdateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFavoredNodesRequest_RegionUpdateInfo* internal_default_instance() {
    return reinterpret_cast<const UpdateFavoredNodesRequest_RegionUpdateInfo*>(
               &_UpdateFavoredNodesRequest_RegionUpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateFavoredNodesRequest_RegionUpdateInfo& a, UpdateFavoredNodesRequest_RegionUpdateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFavoredNodesRequest_RegionUpdateInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFavoredNodesRequest_RegionUpdateInfo* New() const final {
    return CreateMaybeMessage<UpdateFavoredNodesRequest_RegionUpdateInfo>(nullptr);
  }

  UpdateFavoredNodesRequest_RegionUpdateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFavoredNodesRequest_RegionUpdateInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateFavoredNodesRequest_RegionUpdateInfo& from);
  void MergeFrom(const UpdateFavoredNodesRequest_RegionUpdateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFavoredNodesRequest_RegionUpdateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFavoredNodesFieldNumber = 2,
    kRegionFieldNumber = 1,
  };
  // repeated .hbase.pb.ServerName favored_nodes = 2;
  int favored_nodes_size() const;
  void clear_favored_nodes();
  ::hbase::pb::ServerName* mutable_favored_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName >*
      mutable_favored_nodes();
  const ::hbase::pb::ServerName& favored_nodes(int index) const;
  ::hbase::pb::ServerName* add_favored_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName >&
      favored_nodes() const;

  // required .hbase.pb.RegionInfo region = 1;
  bool has_region() const;
  void clear_region();
  const ::hbase::pb::RegionInfo& region() const;
  ::hbase::pb::RegionInfo* release_region();
  ::hbase::pb::RegionInfo* mutable_region();
  void set_allocated_region(::hbase::pb::RegionInfo* region);

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName > favored_nodes_;
  ::hbase::pb::RegionInfo* region_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class UpdateFavoredNodesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.UpdateFavoredNodesRequest) */ {
 public:
  UpdateFavoredNodesRequest();
  virtual ~UpdateFavoredNodesRequest();

  UpdateFavoredNodesRequest(const UpdateFavoredNodesRequest& from);
  UpdateFavoredNodesRequest(UpdateFavoredNodesRequest&& from) noexcept
    : UpdateFavoredNodesRequest() {
    *this = ::std::move(from);
  }

  inline UpdateFavoredNodesRequest& operator=(const UpdateFavoredNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFavoredNodesRequest& operator=(UpdateFavoredNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateFavoredNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFavoredNodesRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateFavoredNodesRequest*>(
               &_UpdateFavoredNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UpdateFavoredNodesRequest& a, UpdateFavoredNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFavoredNodesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFavoredNodesRequest* New() const final {
    return CreateMaybeMessage<UpdateFavoredNodesRequest>(nullptr);
  }

  UpdateFavoredNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFavoredNodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateFavoredNodesRequest& from);
  void MergeFrom(const UpdateFavoredNodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFavoredNodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.UpdateFavoredNodesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateFavoredNodesRequest_RegionUpdateInfo RegionUpdateInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateInfoFieldNumber = 1,
  };
  // repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
  int update_info_size() const;
  void clear_update_info();
  ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* mutable_update_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >*
      mutable_update_info();
  const ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo& update_info(int index) const;
  ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* add_update_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >&
      update_info() const;

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateFavoredNodesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo > update_info_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class UpdateFavoredNodesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.UpdateFavoredNodesResponse) */ {
 public:
  UpdateFavoredNodesResponse();
  virtual ~UpdateFavoredNodesResponse();

  UpdateFavoredNodesResponse(const UpdateFavoredNodesResponse& from);
  UpdateFavoredNodesResponse(UpdateFavoredNodesResponse&& from) noexcept
    : UpdateFavoredNodesResponse() {
    *this = ::std::move(from);
  }

  inline UpdateFavoredNodesResponse& operator=(const UpdateFavoredNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFavoredNodesResponse& operator=(UpdateFavoredNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateFavoredNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFavoredNodesResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateFavoredNodesResponse*>(
               &_UpdateFavoredNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UpdateFavoredNodesResponse& a, UpdateFavoredNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFavoredNodesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFavoredNodesResponse* New() const final {
    return CreateMaybeMessage<UpdateFavoredNodesResponse>(nullptr);
  }

  UpdateFavoredNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFavoredNodesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateFavoredNodesResponse& from);
  void MergeFrom(const UpdateFavoredNodesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFavoredNodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.UpdateFavoredNodesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional uint32 response = 1;
  bool has_response() const;
  void clear_response();
  ::PROTOBUF_NAMESPACE_ID::uint32 response() const;
  void set_response(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateFavoredNodesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 response_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class MergeRegionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.MergeRegionsRequest) */ {
 public:
  MergeRegionsRequest();
  virtual ~MergeRegionsRequest();

  MergeRegionsRequest(const MergeRegionsRequest& from);
  MergeRegionsRequest(MergeRegionsRequest&& from) noexcept
    : MergeRegionsRequest() {
    *this = ::std::move(from);
  }

  inline MergeRegionsRequest& operator=(const MergeRegionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeRegionsRequest& operator=(MergeRegionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeRegionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeRegionsRequest* internal_default_instance() {
    return reinterpret_cast<const MergeRegionsRequest*>(
               &_MergeRegionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MergeRegionsRequest& a, MergeRegionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeRegionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeRegionsRequest* New() const final {
    return CreateMaybeMessage<MergeRegionsRequest>(nullptr);
  }

  MergeRegionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeRegionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeRegionsRequest& from);
  void MergeFrom(const MergeRegionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeRegionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.MergeRegionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionAFieldNumber = 1,
    kRegionBFieldNumber = 2,
    kMasterSystemTimeFieldNumber = 4,
    kForcibleFieldNumber = 3,
  };
  // required .hbase.pb.RegionSpecifier region_a = 1;
  bool has_region_a() const;
  void clear_region_a();
  const ::hbase::pb::RegionSpecifier& region_a() const;
  ::hbase::pb::RegionSpecifier* release_region_a();
  ::hbase::pb::RegionSpecifier* mutable_region_a();
  void set_allocated_region_a(::hbase::pb::RegionSpecifier* region_a);

  // required .hbase.pb.RegionSpecifier region_b = 2;
  bool has_region_b() const;
  void clear_region_b();
  const ::hbase::pb::RegionSpecifier& region_b() const;
  ::hbase::pb::RegionSpecifier* release_region_b();
  ::hbase::pb::RegionSpecifier* mutable_region_b();
  void set_allocated_region_b(::hbase::pb::RegionSpecifier* region_b);

  // optional uint64 master_system_time = 4;
  bool has_master_system_time() const;
  void clear_master_system_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 master_system_time() const;
  void set_master_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool forcible = 3 [default = false];
  bool has_forcible() const;
  void clear_forcible();
  bool forcible() const;
  void set_forcible(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.MergeRegionsRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::RegionSpecifier* region_a_;
  ::hbase::pb::RegionSpecifier* region_b_;
  ::PROTOBUF_NAMESPACE_ID::uint64 master_system_time_;
  bool forcible_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class MergeRegionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.MergeRegionsResponse) */ {
 public:
  MergeRegionsResponse();
  virtual ~MergeRegionsResponse();

  MergeRegionsResponse(const MergeRegionsResponse& from);
  MergeRegionsResponse(MergeRegionsResponse&& from) noexcept
    : MergeRegionsResponse() {
    *this = ::std::move(from);
  }

  inline MergeRegionsResponse& operator=(const MergeRegionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeRegionsResponse& operator=(MergeRegionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeRegionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeRegionsResponse* internal_default_instance() {
    return reinterpret_cast<const MergeRegionsResponse*>(
               &_MergeRegionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MergeRegionsResponse& a, MergeRegionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeRegionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeRegionsResponse* New() const final {
    return CreateMaybeMessage<MergeRegionsResponse>(nullptr);
  }

  MergeRegionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeRegionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeRegionsResponse& from);
  void MergeFrom(const MergeRegionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeRegionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.MergeRegionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.MergeRegionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class WALEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.WALEntry) */ {
 public:
  WALEntry();
  virtual ~WALEntry();

  WALEntry(const WALEntry& from);
  WALEntry(WALEntry&& from) noexcept
    : WALEntry() {
    *this = ::std::move(from);
  }

  inline WALEntry& operator=(const WALEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline WALEntry& operator=(WALEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WALEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WALEntry* internal_default_instance() {
    return reinterpret_cast<const WALEntry*>(
               &_WALEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WALEntry& a, WALEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(WALEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WALEntry* New() const final {
    return CreateMaybeMessage<WALEntry>(nullptr);
  }

  WALEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WALEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WALEntry& from);
  void MergeFrom(const WALEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WALEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.WALEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyValueBytesFieldNumber = 2,
    kKeyFieldNumber = 1,
    kAssociatedCellCountFieldNumber = 3,
  };
  // repeated bytes key_value_bytes = 2;
  int key_value_bytes_size() const;
  void clear_key_value_bytes();
  const std::string& key_value_bytes(int index) const;
  std::string* mutable_key_value_bytes(int index);
  void set_key_value_bytes(int index, const std::string& value);
  void set_key_value_bytes(int index, std::string&& value);
  void set_key_value_bytes(int index, const char* value);
  void set_key_value_bytes(int index, const void* value, size_t size);
  std::string* add_key_value_bytes();
  void add_key_value_bytes(const std::string& value);
  void add_key_value_bytes(std::string&& value);
  void add_key_value_bytes(const char* value);
  void add_key_value_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key_value_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key_value_bytes();

  // required .hbase.pb.WALKey key = 1;
  bool has_key() const;
  void clear_key();
  const ::hbase::pb::WALKey& key() const;
  ::hbase::pb::WALKey* release_key();
  ::hbase::pb::WALKey* mutable_key();
  void set_allocated_key(::hbase::pb::WALKey* key);

  // optional int32 associated_cell_count = 3;
  bool has_associated_cell_count() const;
  void clear_associated_cell_count();
  ::PROTOBUF_NAMESPACE_ID::int32 associated_cell_count() const;
  void set_associated_cell_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.WALEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_value_bytes_;
  ::hbase::pb::WALKey* key_;
  ::PROTOBUF_NAMESPACE_ID::int32 associated_cell_count_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class ReplicateWALEntryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ReplicateWALEntryRequest) */ {
 public:
  ReplicateWALEntryRequest();
  virtual ~ReplicateWALEntryRequest();

  ReplicateWALEntryRequest(const ReplicateWALEntryRequest& from);
  ReplicateWALEntryRequest(ReplicateWALEntryRequest&& from) noexcept
    : ReplicateWALEntryRequest() {
    *this = ::std::move(from);
  }

  inline ReplicateWALEntryRequest& operator=(const ReplicateWALEntryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateWALEntryRequest& operator=(ReplicateWALEntryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplicateWALEntryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicateWALEntryRequest* internal_default_instance() {
    return reinterpret_cast<const ReplicateWALEntryRequest*>(
               &_ReplicateWALEntryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ReplicateWALEntryRequest& a, ReplicateWALEntryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicateWALEntryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicateWALEntryRequest* New() const final {
    return CreateMaybeMessage<ReplicateWALEntryRequest>(nullptr);
  }

  ReplicateWALEntryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicateWALEntryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicateWALEntryRequest& from);
  void MergeFrom(const ReplicateWALEntryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicateWALEntryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ReplicateWALEntryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
    kReplicationClusterIdFieldNumber = 2,
    kSourceBaseNamespaceDirPathFieldNumber = 3,
    kSourceHFileArchiveDirPathFieldNumber = 4,
  };
  // repeated .hbase.pb.WALEntry entry = 1;
  int entry_size() const;
  void clear_entry();
  ::hbase::pb::WALEntry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::WALEntry >*
      mutable_entry();
  const ::hbase::pb::WALEntry& entry(int index) const;
  ::hbase::pb::WALEntry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::WALEntry >&
      entry() const;

  // optional string replicationClusterId = 2;
  bool has_replicationclusterid() const;
  void clear_replicationclusterid();
  const std::string& replicationclusterid() const;
  void set_replicationclusterid(const std::string& value);
  void set_replicationclusterid(std::string&& value);
  void set_replicationclusterid(const char* value);
  void set_replicationclusterid(const char* value, size_t size);
  std::string* mutable_replicationclusterid();
  std::string* release_replicationclusterid();
  void set_allocated_replicationclusterid(std::string* replicationclusterid);

  // optional string sourceBaseNamespaceDirPath = 3;
  bool has_sourcebasenamespacedirpath() const;
  void clear_sourcebasenamespacedirpath();
  const std::string& sourcebasenamespacedirpath() const;
  void set_sourcebasenamespacedirpath(const std::string& value);
  void set_sourcebasenamespacedirpath(std::string&& value);
  void set_sourcebasenamespacedirpath(const char* value);
  void set_sourcebasenamespacedirpath(const char* value, size_t size);
  std::string* mutable_sourcebasenamespacedirpath();
  std::string* release_sourcebasenamespacedirpath();
  void set_allocated_sourcebasenamespacedirpath(std::string* sourcebasenamespacedirpath);

  // optional string sourceHFileArchiveDirPath = 4;
  bool has_sourcehfilearchivedirpath() const;
  void clear_sourcehfilearchivedirpath();
  const std::string& sourcehfilearchivedirpath() const;
  void set_sourcehfilearchivedirpath(const std::string& value);
  void set_sourcehfilearchivedirpath(std::string&& value);
  void set_sourcehfilearchivedirpath(const char* value);
  void set_sourcehfilearchivedirpath(const char* value, size_t size);
  std::string* mutable_sourcehfilearchivedirpath();
  std::string* release_sourcehfilearchivedirpath();
  void set_allocated_sourcehfilearchivedirpath(std::string* sourcehfilearchivedirpath);

  // @@protoc_insertion_point(class_scope:hbase.pb.ReplicateWALEntryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::WALEntry > entry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replicationclusterid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcebasenamespacedirpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcehfilearchivedirpath_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class ReplicateWALEntryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ReplicateWALEntryResponse) */ {
 public:
  ReplicateWALEntryResponse();
  virtual ~ReplicateWALEntryResponse();

  ReplicateWALEntryResponse(const ReplicateWALEntryResponse& from);
  ReplicateWALEntryResponse(ReplicateWALEntryResponse&& from) noexcept
    : ReplicateWALEntryResponse() {
    *this = ::std::move(from);
  }

  inline ReplicateWALEntryResponse& operator=(const ReplicateWALEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateWALEntryResponse& operator=(ReplicateWALEntryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplicateWALEntryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicateWALEntryResponse* internal_default_instance() {
    return reinterpret_cast<const ReplicateWALEntryResponse*>(
               &_ReplicateWALEntryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ReplicateWALEntryResponse& a, ReplicateWALEntryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicateWALEntryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicateWALEntryResponse* New() const final {
    return CreateMaybeMessage<ReplicateWALEntryResponse>(nullptr);
  }

  ReplicateWALEntryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicateWALEntryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicateWALEntryResponse& from);
  void MergeFrom(const ReplicateWALEntryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicateWALEntryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ReplicateWALEntryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.ReplicateWALEntryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class RollWALWriterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.RollWALWriterRequest) */ {
 public:
  RollWALWriterRequest();
  virtual ~RollWALWriterRequest();

  RollWALWriterRequest(const RollWALWriterRequest& from);
  RollWALWriterRequest(RollWALWriterRequest&& from) noexcept
    : RollWALWriterRequest() {
    *this = ::std::move(from);
  }

  inline RollWALWriterRequest& operator=(const RollWALWriterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollWALWriterRequest& operator=(RollWALWriterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RollWALWriterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollWALWriterRequest* internal_default_instance() {
    return reinterpret_cast<const RollWALWriterRequest*>(
               &_RollWALWriterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(RollWALWriterRequest& a, RollWALWriterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RollWALWriterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RollWALWriterRequest* New() const final {
    return CreateMaybeMessage<RollWALWriterRequest>(nullptr);
  }

  RollWALWriterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RollWALWriterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RollWALWriterRequest& from);
  void MergeFrom(const RollWALWriterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollWALWriterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.RollWALWriterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.RollWALWriterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class RollWALWriterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.RollWALWriterResponse) */ {
 public:
  RollWALWriterResponse();
  virtual ~RollWALWriterResponse();

  RollWALWriterResponse(const RollWALWriterResponse& from);
  RollWALWriterResponse(RollWALWriterResponse&& from) noexcept
    : RollWALWriterResponse() {
    *this = ::std::move(from);
  }

  inline RollWALWriterResponse& operator=(const RollWALWriterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollWALWriterResponse& operator=(RollWALWriterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RollWALWriterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollWALWriterResponse* internal_default_instance() {
    return reinterpret_cast<const RollWALWriterResponse*>(
               &_RollWALWriterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RollWALWriterResponse& a, RollWALWriterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RollWALWriterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RollWALWriterResponse* New() const final {
    return CreateMaybeMessage<RollWALWriterResponse>(nullptr);
  }

  RollWALWriterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RollWALWriterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RollWALWriterResponse& from);
  void MergeFrom(const RollWALWriterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollWALWriterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.RollWALWriterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionToFlushFieldNumber = 1,
  };
  // repeated bytes region_to_flush = 1;
  int region_to_flush_size() const;
  void clear_region_to_flush();
  const std::string& region_to_flush(int index) const;
  std::string* mutable_region_to_flush(int index);
  void set_region_to_flush(int index, const std::string& value);
  void set_region_to_flush(int index, std::string&& value);
  void set_region_to_flush(int index, const char* value);
  void set_region_to_flush(int index, const void* value, size_t size);
  std::string* add_region_to_flush();
  void add_region_to_flush(const std::string& value);
  void add_region_to_flush(std::string&& value);
  void add_region_to_flush(const char* value);
  void add_region_to_flush(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& region_to_flush() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_region_to_flush();

  // @@protoc_insertion_point(class_scope:hbase.pb.RollWALWriterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> region_to_flush_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class StopServerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.StopServerRequest) */ {
 public:
  StopServerRequest();
  virtual ~StopServerRequest();

  StopServerRequest(const StopServerRequest& from);
  StopServerRequest(StopServerRequest&& from) noexcept
    : StopServerRequest() {
    *this = ::std::move(from);
  }

  inline StopServerRequest& operator=(const StopServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopServerRequest& operator=(StopServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopServerRequest* internal_default_instance() {
    return reinterpret_cast<const StopServerRequest*>(
               &_StopServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(StopServerRequest& a, StopServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopServerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopServerRequest* New() const final {
    return CreateMaybeMessage<StopServerRequest>(nullptr);
  }

  StopServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopServerRequest& from);
  void MergeFrom(const StopServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.StopServerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // required string reason = 1;
  bool has_reason() const;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // @@protoc_insertion_point(class_scope:hbase.pb.StopServerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class StopServerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.StopServerResponse) */ {
 public:
  StopServerResponse();
  virtual ~StopServerResponse();

  StopServerResponse(const StopServerResponse& from);
  StopServerResponse(StopServerResponse&& from) noexcept
    : StopServerResponse() {
    *this = ::std::move(from);
  }

  inline StopServerResponse& operator=(const StopServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopServerResponse& operator=(StopServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopServerResponse* internal_default_instance() {
    return reinterpret_cast<const StopServerResponse*>(
               &_StopServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(StopServerResponse& a, StopServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopServerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopServerResponse* New() const final {
    return CreateMaybeMessage<StopServerResponse>(nullptr);
  }

  StopServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopServerResponse& from);
  void MergeFrom(const StopServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.StopServerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.StopServerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class GetServerInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetServerInfoRequest) */ {
 public:
  GetServerInfoRequest();
  virtual ~GetServerInfoRequest();

  GetServerInfoRequest(const GetServerInfoRequest& from);
  GetServerInfoRequest(GetServerInfoRequest&& from) noexcept
    : GetServerInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetServerInfoRequest& operator=(const GetServerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerInfoRequest& operator=(GetServerInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServerInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerInfoRequest*>(
               &_GetServerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetServerInfoRequest& a, GetServerInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerInfoRequest* New() const final {
    return CreateMaybeMessage<GetServerInfoRequest>(nullptr);
  }

  GetServerInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServerInfoRequest& from);
  void MergeFrom(const GetServerInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetServerInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.GetServerInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(nullptr);
  }

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 1,
    kWebuiPortFieldNumber = 2,
  };
  // required .hbase.pb.ServerName server_name = 1;
  bool has_server_name() const;
  void clear_server_name();
  const ::hbase::pb::ServerName& server_name() const;
  ::hbase::pb::ServerName* release_server_name();
  ::hbase::pb::ServerName* mutable_server_name();
  void set_allocated_server_name(::hbase::pb::ServerName* server_name);

  // optional uint32 webui_port = 2;
  bool has_webui_port() const;
  void clear_webui_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 webui_port() const;
  void set_webui_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::ServerName* server_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 webui_port_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class GetServerInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetServerInfoResponse) */ {
 public:
  GetServerInfoResponse();
  virtual ~GetServerInfoResponse();

  GetServerInfoResponse(const GetServerInfoResponse& from);
  GetServerInfoResponse(GetServerInfoResponse&& from) noexcept
    : GetServerInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetServerInfoResponse& operator=(const GetServerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServerInfoResponse& operator=(GetServerInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServerInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerInfoResponse*>(
               &_GetServerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetServerInfoResponse& a, GetServerInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServerInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServerInfoResponse* New() const final {
    return CreateMaybeMessage<GetServerInfoResponse>(nullptr);
  }

  GetServerInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServerInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServerInfoResponse& from);
  void MergeFrom(const GetServerInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetServerInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerInfoFieldNumber = 1,
  };
  // required .hbase.pb.ServerInfo server_info = 1;
  bool has_server_info() const;
  void clear_server_info();
  const ::hbase::pb::ServerInfo& server_info() const;
  ::hbase::pb::ServerInfo* release_server_info();
  ::hbase::pb::ServerInfo* mutable_server_info();
  void set_allocated_server_info(::hbase::pb::ServerInfo* server_info);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetServerInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::ServerInfo* server_info_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class UpdateConfigurationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.UpdateConfigurationRequest) */ {
 public:
  UpdateConfigurationRequest();
  virtual ~UpdateConfigurationRequest();

  UpdateConfigurationRequest(const UpdateConfigurationRequest& from);
  UpdateConfigurationRequest(UpdateConfigurationRequest&& from) noexcept
    : UpdateConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateConfigurationRequest& operator=(const UpdateConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateConfigurationRequest& operator=(UpdateConfigurationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateConfigurationRequest*>(
               &_UpdateConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UpdateConfigurationRequest& a, UpdateConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateConfigurationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateConfigurationRequest* New() const final {
    return CreateMaybeMessage<UpdateConfigurationRequest>(nullptr);
  }

  UpdateConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateConfigurationRequest& from);
  void MergeFrom(const UpdateConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.UpdateConfigurationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateConfigurationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// -------------------------------------------------------------------

class UpdateConfigurationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.UpdateConfigurationResponse) */ {
 public:
  UpdateConfigurationResponse();
  virtual ~UpdateConfigurationResponse();

  UpdateConfigurationResponse(const UpdateConfigurationResponse& from);
  UpdateConfigurationResponse(UpdateConfigurationResponse&& from) noexcept
    : UpdateConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline UpdateConfigurationResponse& operator=(const UpdateConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateConfigurationResponse& operator=(UpdateConfigurationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateConfigurationResponse*>(
               &_UpdateConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UpdateConfigurationResponse& a, UpdateConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateConfigurationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateConfigurationResponse* New() const final {
    return CreateMaybeMessage<UpdateConfigurationResponse>(nullptr);
  }

  UpdateConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateConfigurationResponse& from);
  void MergeFrom(const UpdateConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.UpdateConfigurationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Admin_2eproto);
    return ::descriptor_table_Admin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.UpdateConfigurationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Admin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRegionInfoRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool GetRegionInfoRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionSpecifier& GetRegionInfoRequest::region() const {
  const ::hbase::pb::RegionSpecifier* p = region_;
  // @@protoc_insertion_point(field_get:hbase.pb.GetRegionInfoRequest.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionSpecifier*>(
      &::hbase::pb::_RegionSpecifier_default_instance_);
}
inline ::hbase::pb::RegionSpecifier* GetRegionInfoRequest::release_region() {
  // @@protoc_insertion_point(field_release:hbase.pb.GetRegionInfoRequest.region)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionSpecifier* GetRegionInfoRequest::mutable_region() {
  _has_bits_[0] |= 0x00000001u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionSpecifier>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetRegionInfoRequest.region)
  return region_;
}
inline void GetRegionInfoRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GetRegionInfoRequest.region)
}

// optional bool compaction_state = 2;
inline bool GetRegionInfoRequest::has_compaction_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRegionInfoRequest::clear_compaction_state() {
  compaction_state_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GetRegionInfoRequest::compaction_state() const {
  // @@protoc_insertion_point(field_get:hbase.pb.GetRegionInfoRequest.compaction_state)
  return compaction_state_;
}
inline void GetRegionInfoRequest::set_compaction_state(bool value) {
  _has_bits_[0] |= 0x00000002u;
  compaction_state_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.GetRegionInfoRequest.compaction_state)
}

// -------------------------------------------------------------------

// GetRegionInfoResponse

// required .hbase.pb.RegionInfo region_info = 1;
inline bool GetRegionInfoResponse::has_region_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionInfo& GetRegionInfoResponse::region_info() const {
  const ::hbase::pb::RegionInfo* p = region_info_;
  // @@protoc_insertion_point(field_get:hbase.pb.GetRegionInfoResponse.region_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionInfo*>(
      &::hbase::pb::_RegionInfo_default_instance_);
}
inline ::hbase::pb::RegionInfo* GetRegionInfoResponse::release_region_info() {
  // @@protoc_insertion_point(field_release:hbase.pb.GetRegionInfoResponse.region_info)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionInfo* temp = region_info_;
  region_info_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionInfo* GetRegionInfoResponse::mutable_region_info() {
  _has_bits_[0] |= 0x00000001u;
  if (region_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionInfo>(GetArenaNoVirtual());
    region_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetRegionInfoResponse.region_info)
  return region_info_;
}
inline void GetRegionInfoResponse::set_allocated_region_info(::hbase::pb::RegionInfo* region_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_info_);
  }
  if (region_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  region_info_ = region_info;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GetRegionInfoResponse.region_info)
}

// optional .hbase.pb.GetRegionInfoResponse.CompactionState compaction_state = 2;
inline bool GetRegionInfoResponse::has_compaction_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRegionInfoResponse::clear_compaction_state() {
  compaction_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hbase::pb::GetRegionInfoResponse_CompactionState GetRegionInfoResponse::compaction_state() const {
  // @@protoc_insertion_point(field_get:hbase.pb.GetRegionInfoResponse.compaction_state)
  return static_cast< ::hbase::pb::GetRegionInfoResponse_CompactionState >(compaction_state_);
}
inline void GetRegionInfoResponse::set_compaction_state(::hbase::pb::GetRegionInfoResponse_CompactionState value) {
  assert(::hbase::pb::GetRegionInfoResponse_CompactionState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  compaction_state_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.GetRegionInfoResponse.compaction_state)
}

// -------------------------------------------------------------------

// GetStoreFileRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool GetStoreFileRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionSpecifier& GetStoreFileRequest::region() const {
  const ::hbase::pb::RegionSpecifier* p = region_;
  // @@protoc_insertion_point(field_get:hbase.pb.GetStoreFileRequest.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionSpecifier*>(
      &::hbase::pb::_RegionSpecifier_default_instance_);
}
inline ::hbase::pb::RegionSpecifier* GetStoreFileRequest::release_region() {
  // @@protoc_insertion_point(field_release:hbase.pb.GetStoreFileRequest.region)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionSpecifier* GetStoreFileRequest::mutable_region() {
  _has_bits_[0] |= 0x00000001u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionSpecifier>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetStoreFileRequest.region)
  return region_;
}
inline void GetStoreFileRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GetStoreFileRequest.region)
}

// repeated bytes family = 2;
inline int GetStoreFileRequest::family_size() const {
  return family_.size();
}
inline void GetStoreFileRequest::clear_family() {
  family_.Clear();
}
inline const std::string& GetStoreFileRequest::family(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.GetStoreFileRequest.family)
  return family_.Get(index);
}
inline std::string* GetStoreFileRequest::mutable_family(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetStoreFileRequest.family)
  return family_.Mutable(index);
}
inline void GetStoreFileRequest::set_family(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.GetStoreFileRequest.family)
  family_.Mutable(index)->assign(value);
}
inline void GetStoreFileRequest::set_family(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.GetStoreFileRequest.family)
  family_.Mutable(index)->assign(std::move(value));
}
inline void GetStoreFileRequest::set_family(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  family_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hbase.pb.GetStoreFileRequest.family)
}
inline void GetStoreFileRequest::set_family(int index, const void* value, size_t size) {
  family_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.GetStoreFileRequest.family)
}
inline std::string* GetStoreFileRequest::add_family() {
  // @@protoc_insertion_point(field_add_mutable:hbase.pb.GetStoreFileRequest.family)
  return family_.Add();
}
inline void GetStoreFileRequest::add_family(const std::string& value) {
  family_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hbase.pb.GetStoreFileRequest.family)
}
inline void GetStoreFileRequest::add_family(std::string&& value) {
  family_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hbase.pb.GetStoreFileRequest.family)
}
inline void GetStoreFileRequest::add_family(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  family_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hbase.pb.GetStoreFileRequest.family)
}
inline void GetStoreFileRequest::add_family(const void* value, size_t size) {
  family_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hbase.pb.GetStoreFileRequest.family)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetStoreFileRequest::family() const {
  // @@protoc_insertion_point(field_list:hbase.pb.GetStoreFileRequest.family)
  return family_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetStoreFileRequest::mutable_family() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.GetStoreFileRequest.family)
  return &family_;
}

// -------------------------------------------------------------------

// GetStoreFileResponse

// repeated string store_file = 1;
inline int GetStoreFileResponse::store_file_size() const {
  return store_file_.size();
}
inline void GetStoreFileResponse::clear_store_file() {
  store_file_.Clear();
}
inline const std::string& GetStoreFileResponse::store_file(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.GetStoreFileResponse.store_file)
  return store_file_.Get(index);
}
inline std::string* GetStoreFileResponse::mutable_store_file(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetStoreFileResponse.store_file)
  return store_file_.Mutable(index);
}
inline void GetStoreFileResponse::set_store_file(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.GetStoreFileResponse.store_file)
  store_file_.Mutable(index)->assign(value);
}
inline void GetStoreFileResponse::set_store_file(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.GetStoreFileResponse.store_file)
  store_file_.Mutable(index)->assign(std::move(value));
}
inline void GetStoreFileResponse::set_store_file(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  store_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hbase.pb.GetStoreFileResponse.store_file)
}
inline void GetStoreFileResponse::set_store_file(int index, const char* value, size_t size) {
  store_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.GetStoreFileResponse.store_file)
}
inline std::string* GetStoreFileResponse::add_store_file() {
  // @@protoc_insertion_point(field_add_mutable:hbase.pb.GetStoreFileResponse.store_file)
  return store_file_.Add();
}
inline void GetStoreFileResponse::add_store_file(const std::string& value) {
  store_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hbase.pb.GetStoreFileResponse.store_file)
}
inline void GetStoreFileResponse::add_store_file(std::string&& value) {
  store_file_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hbase.pb.GetStoreFileResponse.store_file)
}
inline void GetStoreFileResponse::add_store_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  store_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hbase.pb.GetStoreFileResponse.store_file)
}
inline void GetStoreFileResponse::add_store_file(const char* value, size_t size) {
  store_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hbase.pb.GetStoreFileResponse.store_file)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetStoreFileResponse::store_file() const {
  // @@protoc_insertion_point(field_list:hbase.pb.GetStoreFileResponse.store_file)
  return store_file_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetStoreFileResponse::mutable_store_file() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.GetStoreFileResponse.store_file)
  return &store_file_;
}

// -------------------------------------------------------------------

// GetOnlineRegionRequest

// -------------------------------------------------------------------

// GetOnlineRegionResponse

// repeated .hbase.pb.RegionInfo region_info = 1;
inline int GetOnlineRegionResponse::region_info_size() const {
  return region_info_.size();
}
inline ::hbase::pb::RegionInfo* GetOnlineRegionResponse::mutable_region_info(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetOnlineRegionResponse.region_info)
  return region_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionInfo >*
GetOnlineRegionResponse::mutable_region_info() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.GetOnlineRegionResponse.region_info)
  return &region_info_;
}
inline const ::hbase::pb::RegionInfo& GetOnlineRegionResponse::region_info(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.GetOnlineRegionResponse.region_info)
  return region_info_.Get(index);
}
inline ::hbase::pb::RegionInfo* GetOnlineRegionResponse::add_region_info() {
  // @@protoc_insertion_point(field_add:hbase.pb.GetOnlineRegionResponse.region_info)
  return region_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionInfo >&
GetOnlineRegionResponse::region_info() const {
  // @@protoc_insertion_point(field_list:hbase.pb.GetOnlineRegionResponse.region_info)
  return region_info_;
}

// -------------------------------------------------------------------

// OpenRegionRequest_RegionOpenInfo

// required .hbase.pb.RegionInfo region = 1;
inline bool OpenRegionRequest_RegionOpenInfo::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionInfo& OpenRegionRequest_RegionOpenInfo::region() const {
  const ::hbase::pb::RegionInfo* p = region_;
  // @@protoc_insertion_point(field_get:hbase.pb.OpenRegionRequest.RegionOpenInfo.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionInfo*>(
      &::hbase::pb::_RegionInfo_default_instance_);
}
inline ::hbase::pb::RegionInfo* OpenRegionRequest_RegionOpenInfo::release_region() {
  // @@protoc_insertion_point(field_release:hbase.pb.OpenRegionRequest.RegionOpenInfo.region)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionInfo* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionInfo* OpenRegionRequest_RegionOpenInfo::mutable_region() {
  _has_bits_[0] |= 0x00000001u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionInfo>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.OpenRegionRequest.RegionOpenInfo.region)
  return region_;
}
inline void OpenRegionRequest_RegionOpenInfo::set_allocated_region(::hbase::pb::RegionInfo* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.OpenRegionRequest.RegionOpenInfo.region)
}

// optional uint32 version_of_offline_node = 2;
inline bool OpenRegionRequest_RegionOpenInfo::has_version_of_offline_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenRegionRequest_RegionOpenInfo::clear_version_of_offline_node() {
  version_of_offline_node_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenRegionRequest_RegionOpenInfo::version_of_offline_node() const {
  // @@protoc_insertion_point(field_get:hbase.pb.OpenRegionRequest.RegionOpenInfo.version_of_offline_node)
  return version_of_offline_node_;
}
inline void OpenRegionRequest_RegionOpenInfo::set_version_of_offline_node(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_of_offline_node_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.OpenRegionRequest.RegionOpenInfo.version_of_offline_node)
}

// repeated .hbase.pb.ServerName favored_nodes = 3;
inline int OpenRegionRequest_RegionOpenInfo::favored_nodes_size() const {
  return favored_nodes_.size();
}
inline ::hbase::pb::ServerName* OpenRegionRequest_RegionOpenInfo::mutable_favored_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.OpenRegionRequest.RegionOpenInfo.favored_nodes)
  return favored_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName >*
OpenRegionRequest_RegionOpenInfo::mutable_favored_nodes() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.OpenRegionRequest.RegionOpenInfo.favored_nodes)
  return &favored_nodes_;
}
inline const ::hbase::pb::ServerName& OpenRegionRequest_RegionOpenInfo::favored_nodes(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.OpenRegionRequest.RegionOpenInfo.favored_nodes)
  return favored_nodes_.Get(index);
}
inline ::hbase::pb::ServerName* OpenRegionRequest_RegionOpenInfo::add_favored_nodes() {
  // @@protoc_insertion_point(field_add:hbase.pb.OpenRegionRequest.RegionOpenInfo.favored_nodes)
  return favored_nodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName >&
OpenRegionRequest_RegionOpenInfo::favored_nodes() const {
  // @@protoc_insertion_point(field_list:hbase.pb.OpenRegionRequest.RegionOpenInfo.favored_nodes)
  return favored_nodes_;
}

// -------------------------------------------------------------------

// OpenRegionRequest

// repeated .hbase.pb.OpenRegionRequest.RegionOpenInfo open_info = 1;
inline int OpenRegionRequest::open_info_size() const {
  return open_info_.size();
}
inline void OpenRegionRequest::clear_open_info() {
  open_info_.Clear();
}
inline ::hbase::pb::OpenRegionRequest_RegionOpenInfo* OpenRegionRequest::mutable_open_info(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.OpenRegionRequest.open_info)
  return open_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >*
OpenRegionRequest::mutable_open_info() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.OpenRegionRequest.open_info)
  return &open_info_;
}
inline const ::hbase::pb::OpenRegionRequest_RegionOpenInfo& OpenRegionRequest::open_info(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.OpenRegionRequest.open_info)
  return open_info_.Get(index);
}
inline ::hbase::pb::OpenRegionRequest_RegionOpenInfo* OpenRegionRequest::add_open_info() {
  // @@protoc_insertion_point(field_add:hbase.pb.OpenRegionRequest.open_info)
  return open_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::OpenRegionRequest_RegionOpenInfo >&
OpenRegionRequest::open_info() const {
  // @@protoc_insertion_point(field_list:hbase.pb.OpenRegionRequest.open_info)
  return open_info_;
}

// optional uint64 serverStartCode = 2;
inline bool OpenRegionRequest::has_serverstartcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenRegionRequest::clear_serverstartcode() {
  serverstartcode_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenRegionRequest::serverstartcode() const {
  // @@protoc_insertion_point(field_get:hbase.pb.OpenRegionRequest.serverStartCode)
  return serverstartcode_;
}
inline void OpenRegionRequest::set_serverstartcode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  serverstartcode_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.OpenRegionRequest.serverStartCode)
}

// optional uint64 master_system_time = 5;
inline bool OpenRegionRequest::has_master_system_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenRegionRequest::clear_master_system_time() {
  master_system_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenRegionRequest::master_system_time() const {
  // @@protoc_insertion_point(field_get:hbase.pb.OpenRegionRequest.master_system_time)
  return master_system_time_;
}
inline void OpenRegionRequest::set_master_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  master_system_time_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.OpenRegionRequest.master_system_time)
}

// -------------------------------------------------------------------

// OpenRegionResponse

// repeated .hbase.pb.OpenRegionResponse.RegionOpeningState opening_state = 1;
inline int OpenRegionResponse::opening_state_size() const {
  return opening_state_.size();
}
inline void OpenRegionResponse::clear_opening_state() {
  opening_state_.Clear();
}
inline ::hbase::pb::OpenRegionResponse_RegionOpeningState OpenRegionResponse::opening_state(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.OpenRegionResponse.opening_state)
  return static_cast< ::hbase::pb::OpenRegionResponse_RegionOpeningState >(opening_state_.Get(index));
}
inline void OpenRegionResponse::set_opening_state(int index, ::hbase::pb::OpenRegionResponse_RegionOpeningState value) {
  assert(::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid(value));
  opening_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:hbase.pb.OpenRegionResponse.opening_state)
}
inline void OpenRegionResponse::add_opening_state(::hbase::pb::OpenRegionResponse_RegionOpeningState value) {
  assert(::hbase::pb::OpenRegionResponse_RegionOpeningState_IsValid(value));
  opening_state_.Add(value);
  // @@protoc_insertion_point(field_add:hbase.pb.OpenRegionResponse.opening_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
OpenRegionResponse::opening_state() const {
  // @@protoc_insertion_point(field_list:hbase.pb.OpenRegionResponse.opening_state)
  return opening_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
OpenRegionResponse::mutable_opening_state() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.OpenRegionResponse.opening_state)
  return &opening_state_;
}

// -------------------------------------------------------------------

// WarmupRegionRequest

// required .hbase.pb.RegionInfo regionInfo = 1;
inline bool WarmupRegionRequest::has_regioninfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionInfo& WarmupRegionRequest::regioninfo() const {
  const ::hbase::pb::RegionInfo* p = regioninfo_;
  // @@protoc_insertion_point(field_get:hbase.pb.WarmupRegionRequest.regionInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionInfo*>(
      &::hbase::pb::_RegionInfo_default_instance_);
}
inline ::hbase::pb::RegionInfo* WarmupRegionRequest::release_regioninfo() {
  // @@protoc_insertion_point(field_release:hbase.pb.WarmupRegionRequest.regionInfo)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionInfo* temp = regioninfo_;
  regioninfo_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionInfo* WarmupRegionRequest::mutable_regioninfo() {
  _has_bits_[0] |= 0x00000001u;
  if (regioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionInfo>(GetArenaNoVirtual());
    regioninfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.WarmupRegionRequest.regionInfo)
  return regioninfo_;
}
inline void WarmupRegionRequest::set_allocated_regioninfo(::hbase::pb::RegionInfo* regioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(regioninfo_);
  }
  if (regioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regioninfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  regioninfo_ = regioninfo;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.WarmupRegionRequest.regionInfo)
}

// -------------------------------------------------------------------

// WarmupRegionResponse

// -------------------------------------------------------------------

// CloseRegionRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool CloseRegionRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionSpecifier& CloseRegionRequest::region() const {
  const ::hbase::pb::RegionSpecifier* p = region_;
  // @@protoc_insertion_point(field_get:hbase.pb.CloseRegionRequest.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionSpecifier*>(
      &::hbase::pb::_RegionSpecifier_default_instance_);
}
inline ::hbase::pb::RegionSpecifier* CloseRegionRequest::release_region() {
  // @@protoc_insertion_point(field_release:hbase.pb.CloseRegionRequest.region)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionSpecifier* CloseRegionRequest::mutable_region() {
  _has_bits_[0] |= 0x00000001u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionSpecifier>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.CloseRegionRequest.region)
  return region_;
}
inline void CloseRegionRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.CloseRegionRequest.region)
}

// optional uint32 version_of_closing_node = 2;
inline bool CloseRegionRequest::has_version_of_closing_node() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CloseRegionRequest::clear_version_of_closing_node() {
  version_of_closing_node_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CloseRegionRequest::version_of_closing_node() const {
  // @@protoc_insertion_point(field_get:hbase.pb.CloseRegionRequest.version_of_closing_node)
  return version_of_closing_node_;
}
inline void CloseRegionRequest::set_version_of_closing_node(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_of_closing_node_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.CloseRegionRequest.version_of_closing_node)
}

// optional bool transition_in_ZK = 3 [default = true];
inline bool CloseRegionRequest::has_transition_in_zk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CloseRegionRequest::clear_transition_in_zk() {
  transition_in_zk_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CloseRegionRequest::transition_in_zk() const {
  // @@protoc_insertion_point(field_get:hbase.pb.CloseRegionRequest.transition_in_ZK)
  return transition_in_zk_;
}
inline void CloseRegionRequest::set_transition_in_zk(bool value) {
  _has_bits_[0] |= 0x00000010u;
  transition_in_zk_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.CloseRegionRequest.transition_in_ZK)
}

// optional .hbase.pb.ServerName destination_server = 4;
inline bool CloseRegionRequest::has_destination_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::hbase::pb::ServerName& CloseRegionRequest::destination_server() const {
  const ::hbase::pb::ServerName* p = destination_server_;
  // @@protoc_insertion_point(field_get:hbase.pb.CloseRegionRequest.destination_server)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::ServerName*>(
      &::hbase::pb::_ServerName_default_instance_);
}
inline ::hbase::pb::ServerName* CloseRegionRequest::release_destination_server() {
  // @@protoc_insertion_point(field_release:hbase.pb.CloseRegionRequest.destination_server)
  _has_bits_[0] &= ~0x00000002u;
  ::hbase::pb::ServerName* temp = destination_server_;
  destination_server_ = nullptr;
  return temp;
}
inline ::hbase::pb::ServerName* CloseRegionRequest::mutable_destination_server() {
  _has_bits_[0] |= 0x00000002u;
  if (destination_server_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::ServerName>(GetArenaNoVirtual());
    destination_server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.CloseRegionRequest.destination_server)
  return destination_server_;
}
inline void CloseRegionRequest::set_allocated_destination_server(::hbase::pb::ServerName* destination_server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_server_);
  }
  if (destination_server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination_server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_server, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  destination_server_ = destination_server;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.CloseRegionRequest.destination_server)
}

// optional uint64 serverStartCode = 5;
inline bool CloseRegionRequest::has_serverstartcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CloseRegionRequest::clear_serverstartcode() {
  serverstartcode_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CloseRegionRequest::serverstartcode() const {
  // @@protoc_insertion_point(field_get:hbase.pb.CloseRegionRequest.serverStartCode)
  return serverstartcode_;
}
inline void CloseRegionRequest::set_serverstartcode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  serverstartcode_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.CloseRegionRequest.serverStartCode)
}

// -------------------------------------------------------------------

// CloseRegionResponse

// required bool closed = 1;
inline bool CloseRegionResponse::has_closed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseRegionResponse::clear_closed() {
  closed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CloseRegionResponse::closed() const {
  // @@protoc_insertion_point(field_get:hbase.pb.CloseRegionResponse.closed)
  return closed_;
}
inline void CloseRegionResponse::set_closed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  closed_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.CloseRegionResponse.closed)
}

// -------------------------------------------------------------------

// FlushRegionRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool FlushRegionRequest::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionSpecifier& FlushRegionRequest::region() const {
  const ::hbase::pb::RegionSpecifier* p = region_;
  // @@protoc_insertion_point(field_get:hbase.pb.FlushRegionRequest.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionSpecifier*>(
      &::hbase::pb::_RegionSpecifier_default_instance_);
}
inline ::hbase::pb::RegionSpecifier* FlushRegionRequest::release_region() {
  // @@protoc_insertion_point(field_release:hbase.pb.FlushRegionRequest.region)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionSpecifier* FlushRegionRequest::mutable_region() {
  _has_bits_[0] |= 0x00000001u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionSpecifier>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.FlushRegionRequest.region)
  return region_;
}
inline void FlushRegionRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.FlushRegionRequest.region)
}

// optional uint64 if_older_than_ts = 2;
inline bool FlushRegionRequest::has_if_older_than_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushRegionRequest::clear_if_older_than_ts() {
  if_older_than_ts_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlushRegionRequest::if_older_than_ts() const {
  // @@protoc_insertion_point(field_get:hbase.pb.FlushRegionRequest.if_older_than_ts)
  return if_older_than_ts_;
}
inline void FlushRegionRequest::set_if_older_than_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  if_older_than_ts_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.FlushRegionRequest.if_older_than_ts)
}

// optional bool write_flush_wal_marker = 3;
inline bool FlushRegionRequest::has_write_flush_wal_marker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlushRegionRequest::clear_write_flush_wal_marker() {
  write_flush_wal_marker_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FlushRegionRequest::write_flush_wal_marker() const {
  // @@protoc_insertion_point(field_get:hbase.pb.FlushRegionRequest.write_flush_wal_marker)
  return write_flush_wal_marker_;
}
inline void FlushRegionRequest::set_write_flush_wal_marker(bool value) {
  _has_bits_[0] |= 0x00000004u;
  write_flush_wal_marker_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.FlushRegionRequest.write_flush_wal_marker)
}

// -------------------------------------------------------------------

// FlushRegionResponse

// required uint64 last_flush_time = 1;
inline bool FlushRegionResponse::has_last_flush_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushRegionResponse::clear_last_flush_time() {
  last_flush_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlushRegionResponse::last_flush_time() const {
  // @@protoc_insertion_point(field_get:hbase.pb.FlushRegionResponse.last_flush_time)
  return last_flush_time_;
}
inline void FlushRegionResponse::set_last_flush_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  last_flush_time_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.FlushRegionResponse.last_flush_time)
}

// optional bool flushed = 2;
inline bool FlushRegionResponse::has_flushed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushRegionResponse::clear_flushed() {
  flushed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FlushRegionResponse::flushed() const {
  // @@protoc_insertion_point(field_get:hbase.pb.FlushRegionResponse.flushed)
  return flushed_;
}
inline void FlushRegionResponse::set_flushed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  flushed_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.FlushRegionResponse.flushed)
}

// optional bool wrote_flush_wal_marker = 3;
inline bool FlushRegionResponse::has_wrote_flush_wal_marker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlushRegionResponse::clear_wrote_flush_wal_marker() {
  wrote_flush_wal_marker_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FlushRegionResponse::wrote_flush_wal_marker() const {
  // @@protoc_insertion_point(field_get:hbase.pb.FlushRegionResponse.wrote_flush_wal_marker)
  return wrote_flush_wal_marker_;
}
inline void FlushRegionResponse::set_wrote_flush_wal_marker(bool value) {
  _has_bits_[0] |= 0x00000004u;
  wrote_flush_wal_marker_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.FlushRegionResponse.wrote_flush_wal_marker)
}

// -------------------------------------------------------------------

// SplitRegionRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool SplitRegionRequest::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::hbase::pb::RegionSpecifier& SplitRegionRequest::region() const {
  const ::hbase::pb::RegionSpecifier* p = region_;
  // @@protoc_insertion_point(field_get:hbase.pb.SplitRegionRequest.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionSpecifier*>(
      &::hbase::pb::_RegionSpecifier_default_instance_);
}
inline ::hbase::pb::RegionSpecifier* SplitRegionRequest::release_region() {
  // @@protoc_insertion_point(field_release:hbase.pb.SplitRegionRequest.region)
  _has_bits_[0] &= ~0x00000002u;
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionSpecifier* SplitRegionRequest::mutable_region() {
  _has_bits_[0] |= 0x00000002u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionSpecifier>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.SplitRegionRequest.region)
  return region_;
}
inline void SplitRegionRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SplitRegionRequest.region)
}

// optional bytes split_point = 2;
inline bool SplitRegionRequest::has_split_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitRegionRequest::clear_split_point() {
  split_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SplitRegionRequest::split_point() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SplitRegionRequest.split_point)
  return split_point_.GetNoArena();
}
inline void SplitRegionRequest::set_split_point(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  split_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.SplitRegionRequest.split_point)
}
inline void SplitRegionRequest::set_split_point(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  split_point_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.SplitRegionRequest.split_point)
}
inline void SplitRegionRequest::set_split_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  split_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.SplitRegionRequest.split_point)
}
inline void SplitRegionRequest::set_split_point(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  split_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.SplitRegionRequest.split_point)
}
inline std::string* SplitRegionRequest::mutable_split_point() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.SplitRegionRequest.split_point)
  return split_point_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SplitRegionRequest::release_split_point() {
  // @@protoc_insertion_point(field_release:hbase.pb.SplitRegionRequest.split_point)
  if (!has_split_point()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return split_point_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SplitRegionRequest::set_allocated_split_point(std::string* split_point) {
  if (split_point != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  split_point_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), split_point);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SplitRegionRequest.split_point)
}

// -------------------------------------------------------------------

// SplitRegionResponse

// -------------------------------------------------------------------

// CompactRegionRequest

// required .hbase.pb.RegionSpecifier region = 1;
inline bool CompactRegionRequest::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::hbase::pb::RegionSpecifier& CompactRegionRequest::region() const {
  const ::hbase::pb::RegionSpecifier* p = region_;
  // @@protoc_insertion_point(field_get:hbase.pb.CompactRegionRequest.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionSpecifier*>(
      &::hbase::pb::_RegionSpecifier_default_instance_);
}
inline ::hbase::pb::RegionSpecifier* CompactRegionRequest::release_region() {
  // @@protoc_insertion_point(field_release:hbase.pb.CompactRegionRequest.region)
  _has_bits_[0] &= ~0x00000002u;
  ::hbase::pb::RegionSpecifier* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionSpecifier* CompactRegionRequest::mutable_region() {
  _has_bits_[0] |= 0x00000002u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionSpecifier>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.CompactRegionRequest.region)
  return region_;
}
inline void CompactRegionRequest::set_allocated_region(::hbase::pb::RegionSpecifier* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.CompactRegionRequest.region)
}

// optional bool major = 2;
inline bool CompactRegionRequest::has_major() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompactRegionRequest::clear_major() {
  major_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CompactRegionRequest::major() const {
  // @@protoc_insertion_point(field_get:hbase.pb.CompactRegionRequest.major)
  return major_;
}
inline void CompactRegionRequest::set_major(bool value) {
  _has_bits_[0] |= 0x00000004u;
  major_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.CompactRegionRequest.major)
}

// optional bytes family = 3;
inline bool CompactRegionRequest::has_family() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompactRegionRequest::clear_family() {
  family_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CompactRegionRequest::family() const {
  // @@protoc_insertion_point(field_get:hbase.pb.CompactRegionRequest.family)
  return family_.GetNoArena();
}
inline void CompactRegionRequest::set_family(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.CompactRegionRequest.family)
}
inline void CompactRegionRequest::set_family(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  family_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.CompactRegionRequest.family)
}
inline void CompactRegionRequest::set_family(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.CompactRegionRequest.family)
}
inline void CompactRegionRequest::set_family(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.CompactRegionRequest.family)
}
inline std::string* CompactRegionRequest::mutable_family() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.CompactRegionRequest.family)
  return family_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompactRegionRequest::release_family() {
  // @@protoc_insertion_point(field_release:hbase.pb.CompactRegionRequest.family)
  if (!has_family()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return family_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompactRegionRequest::set_allocated_family(std::string* family) {
  if (family != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  family_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.CompactRegionRequest.family)
}

// -------------------------------------------------------------------

// CompactRegionResponse

// -------------------------------------------------------------------

// UpdateFavoredNodesRequest_RegionUpdateInfo

// required .hbase.pb.RegionInfo region = 1;
inline bool UpdateFavoredNodesRequest_RegionUpdateInfo::has_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionInfo& UpdateFavoredNodesRequest_RegionUpdateInfo::region() const {
  const ::hbase::pb::RegionInfo* p = region_;
  // @@protoc_insertion_point(field_get:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionInfo*>(
      &::hbase::pb::_RegionInfo_default_instance_);
}
inline ::hbase::pb::RegionInfo* UpdateFavoredNodesRequest_RegionUpdateInfo::release_region() {
  // @@protoc_insertion_point(field_release:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo.region)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionInfo* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionInfo* UpdateFavoredNodesRequest_RegionUpdateInfo::mutable_region() {
  _has_bits_[0] |= 0x00000001u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionInfo>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo.region)
  return region_;
}
inline void UpdateFavoredNodesRequest_RegionUpdateInfo::set_allocated_region(::hbase::pb::RegionInfo* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo.region)
}

// repeated .hbase.pb.ServerName favored_nodes = 2;
inline int UpdateFavoredNodesRequest_RegionUpdateInfo::favored_nodes_size() const {
  return favored_nodes_.size();
}
inline ::hbase::pb::ServerName* UpdateFavoredNodesRequest_RegionUpdateInfo::mutable_favored_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo.favored_nodes)
  return favored_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName >*
UpdateFavoredNodesRequest_RegionUpdateInfo::mutable_favored_nodes() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo.favored_nodes)
  return &favored_nodes_;
}
inline const ::hbase::pb::ServerName& UpdateFavoredNodesRequest_RegionUpdateInfo::favored_nodes(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo.favored_nodes)
  return favored_nodes_.Get(index);
}
inline ::hbase::pb::ServerName* UpdateFavoredNodesRequest_RegionUpdateInfo::add_favored_nodes() {
  // @@protoc_insertion_point(field_add:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo.favored_nodes)
  return favored_nodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::ServerName >&
UpdateFavoredNodesRequest_RegionUpdateInfo::favored_nodes() const {
  // @@protoc_insertion_point(field_list:hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo.favored_nodes)
  return favored_nodes_;
}

// -------------------------------------------------------------------

// UpdateFavoredNodesRequest

// repeated .hbase.pb.UpdateFavoredNodesRequest.RegionUpdateInfo update_info = 1;
inline int UpdateFavoredNodesRequest::update_info_size() const {
  return update_info_.size();
}
inline void UpdateFavoredNodesRequest::clear_update_info() {
  update_info_.Clear();
}
inline ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* UpdateFavoredNodesRequest::mutable_update_info(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.UpdateFavoredNodesRequest.update_info)
  return update_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >*
UpdateFavoredNodesRequest::mutable_update_info() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.UpdateFavoredNodesRequest.update_info)
  return &update_info_;
}
inline const ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo& UpdateFavoredNodesRequest::update_info(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.UpdateFavoredNodesRequest.update_info)
  return update_info_.Get(index);
}
inline ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo* UpdateFavoredNodesRequest::add_update_info() {
  // @@protoc_insertion_point(field_add:hbase.pb.UpdateFavoredNodesRequest.update_info)
  return update_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UpdateFavoredNodesRequest_RegionUpdateInfo >&
UpdateFavoredNodesRequest::update_info() const {
  // @@protoc_insertion_point(field_list:hbase.pb.UpdateFavoredNodesRequest.update_info)
  return update_info_;
}

// -------------------------------------------------------------------

// UpdateFavoredNodesResponse

// optional uint32 response = 1;
inline bool UpdateFavoredNodesResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFavoredNodesResponse::clear_response() {
  response_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateFavoredNodesResponse::response() const {
  // @@protoc_insertion_point(field_get:hbase.pb.UpdateFavoredNodesResponse.response)
  return response_;
}
inline void UpdateFavoredNodesResponse::set_response(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  response_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.UpdateFavoredNodesResponse.response)
}

// -------------------------------------------------------------------

// MergeRegionsRequest

// required .hbase.pb.RegionSpecifier region_a = 1;
inline bool MergeRegionsRequest::has_region_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionSpecifier& MergeRegionsRequest::region_a() const {
  const ::hbase::pb::RegionSpecifier* p = region_a_;
  // @@protoc_insertion_point(field_get:hbase.pb.MergeRegionsRequest.region_a)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionSpecifier*>(
      &::hbase::pb::_RegionSpecifier_default_instance_);
}
inline ::hbase::pb::RegionSpecifier* MergeRegionsRequest::release_region_a() {
  // @@protoc_insertion_point(field_release:hbase.pb.MergeRegionsRequest.region_a)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionSpecifier* temp = region_a_;
  region_a_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionSpecifier* MergeRegionsRequest::mutable_region_a() {
  _has_bits_[0] |= 0x00000001u;
  if (region_a_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionSpecifier>(GetArenaNoVirtual());
    region_a_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.MergeRegionsRequest.region_a)
  return region_a_;
}
inline void MergeRegionsRequest::set_allocated_region_a(::hbase::pb::RegionSpecifier* region_a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_a_);
  }
  if (region_a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region_a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  region_a_ = region_a;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.MergeRegionsRequest.region_a)
}

// required .hbase.pb.RegionSpecifier region_b = 2;
inline bool MergeRegionsRequest::has_region_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::hbase::pb::RegionSpecifier& MergeRegionsRequest::region_b() const {
  const ::hbase::pb::RegionSpecifier* p = region_b_;
  // @@protoc_insertion_point(field_get:hbase.pb.MergeRegionsRequest.region_b)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionSpecifier*>(
      &::hbase::pb::_RegionSpecifier_default_instance_);
}
inline ::hbase::pb::RegionSpecifier* MergeRegionsRequest::release_region_b() {
  // @@protoc_insertion_point(field_release:hbase.pb.MergeRegionsRequest.region_b)
  _has_bits_[0] &= ~0x00000002u;
  ::hbase::pb::RegionSpecifier* temp = region_b_;
  region_b_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionSpecifier* MergeRegionsRequest::mutable_region_b() {
  _has_bits_[0] |= 0x00000002u;
  if (region_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionSpecifier>(GetArenaNoVirtual());
    region_b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.MergeRegionsRequest.region_b)
  return region_b_;
}
inline void MergeRegionsRequest::set_allocated_region_b(::hbase::pb::RegionSpecifier* region_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_b_);
  }
  if (region_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  region_b_ = region_b;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.MergeRegionsRequest.region_b)
}

// optional bool forcible = 3 [default = false];
inline bool MergeRegionsRequest::has_forcible() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MergeRegionsRequest::clear_forcible() {
  forcible_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MergeRegionsRequest::forcible() const {
  // @@protoc_insertion_point(field_get:hbase.pb.MergeRegionsRequest.forcible)
  return forcible_;
}
inline void MergeRegionsRequest::set_forcible(bool value) {
  _has_bits_[0] |= 0x00000008u;
  forcible_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.MergeRegionsRequest.forcible)
}

// optional uint64 master_system_time = 4;
inline bool MergeRegionsRequest::has_master_system_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MergeRegionsRequest::clear_master_system_time() {
  master_system_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRegionsRequest::master_system_time() const {
  // @@protoc_insertion_point(field_get:hbase.pb.MergeRegionsRequest.master_system_time)
  return master_system_time_;
}
inline void MergeRegionsRequest::set_master_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  master_system_time_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.MergeRegionsRequest.master_system_time)
}

// -------------------------------------------------------------------

// MergeRegionsResponse

// -------------------------------------------------------------------

// WALEntry

// required .hbase.pb.WALKey key = 1;
inline bool WALEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::WALKey& WALEntry::key() const {
  const ::hbase::pb::WALKey* p = key_;
  // @@protoc_insertion_point(field_get:hbase.pb.WALEntry.key)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::WALKey*>(
      &::hbase::pb::_WALKey_default_instance_);
}
inline ::hbase::pb::WALKey* WALEntry::release_key() {
  // @@protoc_insertion_point(field_release:hbase.pb.WALEntry.key)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::WALKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::hbase::pb::WALKey* WALEntry::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::WALKey>(GetArenaNoVirtual());
    key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.WALEntry.key)
  return key_;
}
inline void WALEntry::set_allocated_key(::hbase::pb::WALKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.WALEntry.key)
}

// repeated bytes key_value_bytes = 2;
inline int WALEntry::key_value_bytes_size() const {
  return key_value_bytes_.size();
}
inline void WALEntry::clear_key_value_bytes() {
  key_value_bytes_.Clear();
}
inline const std::string& WALEntry::key_value_bytes(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.WALEntry.key_value_bytes)
  return key_value_bytes_.Get(index);
}
inline std::string* WALEntry::mutable_key_value_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.WALEntry.key_value_bytes)
  return key_value_bytes_.Mutable(index);
}
inline void WALEntry::set_key_value_bytes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.WALEntry.key_value_bytes)
  key_value_bytes_.Mutable(index)->assign(value);
}
inline void WALEntry::set_key_value_bytes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.WALEntry.key_value_bytes)
  key_value_bytes_.Mutable(index)->assign(std::move(value));
}
inline void WALEntry::set_key_value_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_value_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hbase.pb.WALEntry.key_value_bytes)
}
inline void WALEntry::set_key_value_bytes(int index, const void* value, size_t size) {
  key_value_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.WALEntry.key_value_bytes)
}
inline std::string* WALEntry::add_key_value_bytes() {
  // @@protoc_insertion_point(field_add_mutable:hbase.pb.WALEntry.key_value_bytes)
  return key_value_bytes_.Add();
}
inline void WALEntry::add_key_value_bytes(const std::string& value) {
  key_value_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hbase.pb.WALEntry.key_value_bytes)
}
inline void WALEntry::add_key_value_bytes(std::string&& value) {
  key_value_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hbase.pb.WALEntry.key_value_bytes)
}
inline void WALEntry::add_key_value_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_value_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hbase.pb.WALEntry.key_value_bytes)
}
inline void WALEntry::add_key_value_bytes(const void* value, size_t size) {
  key_value_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hbase.pb.WALEntry.key_value_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WALEntry::key_value_bytes() const {
  // @@protoc_insertion_point(field_list:hbase.pb.WALEntry.key_value_bytes)
  return key_value_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WALEntry::mutable_key_value_bytes() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.WALEntry.key_value_bytes)
  return &key_value_bytes_;
}

// optional int32 associated_cell_count = 3;
inline bool WALEntry::has_associated_cell_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WALEntry::clear_associated_cell_count() {
  associated_cell_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WALEntry::associated_cell_count() const {
  // @@protoc_insertion_point(field_get:hbase.pb.WALEntry.associated_cell_count)
  return associated_cell_count_;
}
inline void WALEntry::set_associated_cell_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  associated_cell_count_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.WALEntry.associated_cell_count)
}

// -------------------------------------------------------------------

// ReplicateWALEntryRequest

// repeated .hbase.pb.WALEntry entry = 1;
inline int ReplicateWALEntryRequest::entry_size() const {
  return entry_.size();
}
inline void ReplicateWALEntryRequest::clear_entry() {
  entry_.Clear();
}
inline ::hbase::pb::WALEntry* ReplicateWALEntryRequest::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.ReplicateWALEntryRequest.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::WALEntry >*
ReplicateWALEntryRequest::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.ReplicateWALEntryRequest.entry)
  return &entry_;
}
inline const ::hbase::pb::WALEntry& ReplicateWALEntryRequest::entry(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.ReplicateWALEntryRequest.entry)
  return entry_.Get(index);
}
inline ::hbase::pb::WALEntry* ReplicateWALEntryRequest::add_entry() {
  // @@protoc_insertion_point(field_add:hbase.pb.ReplicateWALEntryRequest.entry)
  return entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::WALEntry >&
ReplicateWALEntryRequest::entry() const {
  // @@protoc_insertion_point(field_list:hbase.pb.ReplicateWALEntryRequest.entry)
  return entry_;
}

// optional string replicationClusterId = 2;
inline bool ReplicateWALEntryRequest::has_replicationclusterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicateWALEntryRequest::clear_replicationclusterid() {
  replicationclusterid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReplicateWALEntryRequest::replicationclusterid() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ReplicateWALEntryRequest.replicationClusterId)
  return replicationclusterid_.GetNoArena();
}
inline void ReplicateWALEntryRequest::set_replicationclusterid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  replicationclusterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ReplicateWALEntryRequest.replicationClusterId)
}
inline void ReplicateWALEntryRequest::set_replicationclusterid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  replicationclusterid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ReplicateWALEntryRequest.replicationClusterId)
}
inline void ReplicateWALEntryRequest::set_replicationclusterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  replicationclusterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ReplicateWALEntryRequest.replicationClusterId)
}
inline void ReplicateWALEntryRequest::set_replicationclusterid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  replicationclusterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ReplicateWALEntryRequest.replicationClusterId)
}
inline std::string* ReplicateWALEntryRequest::mutable_replicationclusterid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ReplicateWALEntryRequest.replicationClusterId)
  return replicationclusterid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReplicateWALEntryRequest::release_replicationclusterid() {
  // @@protoc_insertion_point(field_release:hbase.pb.ReplicateWALEntryRequest.replicationClusterId)
  if (!has_replicationclusterid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return replicationclusterid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReplicateWALEntryRequest::set_allocated_replicationclusterid(std::string* replicationclusterid) {
  if (replicationclusterid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  replicationclusterid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replicationclusterid);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ReplicateWALEntryRequest.replicationClusterId)
}

// optional string sourceBaseNamespaceDirPath = 3;
inline bool ReplicateWALEntryRequest::has_sourcebasenamespacedirpath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicateWALEntryRequest::clear_sourcebasenamespacedirpath() {
  sourcebasenamespacedirpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReplicateWALEntryRequest::sourcebasenamespacedirpath() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath)
  return sourcebasenamespacedirpath_.GetNoArena();
}
inline void ReplicateWALEntryRequest::set_sourcebasenamespacedirpath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sourcebasenamespacedirpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath)
}
inline void ReplicateWALEntryRequest::set_sourcebasenamespacedirpath(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sourcebasenamespacedirpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath)
}
inline void ReplicateWALEntryRequest::set_sourcebasenamespacedirpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sourcebasenamespacedirpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath)
}
inline void ReplicateWALEntryRequest::set_sourcebasenamespacedirpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sourcebasenamespacedirpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath)
}
inline std::string* ReplicateWALEntryRequest::mutable_sourcebasenamespacedirpath() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath)
  return sourcebasenamespacedirpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReplicateWALEntryRequest::release_sourcebasenamespacedirpath() {
  // @@protoc_insertion_point(field_release:hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath)
  if (!has_sourcebasenamespacedirpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sourcebasenamespacedirpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReplicateWALEntryRequest::set_allocated_sourcebasenamespacedirpath(std::string* sourcebasenamespacedirpath) {
  if (sourcebasenamespacedirpath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sourcebasenamespacedirpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcebasenamespacedirpath);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ReplicateWALEntryRequest.sourceBaseNamespaceDirPath)
}

// optional string sourceHFileArchiveDirPath = 4;
inline bool ReplicateWALEntryRequest::has_sourcehfilearchivedirpath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplicateWALEntryRequest::clear_sourcehfilearchivedirpath() {
  sourcehfilearchivedirpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ReplicateWALEntryRequest::sourcehfilearchivedirpath() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath)
  return sourcehfilearchivedirpath_.GetNoArena();
}
inline void ReplicateWALEntryRequest::set_sourcehfilearchivedirpath(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sourcehfilearchivedirpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath)
}
inline void ReplicateWALEntryRequest::set_sourcehfilearchivedirpath(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sourcehfilearchivedirpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath)
}
inline void ReplicateWALEntryRequest::set_sourcehfilearchivedirpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sourcehfilearchivedirpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath)
}
inline void ReplicateWALEntryRequest::set_sourcehfilearchivedirpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sourcehfilearchivedirpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath)
}
inline std::string* ReplicateWALEntryRequest::mutable_sourcehfilearchivedirpath() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath)
  return sourcehfilearchivedirpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReplicateWALEntryRequest::release_sourcehfilearchivedirpath() {
  // @@protoc_insertion_point(field_release:hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath)
  if (!has_sourcehfilearchivedirpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sourcehfilearchivedirpath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReplicateWALEntryRequest::set_allocated_sourcehfilearchivedirpath(std::string* sourcehfilearchivedirpath) {
  if (sourcehfilearchivedirpath != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sourcehfilearchivedirpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcehfilearchivedirpath);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ReplicateWALEntryRequest.sourceHFileArchiveDirPath)
}

// -------------------------------------------------------------------

// ReplicateWALEntryResponse

// -------------------------------------------------------------------

// RollWALWriterRequest

// -------------------------------------------------------------------

// RollWALWriterResponse

// repeated bytes region_to_flush = 1;
inline int RollWALWriterResponse::region_to_flush_size() const {
  return region_to_flush_.size();
}
inline void RollWALWriterResponse::clear_region_to_flush() {
  region_to_flush_.Clear();
}
inline const std::string& RollWALWriterResponse::region_to_flush(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.RollWALWriterResponse.region_to_flush)
  return region_to_flush_.Get(index);
}
inline std::string* RollWALWriterResponse::mutable_region_to_flush(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.RollWALWriterResponse.region_to_flush)
  return region_to_flush_.Mutable(index);
}
inline void RollWALWriterResponse::set_region_to_flush(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.RollWALWriterResponse.region_to_flush)
  region_to_flush_.Mutable(index)->assign(value);
}
inline void RollWALWriterResponse::set_region_to_flush(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.RollWALWriterResponse.region_to_flush)
  region_to_flush_.Mutable(index)->assign(std::move(value));
}
inline void RollWALWriterResponse::set_region_to_flush(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  region_to_flush_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hbase.pb.RollWALWriterResponse.region_to_flush)
}
inline void RollWALWriterResponse::set_region_to_flush(int index, const void* value, size_t size) {
  region_to_flush_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.RollWALWriterResponse.region_to_flush)
}
inline std::string* RollWALWriterResponse::add_region_to_flush() {
  // @@protoc_insertion_point(field_add_mutable:hbase.pb.RollWALWriterResponse.region_to_flush)
  return region_to_flush_.Add();
}
inline void RollWALWriterResponse::add_region_to_flush(const std::string& value) {
  region_to_flush_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hbase.pb.RollWALWriterResponse.region_to_flush)
}
inline void RollWALWriterResponse::add_region_to_flush(std::string&& value) {
  region_to_flush_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hbase.pb.RollWALWriterResponse.region_to_flush)
}
inline void RollWALWriterResponse::add_region_to_flush(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  region_to_flush_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hbase.pb.RollWALWriterResponse.region_to_flush)
}
inline void RollWALWriterResponse::add_region_to_flush(const void* value, size_t size) {
  region_to_flush_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hbase.pb.RollWALWriterResponse.region_to_flush)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RollWALWriterResponse::region_to_flush() const {
  // @@protoc_insertion_point(field_list:hbase.pb.RollWALWriterResponse.region_to_flush)
  return region_to_flush_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RollWALWriterResponse::mutable_region_to_flush() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.RollWALWriterResponse.region_to_flush)
  return &region_to_flush_;
}

// -------------------------------------------------------------------

// StopServerRequest

// required string reason = 1;
inline bool StopServerRequest::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopServerRequest::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StopServerRequest::reason() const {
  // @@protoc_insertion_point(field_get:hbase.pb.StopServerRequest.reason)
  return reason_.GetNoArena();
}
inline void StopServerRequest::set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.StopServerRequest.reason)
}
inline void StopServerRequest::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.StopServerRequest.reason)
}
inline void StopServerRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.StopServerRequest.reason)
}
inline void StopServerRequest::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.StopServerRequest.reason)
}
inline std::string* StopServerRequest::mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.StopServerRequest.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StopServerRequest::release_reason() {
  // @@protoc_insertion_point(field_release:hbase.pb.StopServerRequest.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StopServerRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.StopServerRequest.reason)
}

// -------------------------------------------------------------------

// StopServerResponse

// -------------------------------------------------------------------

// GetServerInfoRequest

// -------------------------------------------------------------------

// ServerInfo

// required .hbase.pb.ServerName server_name = 1;
inline bool ServerInfo::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::ServerName& ServerInfo::server_name() const {
  const ::hbase::pb::ServerName* p = server_name_;
  // @@protoc_insertion_point(field_get:hbase.pb.ServerInfo.server_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::ServerName*>(
      &::hbase::pb::_ServerName_default_instance_);
}
inline ::hbase::pb::ServerName* ServerInfo::release_server_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.ServerInfo.server_name)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::ServerName* temp = server_name_;
  server_name_ = nullptr;
  return temp;
}
inline ::hbase::pb::ServerName* ServerInfo::mutable_server_name() {
  _has_bits_[0] |= 0x00000001u;
  if (server_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::ServerName>(GetArenaNoVirtual());
    server_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.ServerInfo.server_name)
  return server_name_;
}
inline void ServerInfo::set_allocated_server_name(::hbase::pb::ServerName* server_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_name_);
  }
  if (server_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_name_ = server_name;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ServerInfo.server_name)
}

// optional uint32 webui_port = 2;
inline bool ServerInfo::has_webui_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::clear_webui_port() {
  webui_port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerInfo::webui_port() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ServerInfo.webui_port)
  return webui_port_;
}
inline void ServerInfo::set_webui_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  webui_port_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.ServerInfo.webui_port)
}

// -------------------------------------------------------------------

// GetServerInfoResponse

// required .hbase.pb.ServerInfo server_info = 1;
inline bool GetServerInfoResponse::has_server_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServerInfoResponse::clear_server_info() {
  if (server_info_ != nullptr) server_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hbase::pb::ServerInfo& GetServerInfoResponse::server_info() const {
  const ::hbase::pb::ServerInfo* p = server_info_;
  // @@protoc_insertion_point(field_get:hbase.pb.GetServerInfoResponse.server_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::ServerInfo*>(
      &::hbase::pb::_ServerInfo_default_instance_);
}
inline ::hbase::pb::ServerInfo* GetServerInfoResponse::release_server_info() {
  // @@protoc_insertion_point(field_release:hbase.pb.GetServerInfoResponse.server_info)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::ServerInfo* temp = server_info_;
  server_info_ = nullptr;
  return temp;
}
inline ::hbase::pb::ServerInfo* GetServerInfoResponse::mutable_server_info() {
  _has_bits_[0] |= 0x00000001u;
  if (server_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::ServerInfo>(GetArenaNoVirtual());
    server_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetServerInfoResponse.server_info)
  return server_info_;
}
inline void GetServerInfoResponse::set_allocated_server_info(::hbase::pb::ServerInfo* server_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_info_;
  }
  if (server_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_info_ = server_info;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GetServerInfoResponse.server_info)
}

// -------------------------------------------------------------------

// UpdateConfigurationRequest

// -------------------------------------------------------------------

// UpdateConfigurationResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hbase::pb::GetRegionInfoResponse_CompactionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::GetRegionInfoResponse_CompactionState>() {
  return ::hbase::pb::GetRegionInfoResponse_CompactionState_descriptor();
}
template <> struct is_proto_enum< ::hbase::pb::OpenRegionResponse_RegionOpeningState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::OpenRegionResponse_RegionOpeningState>() {
  return ::hbase::pb::OpenRegionResponse_RegionOpeningState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Admin_2eproto
