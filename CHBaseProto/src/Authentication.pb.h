// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Authentication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Authentication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Authentication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Authentication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Authentication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Authentication_2eproto;
namespace hbase {
namespace pb {
class AuthenticationKey;
class AuthenticationKeyDefaultTypeInternal;
extern AuthenticationKeyDefaultTypeInternal _AuthenticationKey_default_instance_;
class GetAuthenticationTokenRequest;
class GetAuthenticationTokenRequestDefaultTypeInternal;
extern GetAuthenticationTokenRequestDefaultTypeInternal _GetAuthenticationTokenRequest_default_instance_;
class GetAuthenticationTokenResponse;
class GetAuthenticationTokenResponseDefaultTypeInternal;
extern GetAuthenticationTokenResponseDefaultTypeInternal _GetAuthenticationTokenResponse_default_instance_;
class Token;
class TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
class TokenIdentifier;
class TokenIdentifierDefaultTypeInternal;
extern TokenIdentifierDefaultTypeInternal _TokenIdentifier_default_instance_;
class WhoAmIRequest;
class WhoAmIRequestDefaultTypeInternal;
extern WhoAmIRequestDefaultTypeInternal _WhoAmIRequest_default_instance_;
class WhoAmIResponse;
class WhoAmIResponseDefaultTypeInternal;
extern WhoAmIResponseDefaultTypeInternal _WhoAmIResponse_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::AuthenticationKey* Arena::CreateMaybeMessage<::hbase::pb::AuthenticationKey>(Arena*);
template<> ::hbase::pb::GetAuthenticationTokenRequest* Arena::CreateMaybeMessage<::hbase::pb::GetAuthenticationTokenRequest>(Arena*);
template<> ::hbase::pb::GetAuthenticationTokenResponse* Arena::CreateMaybeMessage<::hbase::pb::GetAuthenticationTokenResponse>(Arena*);
template<> ::hbase::pb::Token* Arena::CreateMaybeMessage<::hbase::pb::Token>(Arena*);
template<> ::hbase::pb::TokenIdentifier* Arena::CreateMaybeMessage<::hbase::pb::TokenIdentifier>(Arena*);
template<> ::hbase::pb::WhoAmIRequest* Arena::CreateMaybeMessage<::hbase::pb::WhoAmIRequest>(Arena*);
template<> ::hbase::pb::WhoAmIResponse* Arena::CreateMaybeMessage<::hbase::pb::WhoAmIResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

enum TokenIdentifier_Kind : int {
  TokenIdentifier_Kind_HBASE_AUTH_TOKEN = 0
};
bool TokenIdentifier_Kind_IsValid(int value);
constexpr TokenIdentifier_Kind TokenIdentifier_Kind_Kind_MIN = TokenIdentifier_Kind_HBASE_AUTH_TOKEN;
constexpr TokenIdentifier_Kind TokenIdentifier_Kind_Kind_MAX = TokenIdentifier_Kind_HBASE_AUTH_TOKEN;
constexpr int TokenIdentifier_Kind_Kind_ARRAYSIZE = TokenIdentifier_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TokenIdentifier_Kind_descriptor();
template<typename T>
inline const std::string& TokenIdentifier_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TokenIdentifier_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TokenIdentifier_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TokenIdentifier_Kind_descriptor(), enum_t_value);
}
inline bool TokenIdentifier_Kind_Parse(
    const std::string& name, TokenIdentifier_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TokenIdentifier_Kind>(
    TokenIdentifier_Kind_descriptor(), name, value);
}
// ===================================================================

class AuthenticationKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.AuthenticationKey) */ {
 public:
  AuthenticationKey();
  virtual ~AuthenticationKey();

  AuthenticationKey(const AuthenticationKey& from);
  AuthenticationKey(AuthenticationKey&& from) noexcept
    : AuthenticationKey() {
    *this = ::std::move(from);
  }

  inline AuthenticationKey& operator=(const AuthenticationKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationKey& operator=(AuthenticationKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticationKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticationKey* internal_default_instance() {
    return reinterpret_cast<const AuthenticationKey*>(
               &_AuthenticationKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticationKey& a, AuthenticationKey& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationKey* New() const final {
    return CreateMaybeMessage<AuthenticationKey>(nullptr);
  }

  AuthenticationKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticationKey& from);
  void MergeFrom(const AuthenticationKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.AuthenticationKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authentication_2eproto);
    return ::descriptor_table_Authentication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kExpirationDateFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required bytes key = 3;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // required int64 expiration_date = 2;
  bool has_expiration_date() const;
  void clear_expiration_date();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date() const;
  void set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.AuthenticationKey)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_Authentication_2eproto;
};
// -------------------------------------------------------------------

class TokenIdentifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.TokenIdentifier) */ {
 public:
  TokenIdentifier();
  virtual ~TokenIdentifier();

  TokenIdentifier(const TokenIdentifier& from);
  TokenIdentifier(TokenIdentifier&& from) noexcept
    : TokenIdentifier() {
    *this = ::std::move(from);
  }

  inline TokenIdentifier& operator=(const TokenIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenIdentifier& operator=(TokenIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenIdentifier* internal_default_instance() {
    return reinterpret_cast<const TokenIdentifier*>(
               &_TokenIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TokenIdentifier& a, TokenIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenIdentifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenIdentifier* New() const final {
    return CreateMaybeMessage<TokenIdentifier>(nullptr);
  }

  TokenIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenIdentifier& from);
  void MergeFrom(const TokenIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.TokenIdentifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authentication_2eproto);
    return ::descriptor_table_Authentication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TokenIdentifier_Kind Kind;
  static constexpr Kind HBASE_AUTH_TOKEN =
    TokenIdentifier_Kind_HBASE_AUTH_TOKEN;
  static inline bool Kind_IsValid(int value) {
    return TokenIdentifier_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    TokenIdentifier_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    TokenIdentifier_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    TokenIdentifier_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return TokenIdentifier_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return TokenIdentifier_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(const std::string& name,
      Kind* value) {
    return TokenIdentifier_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kKindFieldNumber = 1,
    kKeyIdFieldNumber = 3,
    kIssueDateFieldNumber = 4,
    kExpirationDateFieldNumber = 5,
    kSequenceNumberFieldNumber = 6,
  };
  // required bytes username = 2;
  bool has_username() const;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // required .hbase.pb.TokenIdentifier.Kind kind = 1;
  bool has_kind() const;
  void clear_kind();
  ::hbase::pb::TokenIdentifier_Kind kind() const;
  void set_kind(::hbase::pb::TokenIdentifier_Kind value);

  // required int32 key_id = 3;
  bool has_key_id() const;
  void clear_key_id();
  ::PROTOBUF_NAMESPACE_ID::int32 key_id() const;
  void set_key_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 issue_date = 4;
  bool has_issue_date() const;
  void clear_issue_date();
  ::PROTOBUF_NAMESPACE_ID::int64 issue_date() const;
  void set_issue_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 expiration_date = 5;
  bool has_expiration_date() const;
  void clear_expiration_date();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date() const;
  void set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 sequence_number = 6;
  bool has_sequence_number() const;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.TokenIdentifier)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int kind_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 issue_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_number_;
  friend struct ::TableStruct_Authentication_2eproto;
};
// -------------------------------------------------------------------

class Token :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.Token) */ {
 public:
  Token();
  virtual ~Token();

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.Token";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authentication_2eproto);
    return ::descriptor_table_Authentication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kServiceFieldNumber = 3,
  };
  // optional bytes identifier = 1;
  bool has_identifier() const;
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const void* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);

  // optional bytes password = 2;
  bool has_password() const;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // optional bytes service = 3;
  bool has_service() const;
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const void* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);

  // @@protoc_insertion_point(class_scope:hbase.pb.Token)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  friend struct ::TableStruct_Authentication_2eproto;
};
// -------------------------------------------------------------------

class GetAuthenticationTokenRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetAuthenticationTokenRequest) */ {
 public:
  GetAuthenticationTokenRequest();
  virtual ~GetAuthenticationTokenRequest();

  GetAuthenticationTokenRequest(const GetAuthenticationTokenRequest& from);
  GetAuthenticationTokenRequest(GetAuthenticationTokenRequest&& from) noexcept
    : GetAuthenticationTokenRequest() {
    *this = ::std::move(from);
  }

  inline GetAuthenticationTokenRequest& operator=(const GetAuthenticationTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthenticationTokenRequest& operator=(GetAuthenticationTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthenticationTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthenticationTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GetAuthenticationTokenRequest*>(
               &_GetAuthenticationTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetAuthenticationTokenRequest& a, GetAuthenticationTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthenticationTokenRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthenticationTokenRequest* New() const final {
    return CreateMaybeMessage<GetAuthenticationTokenRequest>(nullptr);
  }

  GetAuthenticationTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthenticationTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthenticationTokenRequest& from);
  void MergeFrom(const GetAuthenticationTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthenticationTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetAuthenticationTokenRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authentication_2eproto);
    return ::descriptor_table_Authentication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.GetAuthenticationTokenRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authentication_2eproto;
};
// -------------------------------------------------------------------

class GetAuthenticationTokenResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetAuthenticationTokenResponse) */ {
 public:
  GetAuthenticationTokenResponse();
  virtual ~GetAuthenticationTokenResponse();

  GetAuthenticationTokenResponse(const GetAuthenticationTokenResponse& from);
  GetAuthenticationTokenResponse(GetAuthenticationTokenResponse&& from) noexcept
    : GetAuthenticationTokenResponse() {
    *this = ::std::move(from);
  }

  inline GetAuthenticationTokenResponse& operator=(const GetAuthenticationTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthenticationTokenResponse& operator=(GetAuthenticationTokenResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthenticationTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthenticationTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GetAuthenticationTokenResponse*>(
               &_GetAuthenticationTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetAuthenticationTokenResponse& a, GetAuthenticationTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthenticationTokenResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthenticationTokenResponse* New() const final {
    return CreateMaybeMessage<GetAuthenticationTokenResponse>(nullptr);
  }

  GetAuthenticationTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthenticationTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthenticationTokenResponse& from);
  void MergeFrom(const GetAuthenticationTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthenticationTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetAuthenticationTokenResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authentication_2eproto);
    return ::descriptor_table_Authentication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // optional .hbase.pb.Token token = 1;
  bool has_token() const;
  void clear_token();
  const ::hbase::pb::Token& token() const;
  ::hbase::pb::Token* release_token();
  ::hbase::pb::Token* mutable_token();
  void set_allocated_token(::hbase::pb::Token* token);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetAuthenticationTokenResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::Token* token_;
  friend struct ::TableStruct_Authentication_2eproto;
};
// -------------------------------------------------------------------

class WhoAmIRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.WhoAmIRequest) */ {
 public:
  WhoAmIRequest();
  virtual ~WhoAmIRequest();

  WhoAmIRequest(const WhoAmIRequest& from);
  WhoAmIRequest(WhoAmIRequest&& from) noexcept
    : WhoAmIRequest() {
    *this = ::std::move(from);
  }

  inline WhoAmIRequest& operator=(const WhoAmIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhoAmIRequest& operator=(WhoAmIRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhoAmIRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhoAmIRequest* internal_default_instance() {
    return reinterpret_cast<const WhoAmIRequest*>(
               &_WhoAmIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WhoAmIRequest& a, WhoAmIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WhoAmIRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhoAmIRequest* New() const final {
    return CreateMaybeMessage<WhoAmIRequest>(nullptr);
  }

  WhoAmIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhoAmIRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhoAmIRequest& from);
  void MergeFrom(const WhoAmIRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhoAmIRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.WhoAmIRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authentication_2eproto);
    return ::descriptor_table_Authentication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.WhoAmIRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Authentication_2eproto;
};
// -------------------------------------------------------------------

class WhoAmIResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.WhoAmIResponse) */ {
 public:
  WhoAmIResponse();
  virtual ~WhoAmIResponse();

  WhoAmIResponse(const WhoAmIResponse& from);
  WhoAmIResponse(WhoAmIResponse&& from) noexcept
    : WhoAmIResponse() {
    *this = ::std::move(from);
  }

  inline WhoAmIResponse& operator=(const WhoAmIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhoAmIResponse& operator=(WhoAmIResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhoAmIResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhoAmIResponse* internal_default_instance() {
    return reinterpret_cast<const WhoAmIResponse*>(
               &_WhoAmIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WhoAmIResponse& a, WhoAmIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WhoAmIResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhoAmIResponse* New() const final {
    return CreateMaybeMessage<WhoAmIResponse>(nullptr);
  }

  WhoAmIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhoAmIResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhoAmIResponse& from);
  void MergeFrom(const WhoAmIResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhoAmIResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.WhoAmIResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Authentication_2eproto);
    return ::descriptor_table_Authentication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kAuthMethodFieldNumber = 2,
  };
  // optional string username = 1;
  bool has_username() const;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // optional string auth_method = 2;
  bool has_auth_method() const;
  void clear_auth_method();
  const std::string& auth_method() const;
  void set_auth_method(const std::string& value);
  void set_auth_method(std::string&& value);
  void set_auth_method(const char* value);
  void set_auth_method(const char* value, size_t size);
  std::string* mutable_auth_method();
  std::string* release_auth_method();
  void set_allocated_auth_method(std::string* auth_method);

  // @@protoc_insertion_point(class_scope:hbase.pb.WhoAmIResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_method_;
  friend struct ::TableStruct_Authentication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticationKey

// required int32 id = 1;
inline bool AuthenticationKey::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthenticationKey::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticationKey::id() const {
  // @@protoc_insertion_point(field_get:hbase.pb.AuthenticationKey.id)
  return id_;
}
inline void AuthenticationKey::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.AuthenticationKey.id)
}

// required int64 expiration_date = 2;
inline bool AuthenticationKey::has_expiration_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthenticationKey::clear_expiration_date() {
  expiration_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticationKey::expiration_date() const {
  // @@protoc_insertion_point(field_get:hbase.pb.AuthenticationKey.expiration_date)
  return expiration_date_;
}
inline void AuthenticationKey::set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  expiration_date_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.AuthenticationKey.expiration_date)
}

// required bytes key = 3;
inline bool AuthenticationKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthenticationKey::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticationKey::key() const {
  // @@protoc_insertion_point(field_get:hbase.pb.AuthenticationKey.key)
  return key_.GetNoArena();
}
inline void AuthenticationKey::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.AuthenticationKey.key)
}
inline void AuthenticationKey::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.AuthenticationKey.key)
}
inline void AuthenticationKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.AuthenticationKey.key)
}
inline void AuthenticationKey::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.AuthenticationKey.key)
}
inline std::string* AuthenticationKey::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.AuthenticationKey.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticationKey::release_key() {
  // @@protoc_insertion_point(field_release:hbase.pb.AuthenticationKey.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticationKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.AuthenticationKey.key)
}

// -------------------------------------------------------------------

// TokenIdentifier

// required .hbase.pb.TokenIdentifier.Kind kind = 1;
inline bool TokenIdentifier::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TokenIdentifier::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hbase::pb::TokenIdentifier_Kind TokenIdentifier::kind() const {
  // @@protoc_insertion_point(field_get:hbase.pb.TokenIdentifier.kind)
  return static_cast< ::hbase::pb::TokenIdentifier_Kind >(kind_);
}
inline void TokenIdentifier::set_kind(::hbase::pb::TokenIdentifier_Kind value) {
  assert(::hbase::pb::TokenIdentifier_Kind_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  kind_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.TokenIdentifier.kind)
}

// required bytes username = 2;
inline bool TokenIdentifier::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TokenIdentifier::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TokenIdentifier::username() const {
  // @@protoc_insertion_point(field_get:hbase.pb.TokenIdentifier.username)
  return username_.GetNoArena();
}
inline void TokenIdentifier::set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.TokenIdentifier.username)
}
inline void TokenIdentifier::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.TokenIdentifier.username)
}
inline void TokenIdentifier::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.TokenIdentifier.username)
}
inline void TokenIdentifier::set_username(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.TokenIdentifier.username)
}
inline std::string* TokenIdentifier::mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.TokenIdentifier.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenIdentifier::release_username() {
  // @@protoc_insertion_point(field_release:hbase.pb.TokenIdentifier.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenIdentifier::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.TokenIdentifier.username)
}

// required int32 key_id = 3;
inline bool TokenIdentifier::has_key_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TokenIdentifier::clear_key_id() {
  key_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TokenIdentifier::key_id() const {
  // @@protoc_insertion_point(field_get:hbase.pb.TokenIdentifier.key_id)
  return key_id_;
}
inline void TokenIdentifier::set_key_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  key_id_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.TokenIdentifier.key_id)
}

// optional int64 issue_date = 4;
inline bool TokenIdentifier::has_issue_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TokenIdentifier::clear_issue_date() {
  issue_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenIdentifier::issue_date() const {
  // @@protoc_insertion_point(field_get:hbase.pb.TokenIdentifier.issue_date)
  return issue_date_;
}
inline void TokenIdentifier::set_issue_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  issue_date_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.TokenIdentifier.issue_date)
}

// optional int64 expiration_date = 5;
inline bool TokenIdentifier::has_expiration_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TokenIdentifier::clear_expiration_date() {
  expiration_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenIdentifier::expiration_date() const {
  // @@protoc_insertion_point(field_get:hbase.pb.TokenIdentifier.expiration_date)
  return expiration_date_;
}
inline void TokenIdentifier::set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  expiration_date_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.TokenIdentifier.expiration_date)
}

// optional int64 sequence_number = 6;
inline bool TokenIdentifier::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TokenIdentifier::clear_sequence_number() {
  sequence_number_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TokenIdentifier::sequence_number() const {
  // @@protoc_insertion_point(field_get:hbase.pb.TokenIdentifier.sequence_number)
  return sequence_number_;
}
inline void TokenIdentifier::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.TokenIdentifier.sequence_number)
}

// -------------------------------------------------------------------

// Token

// optional bytes identifier = 1;
inline bool Token::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Token::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Token::identifier() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Token.identifier)
  return identifier_.GetNoArena();
}
inline void Token::set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Token.identifier)
}
inline void Token::set_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Token.identifier)
}
inline void Token::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Token.identifier)
}
inline void Token::set_identifier(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Token.identifier)
}
inline std::string* Token::mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Token.identifier)
  return identifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_identifier() {
  // @@protoc_insertion_point(field_release:hbase.pb.Token.identifier)
  if (!has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Token.identifier)
}

// optional bytes password = 2;
inline bool Token::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Token::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Token::password() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Token.password)
  return password_.GetNoArena();
}
inline void Token::set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Token.password)
}
inline void Token::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Token.password)
}
inline void Token::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Token.password)
}
inline void Token::set_password(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Token.password)
}
inline std::string* Token::mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Token.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_password() {
  // @@protoc_insertion_point(field_release:hbase.pb.Token.password)
  if (!has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Token.password)
}

// optional bytes service = 3;
inline bool Token::has_service() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Token::clear_service() {
  service_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Token::service() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Token.service)
  return service_.GetNoArena();
}
inline void Token::set_service(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Token.service)
}
inline void Token::set_service(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  service_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Token.service)
}
inline void Token::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Token.service)
}
inline void Token::set_service(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Token.service)
}
inline std::string* Token::mutable_service() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Token.service)
  return service_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_service() {
  // @@protoc_insertion_point(field_release:hbase.pb.Token.service)
  if (!has_service()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return service_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  service_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Token.service)
}

// -------------------------------------------------------------------

// GetAuthenticationTokenRequest

// -------------------------------------------------------------------

// GetAuthenticationTokenResponse

// optional .hbase.pb.Token token = 1;
inline bool GetAuthenticationTokenResponse::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAuthenticationTokenResponse::clear_token() {
  if (token_ != nullptr) token_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hbase::pb::Token& GetAuthenticationTokenResponse::token() const {
  const ::hbase::pb::Token* p = token_;
  // @@protoc_insertion_point(field_get:hbase.pb.GetAuthenticationTokenResponse.token)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::Token*>(
      &::hbase::pb::_Token_default_instance_);
}
inline ::hbase::pb::Token* GetAuthenticationTokenResponse::release_token() {
  // @@protoc_insertion_point(field_release:hbase.pb.GetAuthenticationTokenResponse.token)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::Token* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::hbase::pb::Token* GetAuthenticationTokenResponse::mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::Token>(GetArenaNoVirtual());
    token_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetAuthenticationTokenResponse.token)
  return token_;
}
inline void GetAuthenticationTokenResponse::set_allocated_token(::hbase::pb::Token* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GetAuthenticationTokenResponse.token)
}

// -------------------------------------------------------------------

// WhoAmIRequest

// -------------------------------------------------------------------

// WhoAmIResponse

// optional string username = 1;
inline bool WhoAmIResponse::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhoAmIResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WhoAmIResponse::username() const {
  // @@protoc_insertion_point(field_get:hbase.pb.WhoAmIResponse.username)
  return username_.GetNoArena();
}
inline void WhoAmIResponse::set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.WhoAmIResponse.username)
}
inline void WhoAmIResponse::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.WhoAmIResponse.username)
}
inline void WhoAmIResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.WhoAmIResponse.username)
}
inline void WhoAmIResponse::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.WhoAmIResponse.username)
}
inline std::string* WhoAmIResponse::mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.WhoAmIResponse.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WhoAmIResponse::release_username() {
  // @@protoc_insertion_point(field_release:hbase.pb.WhoAmIResponse.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WhoAmIResponse::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.WhoAmIResponse.username)
}

// optional string auth_method = 2;
inline bool WhoAmIResponse::has_auth_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhoAmIResponse::clear_auth_method() {
  auth_method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WhoAmIResponse::auth_method() const {
  // @@protoc_insertion_point(field_get:hbase.pb.WhoAmIResponse.auth_method)
  return auth_method_.GetNoArena();
}
inline void WhoAmIResponse::set_auth_method(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.WhoAmIResponse.auth_method)
}
inline void WhoAmIResponse::set_auth_method(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.WhoAmIResponse.auth_method)
}
inline void WhoAmIResponse::set_auth_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  auth_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.WhoAmIResponse.auth_method)
}
inline void WhoAmIResponse::set_auth_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  auth_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.WhoAmIResponse.auth_method)
}
inline std::string* WhoAmIResponse::mutable_auth_method() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.WhoAmIResponse.auth_method)
  return auth_method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WhoAmIResponse::release_auth_method() {
  // @@protoc_insertion_point(field_release:hbase.pb.WhoAmIResponse.auth_method)
  if (!has_auth_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return auth_method_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WhoAmIResponse::set_allocated_auth_method(std::string* auth_method) {
  if (auth_method != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auth_method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_method);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.WhoAmIResponse.auth_method)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hbase::pb::TokenIdentifier_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::TokenIdentifier_Kind>() {
  return ::hbase::pb::TokenIdentifier_Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Authentication_2eproto
