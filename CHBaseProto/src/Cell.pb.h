// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cell.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Cell_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Cell_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Cell_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Cell_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cell_2eproto;
namespace hbase {
namespace pb {
class Cell;
class CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::Cell* Arena::CreateMaybeMessage<::hbase::pb::Cell>(Arena*);
template<> ::hbase::pb::KeyValue* Arena::CreateMaybeMessage<::hbase::pb::KeyValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

enum CellType : int {
  MINIMUM = 0,
  PUT = 4,
  DELETE = 8,
  DELETE_FAMILY_VERSION = 10,
  DELETE_COLUMN = 12,
  DELETE_FAMILY = 14,
  MAXIMUM = 255
};
bool CellType_IsValid(int value);
constexpr CellType CellType_MIN = MINIMUM;
constexpr CellType CellType_MAX = MAXIMUM;
constexpr int CellType_ARRAYSIZE = CellType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellType_descriptor();
template<typename T>
inline const std::string& CellType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CellType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CellType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CellType_descriptor(), enum_t_value);
}
inline bool CellType_Parse(
    const std::string& name, CellType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CellType>(
    CellType_descriptor(), name, value);
}
// ===================================================================

class Cell :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.Cell) */ {
 public:
  Cell();
  virtual ~Cell();

  Cell(const Cell& from);
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cell& operator=(Cell&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cell& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Cell* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cell* New() const final {
    return CreateMaybeMessage<Cell>(nullptr);
  }

  Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.Cell";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cell_2eproto);
    return ::descriptor_table_Cell_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kFamilyFieldNumber = 2,
    kQualifierFieldNumber = 3,
    kValueFieldNumber = 6,
    kTagsFieldNumber = 7,
    kTimestampFieldNumber = 4,
    kCellTypeFieldNumber = 5,
  };
  // optional bytes row = 1;
  bool has_row() const;
  void clear_row();
  const std::string& row() const;
  void set_row(const std::string& value);
  void set_row(std::string&& value);
  void set_row(const char* value);
  void set_row(const void* value, size_t size);
  std::string* mutable_row();
  std::string* release_row();
  void set_allocated_row(std::string* row);

  // optional bytes family = 2;
  bool has_family() const;
  void clear_family();
  const std::string& family() const;
  void set_family(const std::string& value);
  void set_family(std::string&& value);
  void set_family(const char* value);
  void set_family(const void* value, size_t size);
  std::string* mutable_family();
  std::string* release_family();
  void set_allocated_family(std::string* family);

  // optional bytes qualifier = 3;
  bool has_qualifier() const;
  void clear_qualifier();
  const std::string& qualifier() const;
  void set_qualifier(const std::string& value);
  void set_qualifier(std::string&& value);
  void set_qualifier(const char* value);
  void set_qualifier(const void* value, size_t size);
  std::string* mutable_qualifier();
  std::string* release_qualifier();
  void set_allocated_qualifier(std::string* qualifier);

  // optional bytes value = 6;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // optional bytes tags = 7;
  bool has_tags() const;
  void clear_tags();
  const std::string& tags() const;
  void set_tags(const std::string& value);
  void set_tags(std::string&& value);
  void set_tags(const char* value);
  void set_tags(const void* value, size_t size);
  std::string* mutable_tags();
  std::string* release_tags();
  void set_allocated_tags(std::string* tags);

  // optional uint64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .hbase.pb.CellType cell_type = 5;
  bool has_cell_type() const;
  void clear_cell_type();
  ::hbase::pb::CellType cell_type() const;
  void set_cell_type(::hbase::pb::CellType value);

  // @@protoc_insertion_point(class_scope:hbase.pb.Cell)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qualifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int cell_type_;
  friend struct ::TableStruct_Cell_2eproto;
};
// -------------------------------------------------------------------

class KeyValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.KeyValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cell_2eproto);
    return ::descriptor_table_Cell_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kFamilyFieldNumber = 2,
    kQualifierFieldNumber = 3,
    kValueFieldNumber = 6,
    kTagsFieldNumber = 7,
    kTimestampFieldNumber = 4,
    kKeyTypeFieldNumber = 5,
  };
  // required bytes row = 1;
  bool has_row() const;
  void clear_row();
  const std::string& row() const;
  void set_row(const std::string& value);
  void set_row(std::string&& value);
  void set_row(const char* value);
  void set_row(const void* value, size_t size);
  std::string* mutable_row();
  std::string* release_row();
  void set_allocated_row(std::string* row);

  // required bytes family = 2;
  bool has_family() const;
  void clear_family();
  const std::string& family() const;
  void set_family(const std::string& value);
  void set_family(std::string&& value);
  void set_family(const char* value);
  void set_family(const void* value, size_t size);
  std::string* mutable_family();
  std::string* release_family();
  void set_allocated_family(std::string* family);

  // required bytes qualifier = 3;
  bool has_qualifier() const;
  void clear_qualifier();
  const std::string& qualifier() const;
  void set_qualifier(const std::string& value);
  void set_qualifier(std::string&& value);
  void set_qualifier(const char* value);
  void set_qualifier(const void* value, size_t size);
  std::string* mutable_qualifier();
  std::string* release_qualifier();
  void set_allocated_qualifier(std::string* qualifier);

  // optional bytes value = 6;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // optional bytes tags = 7;
  bool has_tags() const;
  void clear_tags();
  const std::string& tags() const;
  void set_tags(const std::string& value);
  void set_tags(std::string&& value);
  void set_tags(const char* value);
  void set_tags(const void* value, size_t size);
  std::string* mutable_tags();
  std::string* release_tags();
  void set_allocated_tags(std::string* tags);

  // optional uint64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .hbase.pb.CellType key_type = 5;
  bool has_key_type() const;
  void clear_key_type();
  ::hbase::pb::CellType key_type() const;
  void set_key_type(::hbase::pb::CellType value);

  // @@protoc_insertion_point(class_scope:hbase.pb.KeyValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qualifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int key_type_;
  friend struct ::TableStruct_Cell_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cell

// optional bytes row = 1;
inline bool Cell::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Cell::clear_row() {
  row_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Cell::row() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Cell.row)
  return row_.GetNoArena();
}
inline void Cell::set_row(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  row_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Cell.row)
}
inline void Cell::set_row(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  row_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Cell.row)
}
inline void Cell::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  row_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Cell.row)
}
inline void Cell::set_row(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  row_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Cell.row)
}
inline std::string* Cell::mutable_row() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Cell.row)
  return row_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cell::release_row() {
  // @@protoc_insertion_point(field_release:hbase.pb.Cell.row)
  if (!has_row()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return row_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cell::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  row_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Cell.row)
}

// optional bytes family = 2;
inline bool Cell::has_family() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Cell::clear_family() {
  family_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Cell::family() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Cell.family)
  return family_.GetNoArena();
}
inline void Cell::set_family(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Cell.family)
}
inline void Cell::set_family(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  family_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Cell.family)
}
inline void Cell::set_family(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Cell.family)
}
inline void Cell::set_family(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Cell.family)
}
inline std::string* Cell::mutable_family() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Cell.family)
  return family_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cell::release_family() {
  // @@protoc_insertion_point(field_release:hbase.pb.Cell.family)
  if (!has_family()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return family_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cell::set_allocated_family(std::string* family) {
  if (family != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  family_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Cell.family)
}

// optional bytes qualifier = 3;
inline bool Cell::has_qualifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Cell::clear_qualifier() {
  qualifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Cell::qualifier() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Cell.qualifier)
  return qualifier_.GetNoArena();
}
inline void Cell::set_qualifier(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  qualifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Cell.qualifier)
}
inline void Cell::set_qualifier(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  qualifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Cell.qualifier)
}
inline void Cell::set_qualifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  qualifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Cell.qualifier)
}
inline void Cell::set_qualifier(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  qualifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Cell.qualifier)
}
inline std::string* Cell::mutable_qualifier() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Cell.qualifier)
  return qualifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cell::release_qualifier() {
  // @@protoc_insertion_point(field_release:hbase.pb.Cell.qualifier)
  if (!has_qualifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return qualifier_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cell::set_allocated_qualifier(std::string* qualifier) {
  if (qualifier != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  qualifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qualifier);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Cell.qualifier)
}

// optional uint64 timestamp = 4;
inline bool Cell::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Cell::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::timestamp() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Cell.timestamp)
  return timestamp_;
}
inline void Cell::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.Cell.timestamp)
}

// optional .hbase.pb.CellType cell_type = 5;
inline bool Cell::has_cell_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Cell::clear_cell_type() {
  cell_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::hbase::pb::CellType Cell::cell_type() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Cell.cell_type)
  return static_cast< ::hbase::pb::CellType >(cell_type_);
}
inline void Cell::set_cell_type(::hbase::pb::CellType value) {
  assert(::hbase::pb::CellType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  cell_type_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.Cell.cell_type)
}

// optional bytes value = 6;
inline bool Cell::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Cell::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Cell::value() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Cell.value)
  return value_.GetNoArena();
}
inline void Cell::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Cell.value)
}
inline void Cell::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Cell.value)
}
inline void Cell::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Cell.value)
}
inline void Cell::set_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Cell.value)
}
inline std::string* Cell::mutable_value() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Cell.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cell::release_value() {
  // @@protoc_insertion_point(field_release:hbase.pb.Cell.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cell::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Cell.value)
}

// optional bytes tags = 7;
inline bool Cell::has_tags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Cell::clear_tags() {
  tags_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Cell::tags() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Cell.tags)
  return tags_.GetNoArena();
}
inline void Cell::set_tags(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  tags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Cell.tags)
}
inline void Cell::set_tags(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  tags_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Cell.tags)
}
inline void Cell::set_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  tags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Cell.tags)
}
inline void Cell::set_tags(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  tags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Cell.tags)
}
inline std::string* Cell::mutable_tags() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Cell.tags)
  return tags_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Cell::release_tags() {
  // @@protoc_insertion_point(field_release:hbase.pb.Cell.tags)
  if (!has_tags()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return tags_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Cell::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tags_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Cell.tags)
}

// -------------------------------------------------------------------

// KeyValue

// required bytes row = 1;
inline bool KeyValue::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::clear_row() {
  row_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeyValue::row() const {
  // @@protoc_insertion_point(field_get:hbase.pb.KeyValue.row)
  return row_.GetNoArena();
}
inline void KeyValue::set_row(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  row_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.KeyValue.row)
}
inline void KeyValue::set_row(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  row_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.KeyValue.row)
}
inline void KeyValue::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  row_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.KeyValue.row)
}
inline void KeyValue::set_row(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  row_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.KeyValue.row)
}
inline std::string* KeyValue::mutable_row() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.KeyValue.row)
  return row_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_row() {
  // @@protoc_insertion_point(field_release:hbase.pb.KeyValue.row)
  if (!has_row()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return row_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  row_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.KeyValue.row)
}

// required bytes family = 2;
inline bool KeyValue::has_family() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::clear_family() {
  family_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KeyValue::family() const {
  // @@protoc_insertion_point(field_get:hbase.pb.KeyValue.family)
  return family_.GetNoArena();
}
inline void KeyValue::set_family(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.KeyValue.family)
}
inline void KeyValue::set_family(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  family_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.KeyValue.family)
}
inline void KeyValue::set_family(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.KeyValue.family)
}
inline void KeyValue::set_family(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.KeyValue.family)
}
inline std::string* KeyValue::mutable_family() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.KeyValue.family)
  return family_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_family() {
  // @@protoc_insertion_point(field_release:hbase.pb.KeyValue.family)
  if (!has_family()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return family_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_family(std::string* family) {
  if (family != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  family_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.KeyValue.family)
}

// required bytes qualifier = 3;
inline bool KeyValue::has_qualifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyValue::clear_qualifier() {
  qualifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KeyValue::qualifier() const {
  // @@protoc_insertion_point(field_get:hbase.pb.KeyValue.qualifier)
  return qualifier_.GetNoArena();
}
inline void KeyValue::set_qualifier(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  qualifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.KeyValue.qualifier)
}
inline void KeyValue::set_qualifier(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  qualifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.KeyValue.qualifier)
}
inline void KeyValue::set_qualifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  qualifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.KeyValue.qualifier)
}
inline void KeyValue::set_qualifier(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  qualifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.KeyValue.qualifier)
}
inline std::string* KeyValue::mutable_qualifier() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.KeyValue.qualifier)
  return qualifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_qualifier() {
  // @@protoc_insertion_point(field_release:hbase.pb.KeyValue.qualifier)
  if (!has_qualifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return qualifier_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_qualifier(std::string* qualifier) {
  if (qualifier != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  qualifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qualifier);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.KeyValue.qualifier)
}

// optional uint64 timestamp = 4;
inline bool KeyValue::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KeyValue::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyValue::timestamp() const {
  // @@protoc_insertion_point(field_get:hbase.pb.KeyValue.timestamp)
  return timestamp_;
}
inline void KeyValue::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.KeyValue.timestamp)
}

// optional .hbase.pb.CellType key_type = 5;
inline bool KeyValue::has_key_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KeyValue::clear_key_type() {
  key_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::hbase::pb::CellType KeyValue::key_type() const {
  // @@protoc_insertion_point(field_get:hbase.pb.KeyValue.key_type)
  return static_cast< ::hbase::pb::CellType >(key_type_);
}
inline void KeyValue::set_key_type(::hbase::pb::CellType value) {
  assert(::hbase::pb::CellType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  key_type_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.KeyValue.key_type)
}

// optional bytes value = 6;
inline bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:hbase.pb.KeyValue.value)
  return value_.GetNoArena();
}
inline void KeyValue::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.KeyValue.value)
}
inline void KeyValue::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.KeyValue.value)
}
inline void KeyValue::set_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.KeyValue.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:hbase.pb.KeyValue.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.KeyValue.value)
}

// optional bytes tags = 7;
inline bool KeyValue::has_tags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KeyValue::clear_tags() {
  tags_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& KeyValue::tags() const {
  // @@protoc_insertion_point(field_get:hbase.pb.KeyValue.tags)
  return tags_.GetNoArena();
}
inline void KeyValue::set_tags(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  tags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.KeyValue.tags)
}
inline void KeyValue::set_tags(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  tags_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.KeyValue.tags)
}
inline void KeyValue::set_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  tags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.KeyValue.tags)
}
inline void KeyValue::set_tags(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  tags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.KeyValue.tags)
}
inline std::string* KeyValue::mutable_tags() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.KeyValue.tags)
  return tags_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValue::release_tags() {
  // @@protoc_insertion_point(field_release:hbase.pb.KeyValue.tags)
  if (!has_tags()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return tags_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tags_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.KeyValue.tags)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hbase::pb::CellType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::CellType>() {
  return ::hbase::pb::CellType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Cell_2eproto
