// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client.proto

#include "Client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Action_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BulkLoadHFileRequest_FamilyPath_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Cell_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cell_Cell_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Column_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnFamilyTimeRange_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Comparator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Comparator_Comparator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Condition_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoprocessorServiceCall_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CoprocessorServiceResult_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cursor_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegationToken_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Filter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Filter_Filter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Get_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiRegionLoadStats_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MutationProto_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MutationProto_ColumnValue_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MutationProto_ColumnValue_QualifierValue_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameBytesPair_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionAction_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionActionResult_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionLoadStats_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionSpecifier_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Result_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResultOrException_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Scan_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MapReduce_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanMetrics_MapReduce_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableName_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeRange_HBase_2eproto;
namespace hbase {
namespace pb {
class AuthorizationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Authorizations> _instance;
} _Authorizations_default_instance_;
class CellVisibilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CellVisibility> _instance;
} _CellVisibility_default_instance_;
class ColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Column> _instance;
} _Column_default_instance_;
class GetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Get> _instance;
} _Get_default_instance_;
class ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Result> _instance;
} _Result_default_instance_;
class GetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRequest> _instance;
} _GetRequest_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResponse> _instance;
} _GetResponse_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class MutationProto_ColumnValue_QualifierValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutationProto_ColumnValue_QualifierValue> _instance;
} _MutationProto_ColumnValue_QualifierValue_default_instance_;
class MutationProto_ColumnValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutationProto_ColumnValue> _instance;
} _MutationProto_ColumnValue_default_instance_;
class MutationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutationProto> _instance;
} _MutationProto_default_instance_;
class MutateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutateRequest> _instance;
} _MutateRequest_default_instance_;
class MutateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutateResponse> _instance;
} _MutateResponse_default_instance_;
class ScanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scan> _instance;
} _Scan_default_instance_;
class ScanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanRequest> _instance;
} _ScanRequest_default_instance_;
class CursorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cursor> _instance;
} _Cursor_default_instance_;
class ScanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanResponse> _instance;
} _ScanResponse_default_instance_;
class BulkLoadHFileRequest_FamilyPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkLoadHFileRequest_FamilyPath> _instance;
} _BulkLoadHFileRequest_FamilyPath_default_instance_;
class BulkLoadHFileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkLoadHFileRequest> _instance;
} _BulkLoadHFileRequest_default_instance_;
class BulkLoadHFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkLoadHFileResponse> _instance;
} _BulkLoadHFileResponse_default_instance_;
class DelegationTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegationToken> _instance;
} _DelegationToken_default_instance_;
class PrepareBulkLoadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareBulkLoadRequest> _instance;
} _PrepareBulkLoadRequest_default_instance_;
class PrepareBulkLoadResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareBulkLoadResponse> _instance;
} _PrepareBulkLoadResponse_default_instance_;
class CleanupBulkLoadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanupBulkLoadRequest> _instance;
} _CleanupBulkLoadRequest_default_instance_;
class CleanupBulkLoadResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanupBulkLoadResponse> _instance;
} _CleanupBulkLoadResponse_default_instance_;
class CoprocessorServiceCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoprocessorServiceCall> _instance;
} _CoprocessorServiceCall_default_instance_;
class CoprocessorServiceResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoprocessorServiceResult> _instance;
} _CoprocessorServiceResult_default_instance_;
class CoprocessorServiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoprocessorServiceRequest> _instance;
} _CoprocessorServiceRequest_default_instance_;
class CoprocessorServiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoprocessorServiceResponse> _instance;
} _CoprocessorServiceResponse_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Action> _instance;
} _Action_default_instance_;
class RegionActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionAction> _instance;
} _RegionAction_default_instance_;
class RegionLoadStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionLoadStats> _instance;
} _RegionLoadStats_default_instance_;
class MultiRegionLoadStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRegionLoadStats> _instance;
} _MultiRegionLoadStats_default_instance_;
class ResultOrExceptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultOrException> _instance;
} _ResultOrException_default_instance_;
class RegionActionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionActionResult> _instance;
} _RegionActionResult_default_instance_;
class MultiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRequest> _instance;
} _MultiRequest_default_instance_;
class MultiResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiResponse> _instance;
} _MultiResponse_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_Action_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Action_default_instance_;
    new (ptr) ::hbase::pb::Action();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Action::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Action_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Action_Client_2eproto}, {
      &scc_info_MutationProto_Client_2eproto.base,
      &scc_info_Get_Client_2eproto.base,
      &scc_info_CoprocessorServiceCall_Client_2eproto.base,}};

static void InitDefaultsscc_info_Authorizations_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Authorizations_default_instance_;
    new (ptr) ::hbase::pb::Authorizations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Authorizations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Authorizations_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Authorizations_Client_2eproto}, {}};

static void InitDefaultsscc_info_BulkLoadHFileRequest_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_BulkLoadHFileRequest_default_instance_;
    new (ptr) ::hbase::pb::BulkLoadHFileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::BulkLoadHFileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BulkLoadHFileRequest_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_BulkLoadHFileRequest_Client_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_BulkLoadHFileRequest_FamilyPath_Client_2eproto.base,
      &scc_info_DelegationToken_Client_2eproto.base,}};

static void InitDefaultsscc_info_BulkLoadHFileRequest_FamilyPath_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_BulkLoadHFileRequest_FamilyPath_default_instance_;
    new (ptr) ::hbase::pb::BulkLoadHFileRequest_FamilyPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::BulkLoadHFileRequest_FamilyPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BulkLoadHFileRequest_FamilyPath_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BulkLoadHFileRequest_FamilyPath_Client_2eproto}, {}};

static void InitDefaultsscc_info_BulkLoadHFileResponse_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_BulkLoadHFileResponse_default_instance_;
    new (ptr) ::hbase::pb::BulkLoadHFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::BulkLoadHFileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BulkLoadHFileResponse_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BulkLoadHFileResponse_Client_2eproto}, {}};

static void InitDefaultsscc_info_CellVisibility_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CellVisibility_default_instance_;
    new (ptr) ::hbase::pb::CellVisibility();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CellVisibility::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CellVisibility_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CellVisibility_Client_2eproto}, {}};

static void InitDefaultsscc_info_CleanupBulkLoadRequest_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CleanupBulkLoadRequest_default_instance_;
    new (ptr) ::hbase::pb::CleanupBulkLoadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CleanupBulkLoadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CleanupBulkLoadRequest_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CleanupBulkLoadRequest_Client_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,}};

static void InitDefaultsscc_info_CleanupBulkLoadResponse_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CleanupBulkLoadResponse_default_instance_;
    new (ptr) ::hbase::pb::CleanupBulkLoadResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CleanupBulkLoadResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanupBulkLoadResponse_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CleanupBulkLoadResponse_Client_2eproto}, {}};

static void InitDefaultsscc_info_Column_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Column_default_instance_;
    new (ptr) ::hbase::pb::Column();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Column::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Column_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Column_Client_2eproto}, {}};

static void InitDefaultsscc_info_Condition_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Condition_default_instance_;
    new (ptr) ::hbase::pb::Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Condition_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Condition_Client_2eproto}, {
      &scc_info_Comparator_Comparator_2eproto.base,
      &scc_info_TimeRange_HBase_2eproto.base,}};

static void InitDefaultsscc_info_CoprocessorServiceCall_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CoprocessorServiceCall_default_instance_;
    new (ptr) ::hbase::pb::CoprocessorServiceCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CoprocessorServiceCall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoprocessorServiceCall_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CoprocessorServiceCall_Client_2eproto}, {}};

static void InitDefaultsscc_info_CoprocessorServiceRequest_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CoprocessorServiceRequest_default_instance_;
    new (ptr) ::hbase::pb::CoprocessorServiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CoprocessorServiceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CoprocessorServiceRequest_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CoprocessorServiceRequest_Client_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_CoprocessorServiceCall_Client_2eproto.base,}};

static void InitDefaultsscc_info_CoprocessorServiceResponse_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CoprocessorServiceResponse_default_instance_;
    new (ptr) ::hbase::pb::CoprocessorServiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CoprocessorServiceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CoprocessorServiceResponse_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CoprocessorServiceResponse_Client_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_NameBytesPair_HBase_2eproto.base,}};

static void InitDefaultsscc_info_CoprocessorServiceResult_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CoprocessorServiceResult_default_instance_;
    new (ptr) ::hbase::pb::CoprocessorServiceResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CoprocessorServiceResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CoprocessorServiceResult_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CoprocessorServiceResult_Client_2eproto}, {
      &scc_info_NameBytesPair_HBase_2eproto.base,}};

static void InitDefaultsscc_info_Cursor_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Cursor_default_instance_;
    new (ptr) ::hbase::pb::Cursor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Cursor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cursor_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Cursor_Client_2eproto}, {}};

static void InitDefaultsscc_info_DelegationToken_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_DelegationToken_default_instance_;
    new (ptr) ::hbase::pb::DelegationToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::DelegationToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegationToken_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DelegationToken_Client_2eproto}, {}};

static void InitDefaultsscc_info_Get_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Get_default_instance_;
    new (ptr) ::hbase::pb::Get();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Get::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Get_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Get_Client_2eproto}, {
      &scc_info_Column_Client_2eproto.base,
      &scc_info_NameBytesPair_HBase_2eproto.base,
      &scc_info_Filter_Filter_2eproto.base,
      &scc_info_TimeRange_HBase_2eproto.base,
      &scc_info_ColumnFamilyTimeRange_HBase_2eproto.base,}};

static void InitDefaultsscc_info_GetRequest_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetRequest_default_instance_;
    new (ptr) ::hbase::pb::GetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetRequest_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetRequest_Client_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_Get_Client_2eproto.base,}};

static void InitDefaultsscc_info_GetResponse_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetResponse_default_instance_;
    new (ptr) ::hbase::pb::GetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetResponse_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetResponse_Client_2eproto}, {
      &scc_info_Result_Client_2eproto.base,}};

static void InitDefaultsscc_info_MultiRegionLoadStats_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MultiRegionLoadStats_default_instance_;
    new (ptr) ::hbase::pb::MultiRegionLoadStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MultiRegionLoadStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiRegionLoadStats_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MultiRegionLoadStats_Client_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_RegionLoadStats_Client_2eproto.base,}};

static void InitDefaultsscc_info_MultiRequest_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MultiRequest_default_instance_;
    new (ptr) ::hbase::pb::MultiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MultiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiRequest_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MultiRequest_Client_2eproto}, {
      &scc_info_RegionAction_Client_2eproto.base,
      &scc_info_Condition_Client_2eproto.base,}};

static void InitDefaultsscc_info_MultiResponse_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MultiResponse_default_instance_;
    new (ptr) ::hbase::pb::MultiResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MultiResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiResponse_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MultiResponse_Client_2eproto}, {
      &scc_info_RegionActionResult_Client_2eproto.base,
      &scc_info_MultiRegionLoadStats_Client_2eproto.base,}};

static void InitDefaultsscc_info_MutateRequest_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MutateRequest_default_instance_;
    new (ptr) ::hbase::pb::MutateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MutateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MutateRequest_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MutateRequest_Client_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_MutationProto_Client_2eproto.base,
      &scc_info_Condition_Client_2eproto.base,}};

static void InitDefaultsscc_info_MutateResponse_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MutateResponse_default_instance_;
    new (ptr) ::hbase::pb::MutateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MutateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MutateResponse_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MutateResponse_Client_2eproto}, {
      &scc_info_Result_Client_2eproto.base,}};

static void InitDefaultsscc_info_MutationProto_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MutationProto_default_instance_;
    new (ptr) ::hbase::pb::MutationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MutationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MutationProto_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MutationProto_Client_2eproto}, {
      &scc_info_MutationProto_ColumnValue_Client_2eproto.base,
      &scc_info_NameBytesPair_HBase_2eproto.base,
      &scc_info_TimeRange_HBase_2eproto.base,}};

static void InitDefaultsscc_info_MutationProto_ColumnValue_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MutationProto_ColumnValue_default_instance_;
    new (ptr) ::hbase::pb::MutationProto_ColumnValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MutationProto_ColumnValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MutationProto_ColumnValue_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MutationProto_ColumnValue_Client_2eproto}, {
      &scc_info_MutationProto_ColumnValue_QualifierValue_Client_2eproto.base,}};

static void InitDefaultsscc_info_MutationProto_ColumnValue_QualifierValue_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MutationProto_ColumnValue_QualifierValue_default_instance_;
    new (ptr) ::hbase::pb::MutationProto_ColumnValue_QualifierValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MutationProto_ColumnValue_QualifierValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MutationProto_ColumnValue_QualifierValue_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MutationProto_ColumnValue_QualifierValue_Client_2eproto}, {}};

static void InitDefaultsscc_info_PrepareBulkLoadRequest_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_PrepareBulkLoadRequest_default_instance_;
    new (ptr) ::hbase::pb::PrepareBulkLoadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::PrepareBulkLoadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrepareBulkLoadRequest_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PrepareBulkLoadRequest_Client_2eproto}, {
      &scc_info_TableName_HBase_2eproto.base,
      &scc_info_RegionSpecifier_HBase_2eproto.base,}};

static void InitDefaultsscc_info_PrepareBulkLoadResponse_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_PrepareBulkLoadResponse_default_instance_;
    new (ptr) ::hbase::pb::PrepareBulkLoadResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::PrepareBulkLoadResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareBulkLoadResponse_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PrepareBulkLoadResponse_Client_2eproto}, {}};

static void InitDefaultsscc_info_RegionAction_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RegionAction_default_instance_;
    new (ptr) ::hbase::pb::RegionAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RegionAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionAction_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegionAction_Client_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_Action_Client_2eproto.base,}};

static void InitDefaultsscc_info_RegionActionResult_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RegionActionResult_default_instance_;
    new (ptr) ::hbase::pb::RegionActionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RegionActionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionActionResult_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegionActionResult_Client_2eproto}, {
      &scc_info_ResultOrException_Client_2eproto.base,
      &scc_info_NameBytesPair_HBase_2eproto.base,}};

static void InitDefaultsscc_info_RegionLoadStats_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RegionLoadStats_default_instance_;
    new (ptr) ::hbase::pb::RegionLoadStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RegionLoadStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionLoadStats_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RegionLoadStats_Client_2eproto}, {}};

static void InitDefaultsscc_info_Result_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Result_default_instance_;
    new (ptr) ::hbase::pb::Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Result_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Result_Client_2eproto}, {
      &scc_info_Cell_Cell_2eproto.base,}};

static void InitDefaultsscc_info_ResultOrException_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ResultOrException_default_instance_;
    new (ptr) ::hbase::pb::ResultOrException();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ResultOrException::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResultOrException_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ResultOrException_Client_2eproto}, {
      &scc_info_Result_Client_2eproto.base,
      &scc_info_NameBytesPair_HBase_2eproto.base,
      &scc_info_CoprocessorServiceResult_Client_2eproto.base,
      &scc_info_RegionLoadStats_Client_2eproto.base,}};

static void InitDefaultsscc_info_Scan_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Scan_default_instance_;
    new (ptr) ::hbase::pb::Scan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Scan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Scan_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Scan_Client_2eproto}, {
      &scc_info_Column_Client_2eproto.base,
      &scc_info_NameBytesPair_HBase_2eproto.base,
      &scc_info_Filter_Filter_2eproto.base,
      &scc_info_TimeRange_HBase_2eproto.base,
      &scc_info_ColumnFamilyTimeRange_HBase_2eproto.base,}};

static void InitDefaultsscc_info_ScanRequest_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ScanRequest_default_instance_;
    new (ptr) ::hbase::pb::ScanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ScanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScanRequest_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ScanRequest_Client_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_Scan_Client_2eproto.base,}};

static void InitDefaultsscc_info_ScanResponse_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ScanResponse_default_instance_;
    new (ptr) ::hbase::pb::ScanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ScanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ScanResponse_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ScanResponse_Client_2eproto}, {
      &scc_info_Result_Client_2eproto.base,
      &scc_info_ScanMetrics_MapReduce_2eproto.base,
      &scc_info_Cursor_Client_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Client_2eproto[37];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Client_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Client_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Client_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Authorizations, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Authorizations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Authorizations, label_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CellVisibility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CellVisibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CellVisibility, expression_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Column, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Column, family_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Column, qualifier_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, column_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, attribute_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, filter_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, time_range_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, max_versions_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, cache_blocks_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, store_limit_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, store_offset_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, existence_only_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, closest_row_before_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, consistency_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, cf_time_range_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Get, load_column_families_on_demand_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  9,
  10,
  3,
  4,
  5,
  6,
  8,
  ~0u,
  7,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Result, cell_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Result, associated_cell_count_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Result, exists_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Result, stale_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Result, partial_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetRequest, get_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Condition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Condition, row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Condition, family_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Condition, qualifier_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Condition, compare_type_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Condition, comparator_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Condition, time_range_),
  0,
  1,
  2,
  5,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue_QualifierValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue_QualifierValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue_QualifierValue, qualifier_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue_QualifierValue, value_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue_QualifierValue, timestamp_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue_QualifierValue, delete_type_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue_QualifierValue, tags_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue, family_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto_ColumnValue, qualifier_value_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, mutate_type_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, column_value_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, timestamp_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, attribute_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, durability_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, time_range_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, associated_cell_count_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutationProto, nonce_),
  0,
  3,
  ~0u,
  2,
  ~0u,
  4,
  1,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRequest, mutation_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRequest, condition_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRequest, nonce_group_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateResponse, result_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateResponse, processed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, column_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, attribute_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, start_row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, stop_row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, filter_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, time_range_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, max_versions_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, cache_blocks_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, batch_size_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, max_result_size_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, store_limit_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, store_offset_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, load_column_families_on_demand_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, small_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, reversed_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, consistency_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, caching_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, allow_partial_results_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, cf_time_range_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, mvcc_read_point_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, include_start_row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, include_stop_row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, readtype_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Scan, need_cursor_result_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  18,
  19,
  5,
  4,
  6,
  7,
  8,
  9,
  10,
  12,
  13,
  11,
  ~0u,
  14,
  20,
  16,
  15,
  17,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, scan_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, scanner_id_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, number_of_rows_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, close_scanner_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, next_call_seq_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, client_handles_partials_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, client_handles_heartbeats_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, track_scan_metrics_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, renew_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanRequest, limit_of_rows_),
  0,
  1,
  2,
  4,
  5,
  3,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Cursor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Cursor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Cursor, row_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, cells_per_result_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, scanner_id_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, more_results_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, ttl_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, results_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, stale_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, partial_flag_per_result_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, more_results_in_region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, heartbeat_message_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, scan_metrics_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, mvcc_read_point_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanResponse, cursor_),
  ~0u,
  2,
  4,
  3,
  ~0u,
  5,
  ~0u,
  6,
  7,
  0,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest_FamilyPath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest_FamilyPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest_FamilyPath, family_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest_FamilyPath, path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest, family_path_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest, assign_seq_num_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest, fs_token_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest, bulk_token_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileRequest, copy_file_),
  1,
  ~0u,
  3,
  2,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadHFileResponse, loaded_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DelegationToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DelegationToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DelegationToken, identifier_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DelegationToken, password_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DelegationToken, kind_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DelegationToken, service_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrepareBulkLoadRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrepareBulkLoadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrepareBulkLoadRequest, table_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrepareBulkLoadRequest, region_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrepareBulkLoadResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrepareBulkLoadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrepareBulkLoadResponse, bulk_token_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CleanupBulkLoadRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CleanupBulkLoadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CleanupBulkLoadRequest, bulk_token_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CleanupBulkLoadRequest, region_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CleanupBulkLoadResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CleanupBulkLoadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceCall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceCall, row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceCall, service_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceCall, method_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceCall, request_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceResult, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceRequest, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceRequest, call_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceResponse, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CoprocessorServiceResponse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Action, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Action, index_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Action, mutation_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Action, get_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Action, service_call_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionAction, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionAction, atomic_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionAction, action_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoadStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoadStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoadStats, memstoreload_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoadStats, heapoccupancy_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoadStats, compactionpressure_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRegionLoadStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRegionLoadStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRegionLoadStats, region_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRegionLoadStats, stat_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResultOrException, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResultOrException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResultOrException, index_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResultOrException, result_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResultOrException, exception_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResultOrException, service_result_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResultOrException, loadstats_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionActionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionActionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionActionResult, resultorexception_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionActionResult, exception_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRequest, regionaction_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRequest, noncegroup_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRequest, condition_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiResponse, regionactionresult_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiResponse, processed_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiResponse, regionstatistics_),
  ~0u,
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hbase::pb::Authorizations)},
  { 7, 13, sizeof(::hbase::pb::CellVisibility)},
  { 14, 21, sizeof(::hbase::pb::Column)},
  { 23, 42, sizeof(::hbase::pb::Get)},
  { 56, 66, sizeof(::hbase::pb::Result)},
  { 71, 78, sizeof(::hbase::pb::GetRequest)},
  { 80, 86, sizeof(::hbase::pb::GetResponse)},
  { 87, 98, sizeof(::hbase::pb::Condition)},
  { 104, 114, sizeof(::hbase::pb::MutationProto_ColumnValue_QualifierValue)},
  { 119, 126, sizeof(::hbase::pb::MutationProto_ColumnValue)},
  { 128, 142, sizeof(::hbase::pb::MutationProto)},
  { 151, 160, sizeof(::hbase::pb::MutateRequest)},
  { 164, 171, sizeof(::hbase::pb::MutateResponse)},
  { 173, 202, sizeof(::hbase::pb::Scan)},
  { 226, 242, sizeof(::hbase::pb::ScanRequest)},
  { 253, 259, sizeof(::hbase::pb::Cursor)},
  { 260, 277, sizeof(::hbase::pb::ScanResponse)},
  { 289, 296, sizeof(::hbase::pb::BulkLoadHFileRequest_FamilyPath)},
  { 298, 309, sizeof(::hbase::pb::BulkLoadHFileRequest)},
  { 315, 321, sizeof(::hbase::pb::BulkLoadHFileResponse)},
  { 322, 331, sizeof(::hbase::pb::DelegationToken)},
  { 335, 342, sizeof(::hbase::pb::PrepareBulkLoadRequest)},
  { 344, 350, sizeof(::hbase::pb::PrepareBulkLoadResponse)},
  { 351, 358, sizeof(::hbase::pb::CleanupBulkLoadRequest)},
  { 360, 365, sizeof(::hbase::pb::CleanupBulkLoadResponse)},
  { 365, 374, sizeof(::hbase::pb::CoprocessorServiceCall)},
  { 378, 384, sizeof(::hbase::pb::CoprocessorServiceResult)},
  { 385, 392, sizeof(::hbase::pb::CoprocessorServiceRequest)},
  { 394, 401, sizeof(::hbase::pb::CoprocessorServiceResponse)},
  { 403, 412, sizeof(::hbase::pb::Action)},
  { 416, 424, sizeof(::hbase::pb::RegionAction)},
  { 427, 435, sizeof(::hbase::pb::RegionLoadStats)},
  { 438, 445, sizeof(::hbase::pb::MultiRegionLoadStats)},
  { 447, 457, sizeof(::hbase::pb::ResultOrException)},
  { 462, 469, sizeof(::hbase::pb::RegionActionResult)},
  { 471, 479, sizeof(::hbase::pb::MultiRequest)},
  { 482, 490, sizeof(::hbase::pb::MultiResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Authorizations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CellVisibility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Get_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MutationProto_ColumnValue_QualifierValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MutationProto_ColumnValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MutationProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MutateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MutateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Scan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Cursor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ScanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_BulkLoadHFileRequest_FamilyPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_BulkLoadHFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_BulkLoadHFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_DelegationToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_PrepareBulkLoadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_PrepareBulkLoadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CleanupBulkLoadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CleanupBulkLoadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CoprocessorServiceCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CoprocessorServiceResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CoprocessorServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CoprocessorServiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RegionAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RegionLoadStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MultiRegionLoadStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ResultOrException_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RegionActionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MultiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MultiResponse_default_instance_),
};

const char descriptor_table_protodef_Client_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Client.proto\022\010hbase.pb\032\013HBase.proto\032\014F"
  "ilter.proto\032\nCell.proto\032\020Comparator.prot"
  "o\032\017MapReduce.proto\"\037\n\016Authorizations\022\r\n\005"
  "label\030\001 \003(\t\"$\n\016CellVisibility\022\022\n\nexpress"
  "ion\030\001 \002(\t\"+\n\006Column\022\016\n\006family\030\001 \002(\014\022\021\n\tq"
  "ualifier\030\002 \003(\014\"\341\003\n\003Get\022\013\n\003row\030\001 \002(\014\022 \n\006c"
  "olumn\030\002 \003(\0132\020.hbase.pb.Column\022*\n\tattribu"
  "te\030\003 \003(\0132\027.hbase.pb.NameBytesPair\022 \n\006fil"
  "ter\030\004 \001(\0132\020.hbase.pb.Filter\022\'\n\ntime_rang"
  "e\030\005 \001(\0132\023.hbase.pb.TimeRange\022\027\n\014max_vers"
  "ions\030\006 \001(\r:\0011\022\032\n\014cache_blocks\030\007 \001(\010:\004tru"
  "e\022\023\n\013store_limit\030\010 \001(\r\022\024\n\014store_offset\030\t"
  " \001(\r\022\035\n\016existence_only\030\n \001(\010:\005false\022!\n\022c"
  "losest_row_before\030\013 \001(\010:\005false\0222\n\013consis"
  "tency\030\014 \001(\0162\025.hbase.pb.Consistency:\006STRO"
  "NG\0226\n\rcf_time_range\030\r \003(\0132\037.hbase.pb.Col"
  "umnFamilyTimeRange\022&\n\036load_column_famili"
  "es_on_demand\030\016 \001(\010\"\203\001\n\006Result\022\034\n\004cell\030\001 "
  "\003(\0132\016.hbase.pb.Cell\022\035\n\025associated_cell_c"
  "ount\030\002 \001(\005\022\016\n\006exists\030\003 \001(\010\022\024\n\005stale\030\004 \001("
  "\010:\005false\022\026\n\007partial\030\005 \001(\010:\005false\"S\n\nGetR"
  "equest\022)\n\006region\030\001 \002(\0132\031.hbase.pb.Region"
  "Specifier\022\032\n\003get\030\002 \002(\0132\r.hbase.pb.Get\"/\n"
  "\013GetResponse\022 \n\006result\030\001 \001(\0132\020.hbase.pb."
  "Result\"\273\001\n\tCondition\022\013\n\003row\030\001 \002(\014\022\016\n\006fam"
  "ily\030\002 \002(\014\022\021\n\tqualifier\030\003 \002(\014\022+\n\014compare_"
  "type\030\004 \002(\0162\025.hbase.pb.CompareType\022(\n\ncom"
  "parator\030\005 \002(\0132\024.hbase.pb.Comparator\022\'\n\nt"
  "ime_range\030\006 \001(\0132\023.hbase.pb.TimeRange\"\364\006\n"
  "\rMutationProto\022\013\n\003row\030\001 \001(\014\0229\n\013mutate_ty"
  "pe\030\002 \001(\0162$.hbase.pb.MutationProto.Mutati"
  "onType\0229\n\014column_value\030\003 \003(\0132#.hbase.pb."
  "MutationProto.ColumnValue\022\021\n\ttimestamp\030\004"
  " \001(\004\022*\n\tattribute\030\005 \003(\0132\027.hbase.pb.NameB"
  "ytesPair\022C\n\ndurability\030\006 \001(\0162\".hbase.pb."
  "MutationProto.Durability:\013USE_DEFAULT\022\'\n"
  "\ntime_range\030\007 \001(\0132\023.hbase.pb.TimeRange\022\035"
  "\n\025associated_cell_count\030\010 \001(\005\022\r\n\005nonce\030\t"
  " \001(\004\032\371\001\n\013ColumnValue\022\016\n\006family\030\001 \002(\014\022K\n\017"
  "qualifier_value\030\002 \003(\01322.hbase.pb.Mutatio"
  "nProto.ColumnValue.QualifierValue\032\214\001\n\016Qu"
  "alifierValue\022\021\n\tqualifier\030\001 \001(\014\022\r\n\005value"
  "\030\002 \001(\014\022\021\n\ttimestamp\030\003 \001(\004\0227\n\013delete_type"
  "\030\004 \001(\0162\".hbase.pb.MutationProto.DeleteTy"
  "pe\022\014\n\004tags\030\005 \001(\014\"W\n\nDurability\022\017\n\013USE_DE"
  "FAULT\020\000\022\014\n\010SKIP_WAL\020\001\022\r\n\tASYNC_WAL\020\002\022\014\n\010"
  "SYNC_WAL\020\003\022\r\n\tFSYNC_WAL\020\004\">\n\014MutationTyp"
  "e\022\n\n\006APPEND\020\000\022\r\n\tINCREMENT\020\001\022\007\n\003PUT\020\002\022\n\n"
  "\006DELETE\020\003\"p\n\nDeleteType\022\026\n\022DELETE_ONE_VE"
  "RSION\020\000\022\034\n\030DELETE_MULTIPLE_VERSIONS\020\001\022\021\n"
  "\rDELETE_FAMILY\020\002\022\031\n\025DELETE_FAMILY_VERSIO"
  "N\020\003\"\242\001\n\rMutateRequest\022)\n\006region\030\001 \002(\0132\031."
  "hbase.pb.RegionSpecifier\022)\n\010mutation\030\002 \002"
  "(\0132\027.hbase.pb.MutationProto\022&\n\tcondition"
  "\030\003 \001(\0132\023.hbase.pb.Condition\022\023\n\013nonce_gro"
  "up\030\004 \001(\004\"E\n\016MutateResponse\022 \n\006result\030\001 \001"
  "(\0132\020.hbase.pb.Result\022\021\n\tprocessed\030\002 \001(\010\""
  "\246\006\n\004Scan\022 \n\006column\030\001 \003(\0132\020.hbase.pb.Colu"
  "mn\022*\n\tattribute\030\002 \003(\0132\027.hbase.pb.NameByt"
  "esPair\022\021\n\tstart_row\030\003 \001(\014\022\020\n\010stop_row\030\004 "
  "\001(\014\022 \n\006filter\030\005 \001(\0132\020.hbase.pb.Filter\022\'\n"
  "\ntime_range\030\006 \001(\0132\023.hbase.pb.TimeRange\022\027"
  "\n\014max_versions\030\007 \001(\r:\0011\022\032\n\014cache_blocks\030"
  "\010 \001(\010:\004true\022\022\n\nbatch_size\030\t \001(\r\022\027\n\017max_r"
  "esult_size\030\n \001(\004\022\023\n\013store_limit\030\013 \001(\r\022\024\n"
  "\014store_offset\030\014 \001(\r\022&\n\036load_column_famil"
  "ies_on_demand\030\r \001(\010\022\021\n\005small\030\016 \001(\010B\002\030\001\022\027"
  "\n\010reversed\030\017 \001(\010:\005false\0222\n\013consistency\030\020"
  " \001(\0162\025.hbase.pb.Consistency:\006STRONG\022\017\n\007c"
  "aching\030\021 \001(\r\022\035\n\025allow_partial_results\030\022 "
  "\001(\010\0226\n\rcf_time_range\030\023 \003(\0132\037.hbase.pb.Co"
  "lumnFamilyTimeRange\022\032\n\017mvcc_read_point\030\024"
  " \001(\004:\0010\022\037\n\021include_start_row\030\025 \001(\010:\004true"
  "\022\037\n\020include_stop_row\030\026 \001(\010:\005false\0222\n\010rea"
  "dType\030\027 \001(\0162\027.hbase.pb.Scan.ReadType:\007DE"
  "FAULT\022!\n\022need_cursor_result\030\030 \001(\010:\005false"
  "\".\n\010ReadType\022\013\n\007DEFAULT\020\000\022\n\n\006STREAM\020\001\022\t\n"
  "\005PREAD\020\002\"\300\002\n\013ScanRequest\022)\n\006region\030\001 \001(\013"
  "2\031.hbase.pb.RegionSpecifier\022\034\n\004scan\030\002 \001("
  "\0132\016.hbase.pb.Scan\022\022\n\nscanner_id\030\003 \001(\004\022\026\n"
  "\016number_of_rows\030\004 \001(\r\022\025\n\rclose_scanner\030\005"
  " \001(\010\022\025\n\rnext_call_seq\030\006 \001(\004\022\037\n\027client_ha"
  "ndles_partials\030\007 \001(\010\022!\n\031client_handles_h"
  "eartbeats\030\010 \001(\010\022\032\n\022track_scan_metrics\030\t "
  "\001(\010\022\024\n\005renew\030\n \001(\010:\005false\022\030\n\rlimit_of_ro"
  "ws\030\013 \001(\r:\0010\"\025\n\006Cursor\022\013\n\003row\030\001 \001(\014\"\330\002\n\014S"
  "canResponse\022\030\n\020cells_per_result\030\001 \003(\r\022\022\n"
  "\nscanner_id\030\002 \001(\004\022\024\n\014more_results\030\003 \001(\010\022"
  "\013\n\003ttl\030\004 \001(\r\022!\n\007results\030\005 \003(\0132\020.hbase.pb"
  ".Result\022\r\n\005stale\030\006 \001(\010\022\037\n\027partial_flag_p"
  "er_result\030\007 \003(\010\022\036\n\026more_results_in_regio"
  "n\030\010 \001(\010\022\031\n\021heartbeat_message\030\t \001(\010\022+\n\014sc"
  "an_metrics\030\n \001(\0132\025.hbase.pb.ScanMetrics\022"
  "\032\n\017mvcc_read_point\030\013 \001(\004:\0010\022 \n\006cursor\030\014 "
  "\001(\0132\020.hbase.pb.Cursor\"\240\002\n\024BulkLoadHFileR"
  "equest\022)\n\006region\030\001 \002(\0132\031.hbase.pb.Region"
  "Specifier\022>\n\013family_path\030\002 \003(\0132).hbase.p"
  "b.BulkLoadHFileRequest.FamilyPath\022\026\n\016ass"
  "ign_seq_num\030\003 \001(\010\022+\n\010fs_token\030\004 \001(\0132\031.hb"
  "ase.pb.DelegationToken\022\022\n\nbulk_token\030\005 \001"
  "(\t\022\030\n\tcopy_file\030\006 \001(\010:\005false\032*\n\nFamilyPa"
  "th\022\016\n\006family\030\001 \002(\014\022\014\n\004path\030\002 \002(\t\"\'\n\025Bulk"
  "LoadHFileResponse\022\016\n\006loaded\030\001 \002(\010\"V\n\017Del"
  "egationToken\022\022\n\nidentifier\030\001 \001(\014\022\020\n\010pass"
  "word\030\002 \001(\014\022\014\n\004kind\030\003 \001(\t\022\017\n\007service\030\004 \001("
  "\t\"l\n\026PrepareBulkLoadRequest\022\'\n\ntable_nam"
  "e\030\001 \002(\0132\023.hbase.pb.TableName\022)\n\006region\030\002"
  " \001(\0132\031.hbase.pb.RegionSpecifier\"-\n\027Prepa"
  "reBulkLoadResponse\022\022\n\nbulk_token\030\001 \002(\t\"W"
  "\n\026CleanupBulkLoadRequest\022\022\n\nbulk_token\030\001"
  " \002(\t\022)\n\006region\030\002 \001(\0132\031.hbase.pb.RegionSp"
  "ecifier\"\031\n\027CleanupBulkLoadResponse\"a\n\026Co"
  "processorServiceCall\022\013\n\003row\030\001 \002(\014\022\024\n\014ser"
  "vice_name\030\002 \002(\t\022\023\n\013method_name\030\003 \002(\t\022\017\n\007"
  "request\030\004 \002(\014\"B\n\030CoprocessorServiceResul"
  "t\022&\n\005value\030\001 \001(\0132\027.hbase.pb.NameBytesPai"
  "r\"v\n\031CoprocessorServiceRequest\022)\n\006region"
  "\030\001 \002(\0132\031.hbase.pb.RegionSpecifier\022.\n\004cal"
  "l\030\002 \002(\0132 .hbase.pb.CoprocessorServiceCal"
  "l\"o\n\032CoprocessorServiceResponse\022)\n\006regio"
  "n\030\001 \002(\0132\031.hbase.pb.RegionSpecifier\022&\n\005va"
  "lue\030\002 \002(\0132\027.hbase.pb.NameBytesPair\"\226\001\n\006A"
  "ction\022\r\n\005index\030\001 \001(\r\022)\n\010mutation\030\002 \001(\0132\027"
  ".hbase.pb.MutationProto\022\032\n\003get\030\003 \001(\0132\r.h"
  "base.pb.Get\0226\n\014service_call\030\004 \001(\0132 .hbas"
  "e.pb.CoprocessorServiceCall\"k\n\014RegionAct"
  "ion\022)\n\006region\030\001 \002(\0132\031.hbase.pb.RegionSpe"
  "cifier\022\016\n\006atomic\030\002 \001(\010\022 \n\006action\030\003 \003(\0132\020"
  ".hbase.pb.Action\"c\n\017RegionLoadStats\022\027\n\014m"
  "emStoreLoad\030\001 \001(\005:\0010\022\030\n\rheapOccupancy\030\002 "
  "\001(\005:\0010\022\035\n\022compactionPressure\030\003 \001(\005:\0010\"j\n"
  "\024MultiRegionLoadStats\022)\n\006region\030\001 \003(\0132\031."
  "hbase.pb.RegionSpecifier\022\'\n\004stat\030\002 \003(\0132\031"
  ".hbase.pb.RegionLoadStats\"\336\001\n\021ResultOrEx"
  "ception\022\r\n\005index\030\001 \001(\r\022 \n\006result\030\002 \001(\0132\020"
  ".hbase.pb.Result\022*\n\texception\030\003 \001(\0132\027.hb"
  "ase.pb.NameBytesPair\022:\n\016service_result\030\004"
  " \001(\0132\".hbase.pb.CoprocessorServiceResult"
  "\0220\n\tloadStats\030\005 \001(\0132\031.hbase.pb.RegionLoa"
  "dStatsB\002\030\001\"x\n\022RegionActionResult\0226\n\021resu"
  "ltOrException\030\001 \003(\0132\033.hbase.pb.ResultOrE"
  "xception\022*\n\texception\030\002 \001(\0132\027.hbase.pb.N"
  "ameBytesPair\"x\n\014MultiRequest\022,\n\014regionAc"
  "tion\030\001 \003(\0132\026.hbase.pb.RegionAction\022\022\n\nno"
  "nceGroup\030\002 \001(\004\022&\n\tcondition\030\003 \001(\0132\023.hbas"
  "e.pb.Condition\"\226\001\n\rMultiResponse\0228\n\022regi"
  "onActionResult\030\001 \003(\0132\034.hbase.pb.RegionAc"
  "tionResult\022\021\n\tprocessed\030\002 \001(\010\0228\n\020regionS"
  "tatistics\030\003 \001(\0132\036.hbase.pb.MultiRegionLo"
  "adStats*\'\n\013Consistency\022\n\n\006STRONG\020\000\022\014\n\010TI"
  "MELINE\020\0012\263\005\n\rClientService\0222\n\003Get\022\024.hbas"
  "e.pb.GetRequest\032\025.hbase.pb.GetResponse\022;"
  "\n\006Mutate\022\027.hbase.pb.MutateRequest\032\030.hbas"
  "e.pb.MutateResponse\0225\n\004Scan\022\025.hbase.pb.S"
  "canRequest\032\026.hbase.pb.ScanResponse\022P\n\rBu"
  "lkLoadHFile\022\036.hbase.pb.BulkLoadHFileRequ"
  "est\032\037.hbase.pb.BulkLoadHFileResponse\022V\n\017"
  "PrepareBulkLoad\022 .hbase.pb.PrepareBulkLo"
  "adRequest\032!.hbase.pb.PrepareBulkLoadResp"
  "onse\022V\n\017CleanupBulkLoad\022 .hbase.pb.Clean"
  "upBulkLoadRequest\032!.hbase.pb.CleanupBulk"
  "LoadResponse\022X\n\013ExecService\022#.hbase.pb.C"
  "oprocessorServiceRequest\032$.hbase.pb.Copr"
  "ocessorServiceResponse\022d\n\027ExecRegionServ"
  "erService\022#.hbase.pb.CoprocessorServiceR"
  "equest\032$.hbase.pb.CoprocessorServiceResp"
  "onse\0228\n\005Multi\022\026.hbase.pb.MultiRequest\032\027."
  "hbase.pb.MultiResponseBB\n*org.apache.had"
  "oop.hbase.protobuf.generatedB\014ClientProt"
  "osH\001\210\001\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Client_2eproto_deps[5] = {
  &::descriptor_table_Cell_2eproto,
  &::descriptor_table_Comparator_2eproto,
  &::descriptor_table_Filter_2eproto,
  &::descriptor_table_HBase_2eproto,
  &::descriptor_table_MapReduce_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Client_2eproto_sccs[37] = {
  &scc_info_Action_Client_2eproto.base,
  &scc_info_Authorizations_Client_2eproto.base,
  &scc_info_BulkLoadHFileRequest_Client_2eproto.base,
  &scc_info_BulkLoadHFileRequest_FamilyPath_Client_2eproto.base,
  &scc_info_BulkLoadHFileResponse_Client_2eproto.base,
  &scc_info_CellVisibility_Client_2eproto.base,
  &scc_info_CleanupBulkLoadRequest_Client_2eproto.base,
  &scc_info_CleanupBulkLoadResponse_Client_2eproto.base,
  &scc_info_Column_Client_2eproto.base,
  &scc_info_Condition_Client_2eproto.base,
  &scc_info_CoprocessorServiceCall_Client_2eproto.base,
  &scc_info_CoprocessorServiceRequest_Client_2eproto.base,
  &scc_info_CoprocessorServiceResponse_Client_2eproto.base,
  &scc_info_CoprocessorServiceResult_Client_2eproto.base,
  &scc_info_Cursor_Client_2eproto.base,
  &scc_info_DelegationToken_Client_2eproto.base,
  &scc_info_Get_Client_2eproto.base,
  &scc_info_GetRequest_Client_2eproto.base,
  &scc_info_GetResponse_Client_2eproto.base,
  &scc_info_MultiRegionLoadStats_Client_2eproto.base,
  &scc_info_MultiRequest_Client_2eproto.base,
  &scc_info_MultiResponse_Client_2eproto.base,
  &scc_info_MutateRequest_Client_2eproto.base,
  &scc_info_MutateResponse_Client_2eproto.base,
  &scc_info_MutationProto_Client_2eproto.base,
  &scc_info_MutationProto_ColumnValue_Client_2eproto.base,
  &scc_info_MutationProto_ColumnValue_QualifierValue_Client_2eproto.base,
  &scc_info_PrepareBulkLoadRequest_Client_2eproto.base,
  &scc_info_PrepareBulkLoadResponse_Client_2eproto.base,
  &scc_info_RegionAction_Client_2eproto.base,
  &scc_info_RegionActionResult_Client_2eproto.base,
  &scc_info_RegionLoadStats_Client_2eproto.base,
  &scc_info_Result_Client_2eproto.base,
  &scc_info_ResultOrException_Client_2eproto.base,
  &scc_info_Scan_Client_2eproto.base,
  &scc_info_ScanRequest_Client_2eproto.base,
  &scc_info_ScanResponse_Client_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Client_2eproto_once;
static bool descriptor_table_Client_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_2eproto = {
  &descriptor_table_Client_2eproto_initialized, descriptor_table_protodef_Client_2eproto, "Client.proto", 6770,
  &descriptor_table_Client_2eproto_once, descriptor_table_Client_2eproto_sccs, descriptor_table_Client_2eproto_deps, 37, 5,
  schemas, file_default_instances, TableStruct_Client_2eproto::offsets,
  file_level_metadata_Client_2eproto, 37, file_level_enum_descriptors_Client_2eproto, file_level_service_descriptors_Client_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Client_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Client_2eproto), true);
namespace hbase {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MutationProto_Durability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Client_2eproto);
  return file_level_enum_descriptors_Client_2eproto[0];
}
bool MutationProto_Durability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MutationProto_Durability MutationProto::USE_DEFAULT;
constexpr MutationProto_Durability MutationProto::SKIP_WAL;
constexpr MutationProto_Durability MutationProto::ASYNC_WAL;
constexpr MutationProto_Durability MutationProto::SYNC_WAL;
constexpr MutationProto_Durability MutationProto::FSYNC_WAL;
constexpr MutationProto_Durability MutationProto::Durability_MIN;
constexpr MutationProto_Durability MutationProto::Durability_MAX;
constexpr int MutationProto::Durability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MutationProto_MutationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Client_2eproto);
  return file_level_enum_descriptors_Client_2eproto[1];
}
bool MutationProto_MutationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MutationProto_MutationType MutationProto::APPEND;
constexpr MutationProto_MutationType MutationProto::INCREMENT;
constexpr MutationProto_MutationType MutationProto::PUT;
constexpr MutationProto_MutationType MutationProto::DELETE;
constexpr MutationProto_MutationType MutationProto::MutationType_MIN;
constexpr MutationProto_MutationType MutationProto::MutationType_MAX;
constexpr int MutationProto::MutationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MutationProto_DeleteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Client_2eproto);
  return file_level_enum_descriptors_Client_2eproto[2];
}
bool MutationProto_DeleteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MutationProto_DeleteType MutationProto::DELETE_ONE_VERSION;
constexpr MutationProto_DeleteType MutationProto::DELETE_MULTIPLE_VERSIONS;
constexpr MutationProto_DeleteType MutationProto::DELETE_FAMILY;
constexpr MutationProto_DeleteType MutationProto::DELETE_FAMILY_VERSION;
constexpr MutationProto_DeleteType MutationProto::DeleteType_MIN;
constexpr MutationProto_DeleteType MutationProto::DeleteType_MAX;
constexpr int MutationProto::DeleteType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scan_ReadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Client_2eproto);
  return file_level_enum_descriptors_Client_2eproto[3];
}
bool Scan_ReadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scan_ReadType Scan::DEFAULT;
constexpr Scan_ReadType Scan::STREAM;
constexpr Scan_ReadType Scan::PREAD;
constexpr Scan_ReadType Scan::ReadType_MIN;
constexpr Scan_ReadType Scan::ReadType_MAX;
constexpr int Scan::ReadType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Consistency_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Client_2eproto);
  return file_level_enum_descriptors_Client_2eproto[4];
}
bool Consistency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Authorizations::InitAsDefaultInstance() {
}
class Authorizations::_Internal {
 public:
  using HasBits = decltype(std::declval<Authorizations>()._has_bits_);
};

Authorizations::Authorizations()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Authorizations)
}
Authorizations::Authorizations(const Authorizations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      label_(from.label_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Authorizations)
}

void Authorizations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Authorizations_Client_2eproto.base);
}

Authorizations::~Authorizations() {
  // @@protoc_insertion_point(destructor:hbase.pb.Authorizations)
  SharedDtor();
}

void Authorizations::SharedDtor() {
}

void Authorizations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Authorizations& Authorizations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Authorizations_Client_2eproto.base);
  return *internal_default_instance();
}


void Authorizations::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Authorizations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Authorizations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_label(), ptr, ctx, "hbase.pb.Authorizations.label");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Authorizations::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Authorizations)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string label = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_label()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label(this->label_size() - 1).data(),
            static_cast<int>(this->label(this->label_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.Authorizations.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Authorizations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Authorizations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Authorizations::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Authorizations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string label = 1;
  for (int i = 0, n = this->label_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label(i).data(), static_cast<int>(this->label(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.Authorizations.label");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->label(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Authorizations)
}

::PROTOBUF_NAMESPACE_ID::uint8* Authorizations::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Authorizations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string label = 1;
  for (int i = 0, n = this->label_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label(i).data(), static_cast<int>(this->label(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.Authorizations.label");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->label(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Authorizations)
  return target;
}

size_t Authorizations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Authorizations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string label = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->label_size());
  for (int i = 0, n = this->label_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->label(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authorizations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Authorizations)
  GOOGLE_DCHECK_NE(&from, this);
  const Authorizations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Authorizations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Authorizations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Authorizations)
    MergeFrom(*source);
  }
}

void Authorizations::MergeFrom(const Authorizations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Authorizations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_.MergeFrom(from.label_);
}

void Authorizations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Authorizations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authorizations::CopyFrom(const Authorizations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Authorizations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authorizations::IsInitialized() const {
  return true;
}

void Authorizations::InternalSwap(Authorizations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.InternalSwap(CastToBase(&other->label_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Authorizations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CellVisibility::InitAsDefaultInstance() {
}
class CellVisibility::_Internal {
 public:
  using HasBits = decltype(std::declval<CellVisibility>()._has_bits_);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CellVisibility::CellVisibility()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CellVisibility)
}
CellVisibility::CellVisibility(const CellVisibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_expression()) {
    expression_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CellVisibility)
}

void CellVisibility::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CellVisibility_Client_2eproto.base);
  expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CellVisibility::~CellVisibility() {
  // @@protoc_insertion_point(destructor:hbase.pb.CellVisibility)
  SharedDtor();
}

void CellVisibility::SharedDtor() {
  expression_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CellVisibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CellVisibility& CellVisibility::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CellVisibility_Client_2eproto.base);
  return *internal_default_instance();
}


void CellVisibility::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CellVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    expression_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CellVisibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_expression(), ptr, ctx, "hbase.pb.CellVisibility.expression");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CellVisibility::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CellVisibility)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string expression = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_expression()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->expression().data(), static_cast<int>(this->expression().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.CellVisibility.expression");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CellVisibility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CellVisibility)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CellVisibility::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CellVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string expression = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expression().data(), static_cast<int>(this->expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CellVisibility.expression");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->expression(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CellVisibility)
}

::PROTOBUF_NAMESPACE_ID::uint8* CellVisibility::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CellVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string expression = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expression().data(), static_cast<int>(this->expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CellVisibility.expression");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->expression(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CellVisibility)
  return target;
}

size_t CellVisibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CellVisibility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string expression = 1;
  if (has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->expression());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellVisibility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CellVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  const CellVisibility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellVisibility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CellVisibility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CellVisibility)
    MergeFrom(*source);
  }
}

void CellVisibility::MergeFrom(const CellVisibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CellVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expression()) {
    _has_bits_[0] |= 0x00000001u;
    expression_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
}

void CellVisibility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CellVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellVisibility::CopyFrom(const CellVisibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CellVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellVisibility::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CellVisibility::InternalSwap(CellVisibility* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  expression_.Swap(&other->expression_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CellVisibility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Column::InitAsDefaultInstance() {
}
class Column::_Internal {
 public:
  using HasBits = decltype(std::declval<Column>()._has_bits_);
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Column::Column()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Column)
}
Column::Column(const Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      qualifier_(from.qualifier_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family()) {
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Column)
}

void Column::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Column_Client_2eproto.base);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:hbase.pb.Column)
  SharedDtor();
}

void Column::SharedDtor() {
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Column& Column::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Column_Client_2eproto.base);
  return *internal_default_instance();
}


void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qualifier_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    family_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes qualifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_qualifier(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Column::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Column)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes qualifier = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_qualifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Column)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Column::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->family(), output);
  }

  // repeated bytes qualifier = 2;
  for (int i = 0, n = this->qualifier_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->qualifier(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Column)
}

::PROTOBUF_NAMESPACE_ID::uint8* Column::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->family(), target);
  }

  // repeated bytes qualifier = 2;
  for (int i = 0, n = this->qualifier_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->qualifier(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Column)
  return target;
}

size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Column)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes family = 1;
  if (has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes qualifier = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->qualifier_size());
  for (int i = 0, n = this->qualifier_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->qualifier(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Column::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Column)
  GOOGLE_DCHECK_NE(&from, this);
  const Column* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Column>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Column)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Column)
    MergeFrom(*source);
  }
}

void Column::MergeFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qualifier_.MergeFrom(from.qualifier_);
  if (from.has_family()) {
    _has_bits_[0] |= 0x00000001u;
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
}

void Column::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Column::InternalSwap(Column* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  qualifier_.InternalSwap(CastToBase(&other->qualifier_));
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Column::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Get::InitAsDefaultInstance() {
  ::hbase::pb::_Get_default_instance_._instance.get_mutable()->filter_ = const_cast< ::hbase::pb::Filter*>(
      ::hbase::pb::Filter::internal_default_instance());
  ::hbase::pb::_Get_default_instance_._instance.get_mutable()->time_range_ = const_cast< ::hbase::pb::TimeRange*>(
      ::hbase::pb::TimeRange::internal_default_instance());
}
class Get::_Internal {
 public:
  using HasBits = decltype(std::declval<Get>()._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::Filter& filter(const Get* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::TimeRange& time_range(const Get* msg);
  static void set_has_time_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_versions(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cache_blocks(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_store_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_store_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_existence_only(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_closest_row_before(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_consistency(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_load_column_families_on_demand(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hbase::pb::Filter&
Get::_Internal::filter(const Get* msg) {
  return *msg->filter_;
}
const ::hbase::pb::TimeRange&
Get::_Internal::time_range(const Get* msg) {
  return *msg->time_range_;
}
void Get::clear_attribute() {
  attribute_.Clear();
}
void Get::clear_filter() {
  if (filter_ != nullptr) filter_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Get::clear_time_range() {
  if (time_range_ != nullptr) time_range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Get::clear_cf_time_range() {
  cf_time_range_.Clear();
}
Get::Get()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Get)
}
Get::Get(const Get& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      column_(from.column_),
      attribute_(from.attribute_),
      cf_time_range_(from.cf_time_range_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_row()) {
    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  if (from.has_filter()) {
    filter_ = new ::hbase::pb::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from.has_time_range()) {
    time_range_ = new ::hbase::pb::TimeRange(*from.time_range_);
  } else {
    time_range_ = nullptr;
  }
  ::memcpy(&store_limit_, &from.store_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_blocks_) -
    reinterpret_cast<char*>(&store_limit_)) + sizeof(cache_blocks_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Get)
}

void Get::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Get_Client_2eproto.base);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consistency_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(consistency_));
  max_versions_ = 1u;
  cache_blocks_ = true;
}

Get::~Get() {
  // @@protoc_insertion_point(destructor:hbase.pb.Get)
  SharedDtor();
}

void Get::SharedDtor() {
  row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete time_range_;
}

void Get::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Get& Get::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Get_Client_2eproto.base);
  return *internal_default_instance();
}


void Get::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Get)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_.Clear();
  attribute_.Clear();
  cf_time_range_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      row_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(filter_ != nullptr);
      filter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(time_range_ != nullptr);
      time_range_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&store_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&load_column_families_on_demand_) -
        reinterpret_cast<char*>(&store_limit_)) + sizeof(load_column_families_on_demand_));
  }
  if (cached_has_bits & 0x00000700u) {
    consistency_ = 0;
    max_versions_ = 1u;
    cache_blocks_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Get::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.Column column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.NameBytesPair attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Filter filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.TimeRange time_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_time_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_versions = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_versions(&has_bits);
          max_versions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cache_blocks = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cache_blocks(&has_bits);
          cache_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 store_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_store_limit(&has_bits);
          store_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 store_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_store_offset(&has_bits);
          store_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool existence_only = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_existence_only(&has_bits);
          existence_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool closest_row_before = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_closest_row_before(&has_bits);
          closest_row_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Consistency consistency = 12 [default = STRONG];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::Consistency_IsValid(val))) {
            set_consistency(static_cast<::hbase::pb::Consistency>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cf_time_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // optional bool load_column_families_on_demand = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_load_column_families_on_demand(&has_bits);
          load_column_families_on_demand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Get::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Get)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes row = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.Column column = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.NameBytesPair attribute = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Filter filter = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.TimeRange time_range = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_versions = 6 [default = 1];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_max_versions(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_versions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cache_blocks = 7 [default = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_cache_blocks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 store_limit = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_store_limit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 store_offset = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_store_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool existence_only = 10 [default = false];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_existence_only(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &existence_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool closest_row_before = 11 [default = false];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_closest_row_before(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closest_row_before_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Consistency consistency = 12 [default = STRONG];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::Consistency_IsValid(value)) {
            set_consistency(static_cast< ::hbase::pb::Consistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cf_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool load_column_families_on_demand = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_load_column_families_on_demand(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &load_column_families_on_demand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Get)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Get)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Get::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Get)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row(), output);
  }

  // repeated .hbase.pb.Column column = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->column(static_cast<int>(i)),
      output);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->attribute(static_cast<int>(i)),
      output);
  }

  // optional .hbase.pb.Filter filter = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::filter(this), output);
  }

  // optional .hbase.pb.TimeRange time_range = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::time_range(this), output);
  }

  // optional uint32 max_versions = 6 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->max_versions(), output);
  }

  // optional bool cache_blocks = 7 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->cache_blocks(), output);
  }

  // optional uint32 store_limit = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->store_limit(), output);
  }

  // optional uint32 store_offset = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->store_offset(), output);
  }

  // optional bool existence_only = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->existence_only(), output);
  }

  // optional bool closest_row_before = 11 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->closest_row_before(), output);
  }

  // optional .hbase.pb.Consistency consistency = 12 [default = STRONG];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->consistency(), output);
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cf_time_range_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->cf_time_range(static_cast<int>(i)),
      output);
  }

  // optional bool load_column_families_on_demand = 14;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->load_column_families_on_demand(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Get)
}

::PROTOBUF_NAMESPACE_ID::uint8* Get::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Get)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->row(), target);
  }

  // repeated .hbase.pb.Column column = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->column(static_cast<int>(i)), target);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->attribute(static_cast<int>(i)), target);
  }

  // optional .hbase.pb.Filter filter = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::filter(this), target);
  }

  // optional .hbase.pb.TimeRange time_range = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::time_range(this), target);
  }

  // optional uint32 max_versions = 6 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_versions(), target);
  }

  // optional bool cache_blocks = 7 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->cache_blocks(), target);
  }

  // optional uint32 store_limit = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->store_limit(), target);
  }

  // optional uint32 store_offset = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->store_offset(), target);
  }

  // optional bool existence_only = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->existence_only(), target);
  }

  // optional bool closest_row_before = 11 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->closest_row_before(), target);
  }

  // optional .hbase.pb.Consistency consistency = 12 [default = STRONG];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->consistency(), target);
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cf_time_range_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->cf_time_range(static_cast<int>(i)), target);
  }

  // optional bool load_column_families_on_demand = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->load_column_families_on_demand(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Get)
  return target;
}

size_t Get::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Get)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes row = 1;
  if (has_row()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->row());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.Column column = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->column_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->column(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.NameBytesPair attribute = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->cf_time_range_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cf_time_range(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .hbase.pb.Filter filter = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_);
    }

    // optional .hbase.pb.TimeRange time_range = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_range_);
    }

    // optional uint32 store_limit = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->store_limit());
    }

    // optional uint32 store_offset = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->store_offset());
    }

    // optional bool existence_only = 10 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool closest_row_before = 11 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool load_column_families_on_demand = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .hbase.pb.Consistency consistency = 12 [default = STRONG];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->consistency());
    }

    // optional uint32 max_versions = 6 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_versions());
    }

    // optional bool cache_blocks = 7 [default = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Get::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Get)
  GOOGLE_DCHECK_NE(&from, this);
  const Get* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Get>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Get)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Get)
    MergeFrom(*source);
  }
}

void Get::MergeFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Get)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_.MergeFrom(from.column_);
  attribute_.MergeFrom(from.attribute_);
  cf_time_range_.MergeFrom(from.cf_time_range_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_filter()->::hbase::pb::Filter::MergeFrom(from.filter());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_time_range()->::hbase::pb::TimeRange::MergeFrom(from.time_range());
    }
    if (cached_has_bits & 0x00000008u) {
      store_limit_ = from.store_limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      store_offset_ = from.store_offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      existence_only_ = from.existence_only_;
    }
    if (cached_has_bits & 0x00000040u) {
      closest_row_before_ = from.closest_row_before_;
    }
    if (cached_has_bits & 0x00000080u) {
      load_column_families_on_demand_ = from.load_column_families_on_demand_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      consistency_ = from.consistency_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_versions_ = from.max_versions_;
    }
    if (cached_has_bits & 0x00000400u) {
      cache_blocks_ = from.cache_blocks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Get::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get::CopyFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->column())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->attribute())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->cf_time_range())) return false;
  if (has_filter()) {
    if (!this->filter_->IsInitialized()) return false;
  }
  return true;
}

void Get::InternalSwap(Get* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&column_)->InternalSwap(CastToBase(&other->column_));
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
  CastToBase(&cf_time_range_)->InternalSwap(CastToBase(&other->cf_time_range_));
  row_.Swap(&other->row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filter_, other->filter_);
  swap(time_range_, other->time_range_);
  swap(store_limit_, other->store_limit_);
  swap(store_offset_, other->store_offset_);
  swap(existence_only_, other->existence_only_);
  swap(closest_row_before_, other->closest_row_before_);
  swap(load_column_families_on_demand_, other->load_column_families_on_demand_);
  swap(consistency_, other->consistency_);
  swap(max_versions_, other->max_versions_);
  swap(cache_blocks_, other->cache_blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Get::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Result::InitAsDefaultInstance() {
}
class Result::_Internal {
 public:
  using HasBits = decltype(std::declval<Result>()._has_bits_);
  static void set_has_associated_cell_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_partial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void Result::clear_cell() {
  cell_.Clear();
}
Result::Result()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cell_(from.cell_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&associated_cell_count_, &from.associated_cell_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&partial_) -
    reinterpret_cast<char*>(&associated_cell_count_)) + sizeof(partial_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Result)
}

void Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Result_Client_2eproto.base);
  ::memset(&associated_cell_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partial_) -
      reinterpret_cast<char*>(&associated_cell_count_)) + sizeof(partial_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:hbase.pb.Result)
  SharedDtor();
}

void Result::SharedDtor() {
}

void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Result& Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Result_Client_2eproto.base);
  return *internal_default_instance();
}


void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&associated_cell_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&partial_) -
        reinterpret_cast<char*>(&associated_cell_count_)) + sizeof(partial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.Cell cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int32 associated_cell_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_associated_cell_count(&has_bits);
          associated_cell_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exists = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_exists(&has_bits);
          exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stale = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stale(&has_bits);
          stale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool partial = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_partial(&has_bits);
          partial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Result::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Result)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.Cell cell = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 associated_cell_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_associated_cell_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &associated_cell_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exists = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_exists(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stale = 4 [default = false];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool partial = 5 [default = false];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_partial(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &partial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Result::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.Cell cell = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cell_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->cell(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 associated_cell_count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->associated_cell_count(), output);
  }

  // optional bool exists = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->exists(), output);
  }

  // optional bool stale = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->stale(), output);
  }

  // optional bool partial = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->partial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Result)
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.Cell cell = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cell_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cell(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 associated_cell_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->associated_cell_count(), target);
  }

  // optional bool exists = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->exists(), target);
  }

  // optional bool stale = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->stale(), target);
  }

  // optional bool partial = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->partial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.Cell cell = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cell_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cell(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 associated_cell_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->associated_cell_count());
    }

    // optional bool exists = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool stale = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool partial = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_.MergeFrom(from.cell_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      associated_cell_count_ = from.associated_cell_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      exists_ = from.exists_;
    }
    if (cached_has_bits & 0x00000004u) {
      stale_ = from.stale_;
    }
    if (cached_has_bits & 0x00000008u) {
      partial_ = from.partial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cell_)->InternalSwap(CastToBase(&other->cell_));
  swap(associated_cell_count_, other->associated_cell_count_);
  swap(exists_, other->exists_);
  swap(stale_, other->stale_);
  swap(partial_, other->partial_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRequest::InitAsDefaultInstance() {
  ::hbase::pb::_GetRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
  ::hbase::pb::_GetRequest_default_instance_._instance.get_mutable()->get_ = const_cast< ::hbase::pb::Get*>(
      ::hbase::pb::Get::internal_default_instance());
}
class GetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const GetRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::Get& get(const GetRequest* msg);
  static void set_has_get(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionSpecifier&
GetRequest::_Internal::region(const GetRequest* msg) {
  return *msg->region_;
}
const ::hbase::pb::Get&
GetRequest::_Internal::get(const GetRequest* msg) {
  return *msg->get_;
}
void GetRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetRequest::GetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_get()) {
    get_ = new ::hbase::pb::Get(*from.get_);
  } else {
    get_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetRequest)
}

void GetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRequest_Client_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_) -
      reinterpret_cast<char*>(&region_)) + sizeof(get_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete get_;
}

void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRequest_Client_2eproto.base);
  return *internal_default_instance();
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_ != nullptr);
      get_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.Get get = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.Get get = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // required .hbase.pb.Get get = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::get(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // required .hbase.pb.Get get = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::get(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetRequest)
  return target;
}

size_t GetRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.GetRequest)
  size_t total_size = 0;

  if (has_region()) {
    // required .hbase.pb.RegionSpecifier region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  if (has_get()) {
    // required .hbase.pb.Get get = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_);
  }

  return total_size;
}
size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .hbase.pb.RegionSpecifier region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);

    // required .hbase.pb.Get get = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_get()->::hbase::pb::Get::MergeFrom(from.get());
    }
  }
}

void GetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  if (has_get()) {
    if (!this->get_->IsInitialized()) return false;
  }
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_, other->region_);
  swap(get_, other->get_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetResponse::InitAsDefaultInstance() {
  ::hbase::pb::_GetResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::hbase::pb::Result*>(
      ::hbase::pb::Result::internal_default_instance());
}
class GetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetResponse>()._has_bits_);
  static const ::hbase::pb::Result& result(const GetResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::Result&
GetResponse::_Internal::result(const GetResponse* msg) {
  return *msg->result_;
}
GetResponse::GetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::hbase::pb::Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetResponse)
}

void GetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResponse_Client_2eproto.base);
  result_ = nullptr;
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResponse_Client_2eproto.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != nullptr);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hbase.pb.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.Result result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hbase.pb.Result result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::hbase::pb::Result::MergeFrom(from.result());
  }
}

void GetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
  ::hbase::pb::_Condition_default_instance_._instance.get_mutable()->comparator_ = const_cast< ::hbase::pb::Comparator*>(
      ::hbase::pb::Comparator::internal_default_instance());
  ::hbase::pb::_Condition_default_instance_._instance.get_mutable()->time_range_ = const_cast< ::hbase::pb::TimeRange*>(
      ::hbase::pb::TimeRange::internal_default_instance());
}
class Condition::_Internal {
 public:
  using HasBits = decltype(std::declval<Condition>()._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compare_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::hbase::pb::Comparator& comparator(const Condition* msg);
  static void set_has_comparator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hbase::pb::TimeRange& time_range(const Condition* msg);
  static void set_has_time_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hbase::pb::Comparator&
Condition::_Internal::comparator(const Condition* msg) {
  return *msg->comparator_;
}
const ::hbase::pb::TimeRange&
Condition::_Internal::time_range(const Condition* msg) {
  return *msg->time_range_;
}
void Condition::clear_comparator() {
  if (comparator_ != nullptr) comparator_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Condition::clear_time_range() {
  if (time_range_ != nullptr) time_range_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Condition::Condition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_row()) {
    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family()) {
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_qualifier()) {
    qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qualifier_);
  }
  if (from.has_comparator()) {
    comparator_ = new ::hbase::pb::Comparator(*from.comparator_);
  } else {
    comparator_ = nullptr;
  }
  if (from.has_time_range()) {
    time_range_ = new ::hbase::pb::TimeRange(*from.time_range_);
  } else {
    time_range_ = nullptr;
  }
  compare_type_ = from.compare_type_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Condition)
}

void Condition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Condition_Client_2eproto.base);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&comparator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_type_) -
      reinterpret_cast<char*>(&comparator_)) + sizeof(compare_type_));
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:hbase.pb.Condition)
  SharedDtor();
}

void Condition::SharedDtor() {
  row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qualifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete comparator_;
  if (this != internal_default_instance()) delete time_range_;
}

void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Condition_Client_2eproto.base);
  return *internal_default_instance();
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      row_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      qualifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(comparator_ != nullptr);
      comparator_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(time_range_ != nullptr);
      time_range_->Clear();
    }
  }
  compare_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes qualifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_qualifier(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.CompareType compare_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::CompareType_IsValid(val))) {
            set_compare_type(static_cast<::hbase::pb::CompareType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.Comparator comparator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_comparator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.TimeRange time_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_time_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Condition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Condition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes row = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes family = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes qualifier = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.CompareType compare_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::CompareType_IsValid(value)) {
            set_compare_type(static_cast< ::hbase::pb::CompareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.Comparator comparator = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_comparator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.TimeRange time_range = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Condition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Condition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row(), output);
  }

  // required bytes family = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->family(), output);
  }

  // required bytes qualifier = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->qualifier(), output);
  }

  // required .hbase.pb.CompareType compare_type = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->compare_type(), output);
  }

  // required .hbase.pb.Comparator comparator = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::comparator(this), output);
  }

  // optional .hbase.pb.TimeRange time_range = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::time_range(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Condition)
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->row(), target);
  }

  // required bytes family = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->family(), target);
  }

  // required bytes qualifier = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->qualifier(), target);
  }

  // required .hbase.pb.CompareType compare_type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->compare_type(), target);
  }

  // required .hbase.pb.Comparator comparator = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::comparator(this), target);
  }

  // optional .hbase.pb.TimeRange time_range = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::time_range(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Condition)
  return target;
}

size_t Condition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.Condition)
  size_t total_size = 0;

  if (has_row()) {
    // required bytes row = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->row());
  }

  if (has_family()) {
    // required bytes family = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());
  }

  if (has_qualifier()) {
    // required bytes qualifier = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->qualifier());
  }

  if (has_comparator()) {
    // required .hbase.pb.Comparator comparator = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparator_);
  }

  if (has_compare_type()) {
    // required .hbase.pb.CompareType compare_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare_type());
  }

  return total_size;
}
size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Condition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required bytes row = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->row());

    // required bytes family = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());

    // required bytes qualifier = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->qualifier());

    // required .hbase.pb.Comparator comparator = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparator_);

    // required .hbase.pb.CompareType compare_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hbase.pb.TimeRange time_range = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_range_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qualifier_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_comparator()->::hbase::pb::Comparator::MergeFrom(from.comparator());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_time_range()->::hbase::pb::TimeRange::MergeFrom(from.time_range());
    }
    if (cached_has_bits & 0x00000020u) {
      compare_type_ = from.compare_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  if (has_comparator()) {
    if (!this->comparator_->IsInitialized()) return false;
  }
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_.Swap(&other->row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  qualifier_.Swap(&other->qualifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(comparator_, other->comparator_);
  swap(time_range_, other->time_range_);
  swap(compare_type_, other->compare_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutationProto_ColumnValue_QualifierValue::InitAsDefaultInstance() {
}
class MutationProto_ColumnValue_QualifierValue::_Internal {
 public:
  using HasBits = decltype(std::declval<MutationProto_ColumnValue_QualifierValue>()._has_bits_);
  static void set_has_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_delete_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MutationProto_ColumnValue_QualifierValue::MutationProto_ColumnValue_QualifierValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MutationProto.ColumnValue.QualifierValue)
}
MutationProto_ColumnValue_QualifierValue::MutationProto_ColumnValue_QualifierValue(const MutationProto_ColumnValue_QualifierValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_qualifier()) {
    qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qualifier_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tags()) {
    tags_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&delete_type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(delete_type_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MutationProto.ColumnValue.QualifierValue)
}

void MutationProto_ColumnValue_QualifierValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutationProto_ColumnValue_QualifierValue_Client_2eproto.base);
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(delete_type_));
}

MutationProto_ColumnValue_QualifierValue::~MutationProto_ColumnValue_QualifierValue() {
  // @@protoc_insertion_point(destructor:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  SharedDtor();
}

void MutationProto_ColumnValue_QualifierValue::SharedDtor() {
  qualifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MutationProto_ColumnValue_QualifierValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutationProto_ColumnValue_QualifierValue& MutationProto_ColumnValue_QualifierValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutationProto_ColumnValue_QualifierValue_Client_2eproto.base);
  return *internal_default_instance();
}


void MutationProto_ColumnValue_QualifierValue::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      qualifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      tags_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delete_type_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(delete_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MutationProto_ColumnValue_QualifierValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes qualifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_qualifier(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.MutationProto.DeleteType delete_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::MutationProto_DeleteType_IsValid(val))) {
            set_delete_type(static_cast<::hbase::pb::MutationProto_DeleteType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_tags(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MutationProto_ColumnValue_QualifierValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes qualifier = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.MutationProto.DeleteType delete_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::MutationProto_DeleteType_IsValid(value)) {
            set_delete_type(static_cast< ::hbase::pb::MutationProto_DeleteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tags = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MutationProto_ColumnValue_QualifierValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes qualifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->qualifier(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional .hbase.pb.MutationProto.DeleteType delete_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->delete_type(), output);
  }

  // optional bytes tags = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->tags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MutationProto.ColumnValue.QualifierValue)
}

::PROTOBUF_NAMESPACE_ID::uint8* MutationProto_ColumnValue_QualifierValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes qualifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->qualifier(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional .hbase.pb.MutationProto.DeleteType delete_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->delete_type(), target);
  }

  // optional bytes tags = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->tags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  return target;
}

size_t MutationProto_ColumnValue_QualifierValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes qualifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->qualifier());
    }

    // optional bytes value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional bytes tags = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->tags());
    }

    // optional uint64 timestamp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .hbase.pb.MutationProto.DeleteType delete_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->delete_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutationProto_ColumnValue_QualifierValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  GOOGLE_DCHECK_NE(&from, this);
  const MutationProto_ColumnValue_QualifierValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutationProto_ColumnValue_QualifierValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MutationProto.ColumnValue.QualifierValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MutationProto.ColumnValue.QualifierValue)
    MergeFrom(*source);
  }
}

void MutationProto_ColumnValue_QualifierValue::MergeFrom(const MutationProto_ColumnValue_QualifierValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qualifier_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      tags_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tags_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      delete_type_ = from.delete_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MutationProto_ColumnValue_QualifierValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationProto_ColumnValue_QualifierValue::CopyFrom(const MutationProto_ColumnValue_QualifierValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MutationProto.ColumnValue.QualifierValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationProto_ColumnValue_QualifierValue::IsInitialized() const {
  return true;
}

void MutationProto_ColumnValue_QualifierValue::InternalSwap(MutationProto_ColumnValue_QualifierValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  qualifier_.Swap(&other->qualifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tags_.Swap(&other->tags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(delete_type_, other->delete_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutationProto_ColumnValue_QualifierValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutationProto_ColumnValue::InitAsDefaultInstance() {
}
class MutationProto_ColumnValue::_Internal {
 public:
  using HasBits = decltype(std::declval<MutationProto_ColumnValue>()._has_bits_);
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MutationProto_ColumnValue::MutationProto_ColumnValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MutationProto.ColumnValue)
}
MutationProto_ColumnValue::MutationProto_ColumnValue(const MutationProto_ColumnValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      qualifier_value_(from.qualifier_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family()) {
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MutationProto.ColumnValue)
}

void MutationProto_ColumnValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutationProto_ColumnValue_Client_2eproto.base);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MutationProto_ColumnValue::~MutationProto_ColumnValue() {
  // @@protoc_insertion_point(destructor:hbase.pb.MutationProto.ColumnValue)
  SharedDtor();
}

void MutationProto_ColumnValue::SharedDtor() {
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MutationProto_ColumnValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutationProto_ColumnValue& MutationProto_ColumnValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutationProto_ColumnValue_Client_2eproto.base);
  return *internal_default_instance();
}


void MutationProto_ColumnValue::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MutationProto.ColumnValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qualifier_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    family_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MutationProto_ColumnValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.MutationProto.ColumnValue.QualifierValue qualifier_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_qualifier_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MutationProto_ColumnValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MutationProto.ColumnValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.MutationProto.ColumnValue.QualifierValue qualifier_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_qualifier_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MutationProto.ColumnValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MutationProto.ColumnValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MutationProto_ColumnValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MutationProto.ColumnValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->family(), output);
  }

  // repeated .hbase.pb.MutationProto.ColumnValue.QualifierValue qualifier_value = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qualifier_value_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->qualifier_value(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MutationProto.ColumnValue)
}

::PROTOBUF_NAMESPACE_ID::uint8* MutationProto_ColumnValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MutationProto.ColumnValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->family(), target);
  }

  // repeated .hbase.pb.MutationProto.ColumnValue.QualifierValue qualifier_value = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qualifier_value_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->qualifier_value(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MutationProto.ColumnValue)
  return target;
}

size_t MutationProto_ColumnValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MutationProto.ColumnValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes family = 1;
  if (has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.MutationProto.ColumnValue.QualifierValue qualifier_value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->qualifier_value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->qualifier_value(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutationProto_ColumnValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MutationProto.ColumnValue)
  GOOGLE_DCHECK_NE(&from, this);
  const MutationProto_ColumnValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutationProto_ColumnValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MutationProto.ColumnValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MutationProto.ColumnValue)
    MergeFrom(*source);
  }
}

void MutationProto_ColumnValue::MergeFrom(const MutationProto_ColumnValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MutationProto.ColumnValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qualifier_value_.MergeFrom(from.qualifier_value_);
  if (from.has_family()) {
    _has_bits_[0] |= 0x00000001u;
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
}

void MutationProto_ColumnValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MutationProto.ColumnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationProto_ColumnValue::CopyFrom(const MutationProto_ColumnValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MutationProto.ColumnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationProto_ColumnValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MutationProto_ColumnValue::InternalSwap(MutationProto_ColumnValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&qualifier_value_)->InternalSwap(CastToBase(&other->qualifier_value_));
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MutationProto_ColumnValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutationProto::InitAsDefaultInstance() {
  ::hbase::pb::_MutationProto_default_instance_._instance.get_mutable()->time_range_ = const_cast< ::hbase::pb::TimeRange*>(
      ::hbase::pb::TimeRange::internal_default_instance());
}
class MutationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MutationProto>()._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mutate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_durability(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hbase::pb::TimeRange& time_range(const MutationProto* msg);
  static void set_has_time_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_associated_cell_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::hbase::pb::TimeRange&
MutationProto::_Internal::time_range(const MutationProto* msg) {
  return *msg->time_range_;
}
void MutationProto::clear_attribute() {
  attribute_.Clear();
}
void MutationProto::clear_time_range() {
  if (time_range_ != nullptr) time_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MutationProto::MutationProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MutationProto)
}
MutationProto::MutationProto(const MutationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      column_value_(from.column_value_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_row()) {
    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  if (from.has_time_range()) {
    time_range_ = new ::hbase::pb::TimeRange(*from.time_range_);
  } else {
    time_range_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&associated_cell_count_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(associated_cell_count_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MutationProto)
}

void MutationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutationProto_Client_2eproto.base);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associated_cell_count_) -
      reinterpret_cast<char*>(&time_range_)) + sizeof(associated_cell_count_));
}

MutationProto::~MutationProto() {
  // @@protoc_insertion_point(destructor:hbase.pb.MutationProto)
  SharedDtor();
}

void MutationProto::SharedDtor() {
  row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_range_;
}

void MutationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutationProto& MutationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutationProto_Client_2eproto.base);
  return *internal_default_instance();
}


void MutationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MutationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_value_.Clear();
  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      row_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(time_range_ != nullptr);
      time_range_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&associated_cell_count_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(associated_cell_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MutationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.MutationProto.MutationType mutate_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::MutationProto_MutationType_IsValid(val))) {
            set_mutate_type(static_cast<::hbase::pb::MutationProto_MutationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.MutationProto.ColumnValue column_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_column_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.NameBytesPair attribute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.MutationProto.Durability durability = 6 [default = USE_DEFAULT];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::MutationProto_Durability_IsValid(val))) {
            set_durability(static_cast<::hbase::pb::MutationProto_Durability>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.TimeRange time_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_time_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 associated_cell_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_associated_cell_count(&has_bits);
          associated_cell_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nonce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_nonce(&has_bits);
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MutationProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MutationProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes row = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.MutationProto.MutationType mutate_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::MutationProto_MutationType_IsValid(value)) {
            set_mutate_type(static_cast< ::hbase::pb::MutationProto_MutationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.MutationProto.ColumnValue column_value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_column_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.NameBytesPair attribute = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.MutationProto.Durability durability = 6 [default = USE_DEFAULT];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::MutationProto_Durability_IsValid(value)) {
            set_durability(static_cast< ::hbase::pb::MutationProto_Durability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.TimeRange time_range = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 associated_cell_count = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_associated_cell_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &associated_cell_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nonce = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_nonce(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MutationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MutationProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MutationProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MutationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row(), output);
  }

  // optional .hbase.pb.MutationProto.MutationType mutate_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->mutate_type(), output);
  }

  // repeated .hbase.pb.MutationProto.ColumnValue column_value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_value_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->column_value(static_cast<int>(i)),
      output);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->attribute(static_cast<int>(i)),
      output);
  }

  // optional .hbase.pb.MutationProto.Durability durability = 6 [default = USE_DEFAULT];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->durability(), output);
  }

  // optional .hbase.pb.TimeRange time_range = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::time_range(this), output);
  }

  // optional int32 associated_cell_count = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->associated_cell_count(), output);
  }

  // optional uint64 nonce = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->nonce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MutationProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* MutationProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MutationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->row(), target);
  }

  // optional .hbase.pb.MutationProto.MutationType mutate_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->mutate_type(), target);
  }

  // repeated .hbase.pb.MutationProto.ColumnValue column_value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_value_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->column_value(static_cast<int>(i)), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->attribute(static_cast<int>(i)), target);
  }

  // optional .hbase.pb.MutationProto.Durability durability = 6 [default = USE_DEFAULT];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->durability(), target);
  }

  // optional .hbase.pb.TimeRange time_range = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::time_range(this), target);
  }

  // optional int32 associated_cell_count = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->associated_cell_count(), target);
  }

  // optional uint64 nonce = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->nonce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MutationProto)
  return target;
}

size_t MutationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MutationProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.MutationProto.ColumnValue column_value = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->column_value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->column_value(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.NameBytesPair attribute = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->row());
    }

    // optional .hbase.pb.TimeRange time_range = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_range_);
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional .hbase.pb.MutationProto.MutationType mutate_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mutate_type());
    }

    // optional .hbase.pb.MutationProto.Durability durability = 6 [default = USE_DEFAULT];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->durability());
    }

    // optional uint64 nonce = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

    // optional int32 associated_cell_count = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->associated_cell_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutationProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MutationProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MutationProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutationProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MutationProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MutationProto)
    MergeFrom(*source);
  }
}

void MutationProto::MergeFrom(const MutationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MutationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_value_.MergeFrom(from.column_value_);
  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_time_range()->::hbase::pb::TimeRange::MergeFrom(from.time_range());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      mutate_type_ = from.mutate_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      durability_ = from.durability_;
    }
    if (cached_has_bits & 0x00000020u) {
      nonce_ = from.nonce_;
    }
    if (cached_has_bits & 0x00000040u) {
      associated_cell_count_ = from.associated_cell_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MutationProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MutationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationProto::CopyFrom(const MutationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MutationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->column_value())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->attribute())) return false;
  return true;
}

void MutationProto::InternalSwap(MutationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&column_value_)->InternalSwap(CastToBase(&other->column_value_));
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
  row_.Swap(&other->row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_range_, other->time_range_);
  swap(timestamp_, other->timestamp_);
  swap(mutate_type_, other->mutate_type_);
  swap(durability_, other->durability_);
  swap(nonce_, other->nonce_);
  swap(associated_cell_count_, other->associated_cell_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutationProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutateRequest::InitAsDefaultInstance() {
  ::hbase::pb::_MutateRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
  ::hbase::pb::_MutateRequest_default_instance_._instance.get_mutable()->mutation_ = const_cast< ::hbase::pb::MutationProto*>(
      ::hbase::pb::MutationProto::internal_default_instance());
  ::hbase::pb::_MutateRequest_default_instance_._instance.get_mutable()->condition_ = const_cast< ::hbase::pb::Condition*>(
      ::hbase::pb::Condition::internal_default_instance());
}
class MutateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MutateRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const MutateRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::MutationProto& mutation(const MutateRequest* msg);
  static void set_has_mutation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::Condition& condition(const MutateRequest* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nonce_group(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hbase::pb::RegionSpecifier&
MutateRequest::_Internal::region(const MutateRequest* msg) {
  return *msg->region_;
}
const ::hbase::pb::MutationProto&
MutateRequest::_Internal::mutation(const MutateRequest* msg) {
  return *msg->mutation_;
}
const ::hbase::pb::Condition&
MutateRequest::_Internal::condition(const MutateRequest* msg) {
  return *msg->condition_;
}
void MutateRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MutateRequest::MutateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MutateRequest)
}
MutateRequest::MutateRequest(const MutateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_mutation()) {
    mutation_ = new ::hbase::pb::MutationProto(*from.mutation_);
  } else {
    mutation_ = nullptr;
  }
  if (from.has_condition()) {
    condition_ = new ::hbase::pb::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  nonce_group_ = from.nonce_group_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MutateRequest)
}

void MutateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutateRequest_Client_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_group_) -
      reinterpret_cast<char*>(&region_)) + sizeof(nonce_group_));
}

MutateRequest::~MutateRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.MutateRequest)
  SharedDtor();
}

void MutateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete mutation_;
  if (this != internal_default_instance()) delete condition_;
}

void MutateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutateRequest& MutateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutateRequest_Client_2eproto.base);
  return *internal_default_instance();
}


void MutateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MutateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mutation_ != nullptr);
      mutation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(condition_ != nullptr);
      condition_->Clear();
    }
  }
  nonce_group_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MutateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.MutationProto mutation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mutation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Condition condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nonce_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_nonce_group(&has_bits);
          nonce_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MutateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MutateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.MutationProto mutation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mutation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Condition condition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nonce_group = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_nonce_group(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MutateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MutateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MutateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MutateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // required .hbase.pb.MutationProto mutation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::mutation(this), output);
  }

  // optional .hbase.pb.Condition condition = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::condition(this), output);
  }

  // optional uint64 nonce_group = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->nonce_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MutateRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MutateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MutateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // required .hbase.pb.MutationProto mutation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::mutation(this), target);
  }

  // optional .hbase.pb.Condition condition = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::condition(this), target);
  }

  // optional uint64 nonce_group = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->nonce_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MutateRequest)
  return target;
}

size_t MutateRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.MutateRequest)
  size_t total_size = 0;

  if (has_region()) {
    // required .hbase.pb.RegionSpecifier region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  if (has_mutation()) {
    // required .hbase.pb.MutationProto mutation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mutation_);
  }

  return total_size;
}
size_t MutateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MutateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .hbase.pb.RegionSpecifier region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);

    // required .hbase.pb.MutationProto mutation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mutation_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .hbase.pb.Condition condition = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional uint64 nonce_group = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MutateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MutateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MutateRequest)
    MergeFrom(*source);
  }
}

void MutateRequest::MergeFrom(const MutateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MutateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_mutation()->::hbase::pb::MutationProto::MergeFrom(from.mutation());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_condition()->::hbase::pb::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000008u) {
      nonce_group_ = from.nonce_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MutateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MutateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRequest::CopyFrom(const MutateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MutateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  if (has_mutation()) {
    if (!this->mutation_->IsInitialized()) return false;
  }
  if (has_condition()) {
    if (!this->condition_->IsInitialized()) return false;
  }
  return true;
}

void MutateRequest::InternalSwap(MutateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_, other->region_);
  swap(mutation_, other->mutation_);
  swap(condition_, other->condition_);
  swap(nonce_group_, other->nonce_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutateResponse::InitAsDefaultInstance() {
  ::hbase::pb::_MutateResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::hbase::pb::Result*>(
      ::hbase::pb::Result::internal_default_instance());
}
class MutateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MutateResponse>()._has_bits_);
  static const ::hbase::pb::Result& result(const MutateResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_processed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::Result&
MutateResponse::_Internal::result(const MutateResponse* msg) {
  return *msg->result_;
}
MutateResponse::MutateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MutateResponse)
}
MutateResponse::MutateResponse(const MutateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::hbase::pb::Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  processed_ = from.processed_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MutateResponse)
}

void MutateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutateResponse_Client_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processed_) -
      reinterpret_cast<char*>(&result_)) + sizeof(processed_));
}

MutateResponse::~MutateResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.MutateResponse)
  SharedDtor();
}

void MutateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MutateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutateResponse& MutateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutateResponse_Client_2eproto.base);
  return *internal_default_instance();
}


void MutateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MutateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != nullptr);
    result_->Clear();
  }
  processed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MutateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hbase.pb.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool processed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_processed(&has_bits);
          processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MutateResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MutateResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.Result result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool processed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_processed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MutateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MutateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MutateResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MutateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // optional bool processed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->processed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MutateResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MutateResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MutateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.Result result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // optional bool processed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->processed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MutateResponse)
  return target;
}

size_t MutateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MutateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hbase.pb.Result result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_);
    }

    // optional bool processed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MutateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MutateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MutateResponse)
    MergeFrom(*source);
  }
}

void MutateResponse::MergeFrom(const MutateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MutateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_result()->::hbase::pb::Result::MergeFrom(from.result());
    }
    if (cached_has_bits & 0x00000002u) {
      processed_ = from.processed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MutateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MutateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateResponse::CopyFrom(const MutateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MutateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateResponse::IsInitialized() const {
  return true;
}

void MutateResponse::InternalSwap(MutateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
  swap(processed_, other->processed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scan::InitAsDefaultInstance() {
  ::hbase::pb::_Scan_default_instance_._instance.get_mutable()->filter_ = const_cast< ::hbase::pb::Filter*>(
      ::hbase::pb::Filter::internal_default_instance());
  ::hbase::pb::_Scan_default_instance_._instance.get_mutable()->time_range_ = const_cast< ::hbase::pb::TimeRange*>(
      ::hbase::pb::TimeRange::internal_default_instance());
}
class Scan::_Internal {
 public:
  using HasBits = decltype(std::declval<Scan>()._has_bits_);
  static void set_has_start_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::Filter& filter(const Scan* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hbase::pb::TimeRange& time_range(const Scan* msg);
  static void set_has_time_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_versions(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_cache_blocks(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_result_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_store_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_store_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_load_column_families_on_demand(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_small(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reversed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_consistency(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_caching(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_allow_partial_results(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mvcc_read_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_include_start_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_include_stop_row(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_readtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_need_cursor_result(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::hbase::pb::Filter&
Scan::_Internal::filter(const Scan* msg) {
  return *msg->filter_;
}
const ::hbase::pb::TimeRange&
Scan::_Internal::time_range(const Scan* msg) {
  return *msg->time_range_;
}
void Scan::clear_attribute() {
  attribute_.Clear();
}
void Scan::clear_filter() {
  if (filter_ != nullptr) filter_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Scan::clear_time_range() {
  if (time_range_ != nullptr) time_range_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Scan::clear_cf_time_range() {
  cf_time_range_.Clear();
}
Scan::Scan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Scan)
}
Scan::Scan(const Scan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      column_(from.column_),
      attribute_(from.attribute_),
      cf_time_range_(from.cf_time_range_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_row()) {
    start_row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_row_);
  }
  stop_row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_stop_row()) {
    stop_row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_row_);
  }
  if (from.has_filter()) {
    filter_ = new ::hbase::pb::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from.has_time_range()) {
    time_range_ = new ::hbase::pb::TimeRange(*from.time_range_);
  } else {
    time_range_ = nullptr;
  }
  ::memcpy(&max_result_size_, &from.max_result_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_start_row_) -
    reinterpret_cast<char*>(&max_result_size_)) + sizeof(include_start_row_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Scan)
}

void Scan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scan_Client_2eproto.base);
  start_row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_cursor_result_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(need_cursor_result_));
  max_versions_ = 1u;
  cache_blocks_ = true;
  include_start_row_ = true;
}

Scan::~Scan() {
  // @@protoc_insertion_point(destructor:hbase.pb.Scan)
  SharedDtor();
}

void Scan::SharedDtor() {
  start_row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete time_range_;
}

void Scan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scan& Scan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scan_Client_2eproto.base);
  return *internal_default_instance();
}


void Scan::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Scan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_.Clear();
  attribute_.Clear();
  cf_time_range_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      start_row_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stop_row_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(filter_ != nullptr);
      filter_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(time_range_ != nullptr);
      time_range_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&max_result_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&store_offset_) -
        reinterpret_cast<char*>(&max_result_size_)) + sizeof(store_offset_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&load_column_families_on_demand_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&readtype_) -
        reinterpret_cast<char*>(&load_column_families_on_demand_)) + sizeof(readtype_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&include_stop_row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&need_cursor_result_) -
        reinterpret_cast<char*>(&include_stop_row_)) + sizeof(need_cursor_result_));
    max_versions_ = 1u;
    cache_blocks_ = true;
    include_start_row_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Scan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.Column column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.NameBytesPair attribute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional bytes start_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_start_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes stop_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_stop_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Filter filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.TimeRange time_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_time_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_versions = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_versions(&has_bits);
          max_versions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cache_blocks = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_cache_blocks(&has_bits);
          cache_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 batch_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_result_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_result_size(&has_bits);
          max_result_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 store_limit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_store_limit(&has_bits);
          store_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 store_offset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_store_offset(&has_bits);
          store_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool load_column_families_on_demand = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_load_column_families_on_demand(&has_bits);
          load_column_families_on_demand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool small = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_small(&has_bits);
          small_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reversed = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_reversed(&has_bits);
          reversed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Consistency consistency = 16 [default = STRONG];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::Consistency_IsValid(val))) {
            set_consistency(static_cast<::hbase::pb::Consistency>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 caching = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_caching(&has_bits);
          caching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_partial_results = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_allow_partial_results(&has_bits);
          allow_partial_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_cf_time_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      // optional uint64 mvcc_read_point = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_mvcc_read_point(&has_bits);
          mvcc_read_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_start_row = 21 [default = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_include_start_row(&has_bits);
          include_start_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_stop_row = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_include_stop_row(&has_bits);
          include_stop_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Scan.ReadType readType = 23 [default = DEFAULT];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::Scan_ReadType_IsValid(val))) {
            set_readtype(static_cast<::hbase::pb::Scan_ReadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool need_cursor_result = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_need_cursor_result(&has_bits);
          need_cursor_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Scan::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Scan)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.Column column = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.NameBytesPair attribute = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes start_row = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes stop_row = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stop_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Filter filter = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.TimeRange time_range = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_versions = 7 [default = 1];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_max_versions(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_versions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cache_blocks = 8 [default = true];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_cache_blocks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_batch_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_result_size = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_max_result_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_result_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 store_limit = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_store_limit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 store_offset = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_store_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool load_column_families_on_demand = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_load_column_families_on_demand(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &load_column_families_on_demand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool small = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_small(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &small_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reversed = 15 [default = false];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_reversed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reversed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Consistency consistency = 16 [default = STRONG];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::Consistency_IsValid(value)) {
            set_consistency(static_cast< ::hbase::pb::Consistency >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 caching = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_caching(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_partial_results = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_allow_partial_results(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_partial_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cf_time_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 mvcc_read_point = 20 [default = 0];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_mvcc_read_point(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mvcc_read_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_start_row = 21 [default = true];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_include_start_row(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_start_row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_stop_row = 22 [default = false];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_include_stop_row(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_stop_row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Scan.ReadType readType = 23 [default = DEFAULT];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::Scan_ReadType_IsValid(value)) {
            set_readtype(static_cast< ::hbase::pb::Scan_ReadType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_cursor_result = 24 [default = false];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_need_cursor_result(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_cursor_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Scan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Scan)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Scan::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Scan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.Column column = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->column(static_cast<int>(i)),
      output);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->attribute(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes start_row = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_row(), output);
  }

  // optional bytes stop_row = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->stop_row(), output);
  }

  // optional .hbase.pb.Filter filter = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::filter(this), output);
  }

  // optional .hbase.pb.TimeRange time_range = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::time_range(this), output);
  }

  // optional uint32 max_versions = 7 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->max_versions(), output);
  }

  // optional bool cache_blocks = 8 [default = true];
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->cache_blocks(), output);
  }

  // optional uint32 batch_size = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->batch_size(), output);
  }

  // optional uint64 max_result_size = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->max_result_size(), output);
  }

  // optional uint32 store_limit = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->store_limit(), output);
  }

  // optional uint32 store_offset = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->store_offset(), output);
  }

  // optional bool load_column_families_on_demand = 13;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->load_column_families_on_demand(), output);
  }

  // optional bool small = 14 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->small(), output);
  }

  // optional bool reversed = 15 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->reversed(), output);
  }

  // optional .hbase.pb.Consistency consistency = 16 [default = STRONG];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      16, this->consistency(), output);
  }

  // optional uint32 caching = 17;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->caching(), output);
  }

  // optional bool allow_partial_results = 18;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->allow_partial_results(), output);
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cf_time_range_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->cf_time_range(static_cast<int>(i)),
      output);
  }

  // optional uint64 mvcc_read_point = 20 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(20, this->mvcc_read_point(), output);
  }

  // optional bool include_start_row = 21 [default = true];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->include_start_row(), output);
  }

  // optional bool include_stop_row = 22 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->include_stop_row(), output);
  }

  // optional .hbase.pb.Scan.ReadType readType = 23 [default = DEFAULT];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->readtype(), output);
  }

  // optional bool need_cursor_result = 24 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->need_cursor_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Scan)
}

::PROTOBUF_NAMESPACE_ID::uint8* Scan::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Scan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.Column column = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->column(static_cast<int>(i)), target);
  }

  // repeated .hbase.pb.NameBytesPair attribute = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->attribute(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes start_row = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_row(), target);
  }

  // optional bytes stop_row = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->stop_row(), target);
  }

  // optional .hbase.pb.Filter filter = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::filter(this), target);
  }

  // optional .hbase.pb.TimeRange time_range = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::time_range(this), target);
  }

  // optional uint32 max_versions = 7 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_versions(), target);
  }

  // optional bool cache_blocks = 8 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->cache_blocks(), target);
  }

  // optional uint32 batch_size = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->batch_size(), target);
  }

  // optional uint64 max_result_size = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->max_result_size(), target);
  }

  // optional uint32 store_limit = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->store_limit(), target);
  }

  // optional uint32 store_offset = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->store_offset(), target);
  }

  // optional bool load_column_families_on_demand = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->load_column_families_on_demand(), target);
  }

  // optional bool small = 14 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->small(), target);
  }

  // optional bool reversed = 15 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->reversed(), target);
  }

  // optional .hbase.pb.Consistency consistency = 16 [default = STRONG];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->consistency(), target);
  }

  // optional uint32 caching = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->caching(), target);
  }

  // optional bool allow_partial_results = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->allow_partial_results(), target);
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cf_time_range_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->cf_time_range(static_cast<int>(i)), target);
  }

  // optional uint64 mvcc_read_point = 20 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->mvcc_read_point(), target);
  }

  // optional bool include_start_row = 21 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->include_start_row(), target);
  }

  // optional bool include_stop_row = 22 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->include_stop_row(), target);
  }

  // optional .hbase.pb.Scan.ReadType readType = 23 [default = DEFAULT];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->readtype(), target);
  }

  // optional bool need_cursor_result = 24 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->need_cursor_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Scan)
  return target;
}

size_t Scan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Scan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.Column column = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->column_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->column(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.NameBytesPair attribute = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.ColumnFamilyTimeRange cf_time_range = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->cf_time_range_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cf_time_range(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes start_row = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->start_row());
    }

    // optional bytes stop_row = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->stop_row());
    }

    // optional .hbase.pb.Filter filter = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_);
    }

    // optional .hbase.pb.TimeRange time_range = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_range_);
    }

    // optional uint64 max_result_size = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->max_result_size());
    }

    // optional uint32 batch_size = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 store_limit = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->store_limit());
    }

    // optional uint32 store_offset = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->store_offset());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool load_column_families_on_demand = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool small = 14 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool reversed = 15 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool allow_partial_results = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional .hbase.pb.Consistency consistency = 16 [default = STRONG];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->consistency());
    }

    // optional uint32 caching = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->caching());
    }

    // optional uint64 mvcc_read_point = 20 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->mvcc_read_point());
    }

    // optional .hbase.pb.Scan.ReadType readType = 23 [default = DEFAULT];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->readtype());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional bool include_stop_row = 22 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool need_cursor_result = 24 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 max_versions = 7 [default = 1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_versions());
    }

    // optional bool cache_blocks = 8 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool include_start_row = 21 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Scan)
  GOOGLE_DCHECK_NE(&from, this);
  const Scan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Scan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Scan)
    MergeFrom(*source);
  }
}

void Scan::MergeFrom(const Scan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Scan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_.MergeFrom(from.column_);
  attribute_.MergeFrom(from.attribute_);
  cf_time_range_.MergeFrom(from.cf_time_range_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      start_row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_row_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      stop_row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_row_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_filter()->::hbase::pb::Filter::MergeFrom(from.filter());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_time_range()->::hbase::pb::TimeRange::MergeFrom(from.time_range());
    }
    if (cached_has_bits & 0x00000010u) {
      max_result_size_ = from.max_result_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      store_limit_ = from.store_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      store_offset_ = from.store_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      load_column_families_on_demand_ = from.load_column_families_on_demand_;
    }
    if (cached_has_bits & 0x00000200u) {
      small_ = from.small_;
    }
    if (cached_has_bits & 0x00000400u) {
      reversed_ = from.reversed_;
    }
    if (cached_has_bits & 0x00000800u) {
      allow_partial_results_ = from.allow_partial_results_;
    }
    if (cached_has_bits & 0x00001000u) {
      consistency_ = from.consistency_;
    }
    if (cached_has_bits & 0x00002000u) {
      caching_ = from.caching_;
    }
    if (cached_has_bits & 0x00004000u) {
      mvcc_read_point_ = from.mvcc_read_point_;
    }
    if (cached_has_bits & 0x00008000u) {
      readtype_ = from.readtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      include_stop_row_ = from.include_stop_row_;
    }
    if (cached_has_bits & 0x00020000u) {
      need_cursor_result_ = from.need_cursor_result_;
    }
    if (cached_has_bits & 0x00040000u) {
      max_versions_ = from.max_versions_;
    }
    if (cached_has_bits & 0x00080000u) {
      cache_blocks_ = from.cache_blocks_;
    }
    if (cached_has_bits & 0x00100000u) {
      include_start_row_ = from.include_start_row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Scan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scan::CopyFrom(const Scan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Scan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scan::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->column())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->attribute())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->cf_time_range())) return false;
  if (has_filter()) {
    if (!this->filter_->IsInitialized()) return false;
  }
  return true;
}

void Scan::InternalSwap(Scan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&column_)->InternalSwap(CastToBase(&other->column_));
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
  CastToBase(&cf_time_range_)->InternalSwap(CastToBase(&other->cf_time_range_));
  start_row_.Swap(&other->start_row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stop_row_.Swap(&other->stop_row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filter_, other->filter_);
  swap(time_range_, other->time_range_);
  swap(max_result_size_, other->max_result_size_);
  swap(batch_size_, other->batch_size_);
  swap(store_limit_, other->store_limit_);
  swap(store_offset_, other->store_offset_);
  swap(load_column_families_on_demand_, other->load_column_families_on_demand_);
  swap(small_, other->small_);
  swap(reversed_, other->reversed_);
  swap(allow_partial_results_, other->allow_partial_results_);
  swap(consistency_, other->consistency_);
  swap(caching_, other->caching_);
  swap(mvcc_read_point_, other->mvcc_read_point_);
  swap(readtype_, other->readtype_);
  swap(include_stop_row_, other->include_stop_row_);
  swap(need_cursor_result_, other->need_cursor_result_);
  swap(max_versions_, other->max_versions_);
  swap(cache_blocks_, other->cache_blocks_);
  swap(include_start_row_, other->include_start_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScanRequest::InitAsDefaultInstance() {
  ::hbase::pb::_ScanRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
  ::hbase::pb::_ScanRequest_default_instance_._instance.get_mutable()->scan_ = const_cast< ::hbase::pb::Scan*>(
      ::hbase::pb::Scan::internal_default_instance());
}
class ScanRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ScanRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const ScanRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::Scan& scan(const ScanRequest* msg);
  static void set_has_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scanner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_number_of_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_close_scanner(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_next_call_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_handles_partials(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_handles_heartbeats(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_track_scan_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_renew(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_limit_of_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::hbase::pb::RegionSpecifier&
ScanRequest::_Internal::region(const ScanRequest* msg) {
  return *msg->region_;
}
const ::hbase::pb::Scan&
ScanRequest::_Internal::scan(const ScanRequest* msg) {
  return *msg->scan_;
}
void ScanRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ScanRequest::ScanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ScanRequest)
}
ScanRequest::ScanRequest(const ScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_scan()) {
    scan_ = new ::hbase::pb::Scan(*from.scan_);
  } else {
    scan_ = nullptr;
  }
  ::memcpy(&scanner_id_, &from.scanner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_of_rows_) -
    reinterpret_cast<char*>(&scanner_id_)) + sizeof(limit_of_rows_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ScanRequest)
}

void ScanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanRequest_Client_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_of_rows_) -
      reinterpret_cast<char*>(&region_)) + sizeof(limit_of_rows_));
}

ScanRequest::~ScanRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.ScanRequest)
  SharedDtor();
}

void ScanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete scan_;
}

void ScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanRequest& ScanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanRequest_Client_2eproto.base);
  return *internal_default_instance();
}


void ScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(scan_ != nullptr);
      scan_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&scanner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_handles_heartbeats_) -
        reinterpret_cast<char*>(&scanner_id_)) + sizeof(client_handles_heartbeats_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&track_scan_metrics_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_of_rows_) -
        reinterpret_cast<char*>(&track_scan_metrics_)) + sizeof(limit_of_rows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Scan scan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_scan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 scanner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_scanner_id(&has_bits);
          scanner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_number_of_rows(&has_bits);
          number_of_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool close_scanner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_close_scanner(&has_bits);
          close_scanner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 next_call_seq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_next_call_seq(&has_bits);
          next_call_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool client_handles_partials = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_client_handles_partials(&has_bits);
          client_handles_partials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool client_handles_heartbeats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_client_handles_heartbeats(&has_bits);
          client_handles_heartbeats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool track_scan_metrics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_track_scan_metrics(&has_bits);
          track_scan_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool renew = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_renew(&has_bits);
          renew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 limit_of_rows = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_limit_of_rows(&has_bits);
          limit_of_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScanRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ScanRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Scan scan = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scanner_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_scanner_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scanner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 number_of_rows = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_number_of_rows(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool close_scanner = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_close_scanner(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_scanner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_call_seq = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_next_call_seq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_call_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool client_handles_partials = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_client_handles_partials(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_handles_partials_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool client_handles_heartbeats = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_client_handles_heartbeats(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_handles_heartbeats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool track_scan_metrics = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_track_scan_metrics(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_scan_metrics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool renew = 10 [default = false];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_renew(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &renew_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 limit_of_rows = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_limit_of_rows(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_of_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ScanRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScanRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // optional .hbase.pb.Scan scan = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::scan(this), output);
  }

  // optional uint64 scanner_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->scanner_id(), output);
  }

  // optional uint32 number_of_rows = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->number_of_rows(), output);
  }

  // optional bool close_scanner = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->close_scanner(), output);
  }

  // optional uint64 next_call_seq = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->next_call_seq(), output);
  }

  // optional bool client_handles_partials = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->client_handles_partials(), output);
  }

  // optional bool client_handles_heartbeats = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->client_handles_heartbeats(), output);
  }

  // optional bool track_scan_metrics = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->track_scan_metrics(), output);
  }

  // optional bool renew = 10 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->renew(), output);
  }

  // optional uint32 limit_of_rows = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->limit_of_rows(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ScanRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // optional .hbase.pb.Scan scan = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::scan(this), target);
  }

  // optional uint64 scanner_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->scanner_id(), target);
  }

  // optional uint32 number_of_rows = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->number_of_rows(), target);
  }

  // optional bool close_scanner = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->close_scanner(), target);
  }

  // optional uint64 next_call_seq = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->next_call_seq(), target);
  }

  // optional bool client_handles_partials = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->client_handles_partials(), target);
  }

  // optional bool client_handles_heartbeats = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->client_handles_heartbeats(), target);
  }

  // optional bool track_scan_metrics = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->track_scan_metrics(), target);
  }

  // optional bool renew = 10 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->renew(), target);
  }

  // optional uint32 limit_of_rows = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->limit_of_rows(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ScanRequest)
  return target;
}

size_t ScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ScanRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .hbase.pb.RegionSpecifier region = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_);
    }

    // optional .hbase.pb.Scan scan = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scan_);
    }

    // optional uint64 scanner_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->scanner_id());
    }

    // optional uint64 next_call_seq = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->next_call_seq());
    }

    // optional uint32 number_of_rows = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->number_of_rows());
    }

    // optional bool close_scanner = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool client_handles_partials = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool client_handles_heartbeats = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool track_scan_metrics = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool renew = 10 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 limit_of_rows = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->limit_of_rows());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ScanRequest)
    MergeFrom(*source);
  }
}

void ScanRequest::MergeFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_scan()->::hbase::pb::Scan::MergeFrom(from.scan());
    }
    if (cached_has_bits & 0x00000004u) {
      scanner_id_ = from.scanner_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      next_call_seq_ = from.next_call_seq_;
    }
    if (cached_has_bits & 0x00000010u) {
      number_of_rows_ = from.number_of_rows_;
    }
    if (cached_has_bits & 0x00000020u) {
      close_scanner_ = from.close_scanner_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_handles_partials_ = from.client_handles_partials_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_handles_heartbeats_ = from.client_handles_heartbeats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      track_scan_metrics_ = from.track_scan_metrics_;
    }
    if (cached_has_bits & 0x00000200u) {
      renew_ = from.renew_;
    }
    if (cached_has_bits & 0x00000400u) {
      limit_of_rows_ = from.limit_of_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRequest::CopyFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRequest::IsInitialized() const {
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  if (has_scan()) {
    if (!this->scan_->IsInitialized()) return false;
  }
  return true;
}

void ScanRequest::InternalSwap(ScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_, other->region_);
  swap(scan_, other->scan_);
  swap(scanner_id_, other->scanner_id_);
  swap(next_call_seq_, other->next_call_seq_);
  swap(number_of_rows_, other->number_of_rows_);
  swap(close_scanner_, other->close_scanner_);
  swap(client_handles_partials_, other->client_handles_partials_);
  swap(client_handles_heartbeats_, other->client_handles_heartbeats_);
  swap(track_scan_metrics_, other->track_scan_metrics_);
  swap(renew_, other->renew_);
  swap(limit_of_rows_, other->limit_of_rows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cursor::InitAsDefaultInstance() {
}
class Cursor::_Internal {
 public:
  using HasBits = decltype(std::declval<Cursor>()._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Cursor::Cursor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Cursor)
}
Cursor::Cursor(const Cursor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_row()) {
    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Cursor)
}

void Cursor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Cursor_Client_2eproto.base);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Cursor::~Cursor() {
  // @@protoc_insertion_point(destructor:hbase.pb.Cursor)
  SharedDtor();
}

void Cursor::SharedDtor() {
  row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Cursor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cursor& Cursor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cursor_Client_2eproto.base);
  return *internal_default_instance();
}


void Cursor::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Cursor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    row_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Cursor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Cursor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Cursor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes row = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Cursor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Cursor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Cursor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Cursor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Cursor)
}

::PROTOBUF_NAMESPACE_ID::uint8* Cursor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Cursor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->row(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Cursor)
  return target;
}

size_t Cursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Cursor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes row = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->row());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cursor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Cursor)
  GOOGLE_DCHECK_NE(&from, this);
  const Cursor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cursor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Cursor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Cursor)
    MergeFrom(*source);
  }
}

void Cursor::MergeFrom(const Cursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Cursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_row()) {
    _has_bits_[0] |= 0x00000001u;
    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
}

void Cursor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Cursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cursor::CopyFrom(const Cursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Cursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cursor::IsInitialized() const {
  return true;
}

void Cursor::InternalSwap(Cursor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_.Swap(&other->row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Cursor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScanResponse::InitAsDefaultInstance() {
  ::hbase::pb::_ScanResponse_default_instance_._instance.get_mutable()->scan_metrics_ = const_cast< ::hbase::pb::ScanMetrics*>(
      ::hbase::pb::ScanMetrics::internal_default_instance());
  ::hbase::pb::_ScanResponse_default_instance_._instance.get_mutable()->cursor_ = const_cast< ::hbase::pb::Cursor*>(
      ::hbase::pb::Cursor::internal_default_instance());
}
class ScanResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ScanResponse>()._has_bits_);
  static void set_has_scanner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_more_results(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_more_results_in_region(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_heartbeat_message(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hbase::pb::ScanMetrics& scan_metrics(const ScanResponse* msg);
  static void set_has_scan_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mvcc_read_point(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::hbase::pb::Cursor& cursor(const ScanResponse* msg);
  static void set_has_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::ScanMetrics&
ScanResponse::_Internal::scan_metrics(const ScanResponse* msg) {
  return *msg->scan_metrics_;
}
const ::hbase::pb::Cursor&
ScanResponse::_Internal::cursor(const ScanResponse* msg) {
  return *msg->cursor_;
}
void ScanResponse::clear_scan_metrics() {
  if (scan_metrics_ != nullptr) scan_metrics_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ScanResponse::ScanResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ScanResponse)
}
ScanResponse::ScanResponse(const ScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cells_per_result_(from.cells_per_result_),
      results_(from.results_),
      partial_flag_per_result_(from.partial_flag_per_result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scan_metrics()) {
    scan_metrics_ = new ::hbase::pb::ScanMetrics(*from.scan_metrics_);
  } else {
    scan_metrics_ = nullptr;
  }
  if (from.has_cursor()) {
    cursor_ = new ::hbase::pb::Cursor(*from.cursor_);
  } else {
    cursor_ = nullptr;
  }
  ::memcpy(&scanner_id_, &from.scanner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mvcc_read_point_) -
    reinterpret_cast<char*>(&scanner_id_)) + sizeof(mvcc_read_point_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ScanResponse)
}

void ScanResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanResponse_Client_2eproto.base);
  ::memset(&scan_metrics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mvcc_read_point_) -
      reinterpret_cast<char*>(&scan_metrics_)) + sizeof(mvcc_read_point_));
}

ScanResponse::~ScanResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.ScanResponse)
  SharedDtor();
}

void ScanResponse::SharedDtor() {
  if (this != internal_default_instance()) delete scan_metrics_;
  if (this != internal_default_instance()) delete cursor_;
}

void ScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanResponse& ScanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanResponse_Client_2eproto.base);
  return *internal_default_instance();
}


void ScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_per_result_.Clear();
  results_.Clear();
  partial_flag_per_result_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scan_metrics_ != nullptr);
      scan_metrics_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cursor_ != nullptr);
      cursor_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&scanner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heartbeat_message_) -
        reinterpret_cast<char*>(&scanner_id_)) + sizeof(heartbeat_message_));
  }
  mvcc_read_point_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 cells_per_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_cells_per_result(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_cells_per_result(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 scanner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_scanner_id(&has_bits);
          scanner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool more_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_more_results(&has_bits);
          more_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ttl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ttl(&has_bits);
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.Result results = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional bool stale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_stale(&has_bits);
          stale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool partial_flag_per_result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_partial_flag_per_result(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 56);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_partial_flag_per_result(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool more_results_in_region = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_more_results_in_region(&has_bits);
          more_results_in_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool heartbeat_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_heartbeat_message(&has_bits);
          heartbeat_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.ScanMetrics scan_metrics = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_scan_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 mvcc_read_point = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_mvcc_read_point(&has_bits);
          mvcc_read_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Cursor cursor = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_cursor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScanResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ScanResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cells_per_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_cells_per_result())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cells_per_result())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scanner_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_scanner_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scanner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool more_results = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_more_results(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ttl = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ttl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.Result results = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stale = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_stale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool partial_flag_per_result = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 56u, input, this->mutable_partial_flag_per_result())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_partial_flag_per_result())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool more_results_in_region = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_more_results_in_region(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_results_in_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool heartbeat_message = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_heartbeat_message(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &heartbeat_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.ScanMetrics scan_metrics = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scan_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 mvcc_read_point = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_mvcc_read_point(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mvcc_read_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Cursor cursor = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cursor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ScanResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScanResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cells_per_result = 1;
  for (int i = 0, n = this->cells_per_result_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      1, this->cells_per_result(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 scanner_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->scanner_id(), output);
  }

  // optional bool more_results = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->more_results(), output);
  }

  // optional uint32 ttl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->ttl(), output);
  }

  // repeated .hbase.pb.Result results = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->results(static_cast<int>(i)),
      output);
  }

  // optional bool stale = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->stale(), output);
  }

  // repeated bool partial_flag_per_result = 7;
  for (int i = 0, n = this->partial_flag_per_result_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(
      7, this->partial_flag_per_result(i), output);
  }

  // optional bool more_results_in_region = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->more_results_in_region(), output);
  }

  // optional bool heartbeat_message = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->heartbeat_message(), output);
  }

  // optional .hbase.pb.ScanMetrics scan_metrics = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::scan_metrics(this), output);
  }

  // optional uint64 mvcc_read_point = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->mvcc_read_point(), output);
  }

  // optional .hbase.pb.Cursor cursor = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::cursor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ScanResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cells_per_result = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->cells_per_result_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint64 scanner_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->scanner_id(), target);
  }

  // optional bool more_results = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->more_results(), target);
  }

  // optional uint32 ttl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->ttl(), target);
  }

  // repeated .hbase.pb.Result results = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->results(static_cast<int>(i)), target);
  }

  // optional bool stale = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->stale(), target);
  }

  // repeated bool partial_flag_per_result = 7;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteBoolToArray(7, this->partial_flag_per_result_, target);

  // optional bool more_results_in_region = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->more_results_in_region(), target);
  }

  // optional bool heartbeat_message = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->heartbeat_message(), target);
  }

  // optional .hbase.pb.ScanMetrics scan_metrics = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::scan_metrics(this), target);
  }

  // optional uint64 mvcc_read_point = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->mvcc_read_point(), target);
  }

  // optional .hbase.pb.Cursor cursor = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::cursor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ScanResponse)
  return target;
}

size_t ScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ScanResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cells_per_result = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cells_per_result_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->cells_per_result_size());
    total_size += data_size;
  }

  // repeated .hbase.pb.Result results = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // repeated bool partial_flag_per_result = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->partial_flag_per_result_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->partial_flag_per_result_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .hbase.pb.ScanMetrics scan_metrics = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scan_metrics_);
    }

    // optional .hbase.pb.Cursor cursor = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cursor_);
    }

    // optional uint64 scanner_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->scanner_id());
    }

    // optional uint32 ttl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ttl());
    }

    // optional bool more_results = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool stale = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool more_results_in_region = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool heartbeat_message = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint64 mvcc_read_point = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->mvcc_read_point());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ScanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ScanResponse)
    MergeFrom(*source);
  }
}

void ScanResponse::MergeFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_per_result_.MergeFrom(from.cells_per_result_);
  results_.MergeFrom(from.results_);
  partial_flag_per_result_.MergeFrom(from.partial_flag_per_result_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_scan_metrics()->::hbase::pb::ScanMetrics::MergeFrom(from.scan_metrics());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cursor()->::hbase::pb::Cursor::MergeFrom(from.cursor());
    }
    if (cached_has_bits & 0x00000004u) {
      scanner_id_ = from.scanner_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ttl_ = from.ttl_;
    }
    if (cached_has_bits & 0x00000010u) {
      more_results_ = from.more_results_;
    }
    if (cached_has_bits & 0x00000020u) {
      stale_ = from.stale_;
    }
    if (cached_has_bits & 0x00000040u) {
      more_results_in_region_ = from.more_results_in_region_;
    }
    if (cached_has_bits & 0x00000080u) {
      heartbeat_message_ = from.heartbeat_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_mvcc_read_point(from.mvcc_read_point());
  }
}

void ScanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanResponse::CopyFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResponse::IsInitialized() const {
  return true;
}

void ScanResponse::InternalSwap(ScanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cells_per_result_.InternalSwap(&other->cells_per_result_);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  partial_flag_per_result_.InternalSwap(&other->partial_flag_per_result_);
  swap(scan_metrics_, other->scan_metrics_);
  swap(cursor_, other->cursor_);
  swap(scanner_id_, other->scanner_id_);
  swap(ttl_, other->ttl_);
  swap(more_results_, other->more_results_);
  swap(stale_, other->stale_);
  swap(more_results_in_region_, other->more_results_in_region_);
  swap(heartbeat_message_, other->heartbeat_message_);
  swap(mvcc_read_point_, other->mvcc_read_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkLoadHFileRequest_FamilyPath::InitAsDefaultInstance() {
}
class BulkLoadHFileRequest_FamilyPath::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkLoadHFileRequest_FamilyPath>()._has_bits_);
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BulkLoadHFileRequest_FamilyPath::BulkLoadHFileRequest_FamilyPath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.BulkLoadHFileRequest.FamilyPath)
}
BulkLoadHFileRequest_FamilyPath::BulkLoadHFileRequest_FamilyPath(const BulkLoadHFileRequest_FamilyPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family()) {
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.BulkLoadHFileRequest.FamilyPath)
}

void BulkLoadHFileRequest_FamilyPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkLoadHFileRequest_FamilyPath_Client_2eproto.base);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BulkLoadHFileRequest_FamilyPath::~BulkLoadHFileRequest_FamilyPath() {
  // @@protoc_insertion_point(destructor:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  SharedDtor();
}

void BulkLoadHFileRequest_FamilyPath::SharedDtor() {
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BulkLoadHFileRequest_FamilyPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkLoadHFileRequest_FamilyPath& BulkLoadHFileRequest_FamilyPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkLoadHFileRequest_FamilyPath_Client_2eproto.base);
  return *internal_default_instance();
}


void BulkLoadHFileRequest_FamilyPath::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BulkLoadHFileRequest_FamilyPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_path(), ptr, ctx, "hbase.pb.BulkLoadHFileRequest.FamilyPath.path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulkLoadHFileRequest_FamilyPath::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.BulkLoadHFileRequest.FamilyPath.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BulkLoadHFileRequest_FamilyPath::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->family(), output);
  }

  // required string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.BulkLoadHFileRequest.FamilyPath.path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.BulkLoadHFileRequest.FamilyPath)
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkLoadHFileRequest_FamilyPath::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->family(), target);
  }

  // required string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.BulkLoadHFileRequest.FamilyPath.path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  return target;
}

size_t BulkLoadHFileRequest_FamilyPath::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  size_t total_size = 0;

  if (has_family()) {
    // required bytes family = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());
  }

  if (has_path()) {
    // required string path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->path());
  }

  return total_size;
}
size_t BulkLoadHFileRequest_FamilyPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes family = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());

    // required string path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->path());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkLoadHFileRequest_FamilyPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkLoadHFileRequest_FamilyPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkLoadHFileRequest_FamilyPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.BulkLoadHFileRequest.FamilyPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.BulkLoadHFileRequest.FamilyPath)
    MergeFrom(*source);
  }
}

void BulkLoadHFileRequest_FamilyPath::MergeFrom(const BulkLoadHFileRequest_FamilyPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
  }
}

void BulkLoadHFileRequest_FamilyPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkLoadHFileRequest_FamilyPath::CopyFrom(const BulkLoadHFileRequest_FamilyPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.BulkLoadHFileRequest.FamilyPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkLoadHFileRequest_FamilyPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BulkLoadHFileRequest_FamilyPath::InternalSwap(BulkLoadHFileRequest_FamilyPath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkLoadHFileRequest_FamilyPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkLoadHFileRequest::InitAsDefaultInstance() {
  ::hbase::pb::_BulkLoadHFileRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
  ::hbase::pb::_BulkLoadHFileRequest_default_instance_._instance.get_mutable()->fs_token_ = const_cast< ::hbase::pb::DelegationToken*>(
      ::hbase::pb::DelegationToken::internal_default_instance());
}
class BulkLoadHFileRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkLoadHFileRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const BulkLoadHFileRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_assign_seq_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hbase::pb::DelegationToken& fs_token(const BulkLoadHFileRequest* msg);
  static void set_has_fs_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bulk_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_copy_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hbase::pb::RegionSpecifier&
BulkLoadHFileRequest::_Internal::region(const BulkLoadHFileRequest* msg) {
  return *msg->region_;
}
const ::hbase::pb::DelegationToken&
BulkLoadHFileRequest::_Internal::fs_token(const BulkLoadHFileRequest* msg) {
  return *msg->fs_token_;
}
void BulkLoadHFileRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BulkLoadHFileRequest::BulkLoadHFileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.BulkLoadHFileRequest)
}
BulkLoadHFileRequest::BulkLoadHFileRequest(const BulkLoadHFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      family_path_(from.family_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bulk_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_bulk_token()) {
    bulk_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bulk_token_);
  }
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_fs_token()) {
    fs_token_ = new ::hbase::pb::DelegationToken(*from.fs_token_);
  } else {
    fs_token_ = nullptr;
  }
  ::memcpy(&assign_seq_num_, &from.assign_seq_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&copy_file_) -
    reinterpret_cast<char*>(&assign_seq_num_)) + sizeof(copy_file_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.BulkLoadHFileRequest)
}

void BulkLoadHFileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkLoadHFileRequest_Client_2eproto.base);
  bulk_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copy_file_) -
      reinterpret_cast<char*>(&region_)) + sizeof(copy_file_));
}

BulkLoadHFileRequest::~BulkLoadHFileRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.BulkLoadHFileRequest)
  SharedDtor();
}

void BulkLoadHFileRequest::SharedDtor() {
  bulk_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete fs_token_;
}

void BulkLoadHFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkLoadHFileRequest& BulkLoadHFileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkLoadHFileRequest_Client_2eproto.base);
  return *internal_default_instance();
}


void BulkLoadHFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.BulkLoadHFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  family_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      bulk_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fs_token_ != nullptr);
      fs_token_->Clear();
    }
  }
  ::memset(&assign_seq_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copy_file_) -
      reinterpret_cast<char*>(&assign_seq_num_)) + sizeof(copy_file_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BulkLoadHFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_family_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional bool assign_seq_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_assign_seq_num(&has_bits);
          assign_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.DelegationToken fs_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_fs_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bulk_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_bulk_token(), ptr, ctx, "hbase.pb.BulkLoadHFileRequest.bulk_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool copy_file = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_copy_file(&has_bits);
          copy_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulkLoadHFileRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.BulkLoadHFileRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_family_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool assign_seq_num = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_assign_seq_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assign_seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.DelegationToken fs_token = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fs_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bulk_token = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bulk_token()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bulk_token().data(), static_cast<int>(this->bulk_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.BulkLoadHFileRequest.bulk_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool copy_file = 6 [default = false];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_copy_file(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &copy_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.BulkLoadHFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.BulkLoadHFileRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BulkLoadHFileRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.BulkLoadHFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->family_path_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->family_path(static_cast<int>(i)),
      output);
  }

  // optional bool assign_seq_num = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->assign_seq_num(), output);
  }

  // optional .hbase.pb.DelegationToken fs_token = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::fs_token(this), output);
  }

  // optional string bulk_token = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulk_token().data(), static_cast<int>(this->bulk_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.BulkLoadHFileRequest.bulk_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bulk_token(), output);
  }

  // optional bool copy_file = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->copy_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.BulkLoadHFileRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkLoadHFileRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.BulkLoadHFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->family_path_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->family_path(static_cast<int>(i)), target);
  }

  // optional bool assign_seq_num = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->assign_seq_num(), target);
  }

  // optional .hbase.pb.DelegationToken fs_token = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::fs_token(this), target);
  }

  // optional string bulk_token = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulk_token().data(), static_cast<int>(this->bulk_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.BulkLoadHFileRequest.bulk_token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->bulk_token(), target);
  }

  // optional bool copy_file = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->copy_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.BulkLoadHFileRequest)
  return target;
}

size_t BulkLoadHFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.BulkLoadHFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.BulkLoadHFileRequest.FamilyPath family_path = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->family_path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->family_path(static_cast<int>(i)));
    }
  }

  // optional string bulk_token = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bulk_token());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .hbase.pb.DelegationToken fs_token = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fs_token_);
    }

    // optional bool assign_seq_num = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool copy_file = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkLoadHFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.BulkLoadHFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkLoadHFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkLoadHFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.BulkLoadHFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.BulkLoadHFileRequest)
    MergeFrom(*source);
  }
}

void BulkLoadHFileRequest::MergeFrom(const BulkLoadHFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.BulkLoadHFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  family_path_.MergeFrom(from.family_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      bulk_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bulk_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_fs_token()->::hbase::pb::DelegationToken::MergeFrom(from.fs_token());
    }
    if (cached_has_bits & 0x00000008u) {
      assign_seq_num_ = from.assign_seq_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      copy_file_ = from.copy_file_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BulkLoadHFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.BulkLoadHFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkLoadHFileRequest::CopyFrom(const BulkLoadHFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.BulkLoadHFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkLoadHFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->family_path())) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void BulkLoadHFileRequest::InternalSwap(BulkLoadHFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&family_path_)->InternalSwap(CastToBase(&other->family_path_));
  bulk_token_.Swap(&other->bulk_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_, other->region_);
  swap(fs_token_, other->fs_token_);
  swap(assign_seq_num_, other->assign_seq_num_);
  swap(copy_file_, other->copy_file_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkLoadHFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkLoadHFileResponse::InitAsDefaultInstance() {
}
class BulkLoadHFileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkLoadHFileResponse>()._has_bits_);
  static void set_has_loaded(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BulkLoadHFileResponse::BulkLoadHFileResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.BulkLoadHFileResponse)
}
BulkLoadHFileResponse::BulkLoadHFileResponse(const BulkLoadHFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loaded_ = from.loaded_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.BulkLoadHFileResponse)
}

void BulkLoadHFileResponse::SharedCtor() {
  loaded_ = false;
}

BulkLoadHFileResponse::~BulkLoadHFileResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.BulkLoadHFileResponse)
  SharedDtor();
}

void BulkLoadHFileResponse::SharedDtor() {
}

void BulkLoadHFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkLoadHFileResponse& BulkLoadHFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkLoadHFileResponse_Client_2eproto.base);
  return *internal_default_instance();
}


void BulkLoadHFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.BulkLoadHFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loaded_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BulkLoadHFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool loaded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_loaded(&has_bits);
          loaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulkLoadHFileResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.BulkLoadHFileResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool loaded = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_loaded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.BulkLoadHFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.BulkLoadHFileResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BulkLoadHFileResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.BulkLoadHFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool loaded = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->loaded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.BulkLoadHFileResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkLoadHFileResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.BulkLoadHFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool loaded = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->loaded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.BulkLoadHFileResponse)
  return target;
}

size_t BulkLoadHFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.BulkLoadHFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool loaded = 1;
  if (has_loaded()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkLoadHFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.BulkLoadHFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkLoadHFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkLoadHFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.BulkLoadHFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.BulkLoadHFileResponse)
    MergeFrom(*source);
  }
}

void BulkLoadHFileResponse::MergeFrom(const BulkLoadHFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.BulkLoadHFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_loaded()) {
    set_loaded(from.loaded());
  }
}

void BulkLoadHFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.BulkLoadHFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkLoadHFileResponse::CopyFrom(const BulkLoadHFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.BulkLoadHFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkLoadHFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BulkLoadHFileResponse::InternalSwap(BulkLoadHFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(loaded_, other->loaded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkLoadHFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelegationToken::InitAsDefaultInstance() {
}
class DelegationToken::_Internal {
 public:
  using HasBits = decltype(std::declval<DelegationToken>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DelegationToken::DelegationToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.DelegationToken)
}
DelegationToken::DelegationToken(const DelegationToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_identifier()) {
    identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_kind()) {
    kind_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_service()) {
    service_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.DelegationToken)
}

void DelegationToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegationToken_Client_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DelegationToken::~DelegationToken() {
  // @@protoc_insertion_point(destructor:hbase.pb.DelegationToken)
  SharedDtor();
}

void DelegationToken::SharedDtor() {
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegationToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegationToken& DelegationToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegationToken_Client_2eproto.base);
  return *internal_default_instance();
}


void DelegationToken::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.DelegationToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      kind_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      service_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DelegationToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_identifier(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_password(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_kind(), ptr, ctx, "hbase.pb.DelegationToken.kind");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string service = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_service(), ptr, ctx, "hbase.pb.DelegationToken.service");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DelegationToken::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.DelegationToken)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes identifier = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string kind = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.DelegationToken.kind");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service().data(), static_cast<int>(this->service().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.DelegationToken.service");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.DelegationToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.DelegationToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DelegationToken::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.DelegationToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->identifier(), output);
  }

  // optional bytes password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // optional string kind = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.DelegationToken.kind");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->kind(), output);
  }

  // optional string service = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), static_cast<int>(this->service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.DelegationToken.service");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->service(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.DelegationToken)
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegationToken::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.DelegationToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->identifier(), target);
  }

  // optional bytes password = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // optional string kind = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.DelegationToken.kind");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->kind(), target);
  }

  // optional string service = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service().data(), static_cast<int>(this->service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.DelegationToken.service");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->service(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.DelegationToken)
  return target;
}

size_t DelegationToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.DelegationToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->identifier());
    }

    // optional bytes password = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional string kind = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->kind());
    }

    // optional string service = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->service());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegationToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.DelegationToken)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegationToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegationToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.DelegationToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.DelegationToken)
    MergeFrom(*source);
  }
}

void DelegationToken::MergeFrom(const DelegationToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.DelegationToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      kind_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kind_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      service_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_);
    }
  }
}

void DelegationToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.DelegationToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegationToken::CopyFrom(const DelegationToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.DelegationToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegationToken::IsInitialized() const {
  return true;
}

void DelegationToken::InternalSwap(DelegationToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kind_.Swap(&other->kind_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_.Swap(&other->service_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegationToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareBulkLoadRequest::InitAsDefaultInstance() {
  ::hbase::pb::_PrepareBulkLoadRequest_default_instance_._instance.get_mutable()->table_name_ = const_cast< ::hbase::pb::TableName*>(
      ::hbase::pb::TableName::internal_default_instance());
  ::hbase::pb::_PrepareBulkLoadRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class PrepareBulkLoadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PrepareBulkLoadRequest>()._has_bits_);
  static const ::hbase::pb::TableName& table_name(const PrepareBulkLoadRequest* msg);
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::RegionSpecifier& region(const PrepareBulkLoadRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::TableName&
PrepareBulkLoadRequest::_Internal::table_name(const PrepareBulkLoadRequest* msg) {
  return *msg->table_name_;
}
const ::hbase::pb::RegionSpecifier&
PrepareBulkLoadRequest::_Internal::region(const PrepareBulkLoadRequest* msg) {
  return *msg->region_;
}
void PrepareBulkLoadRequest::clear_table_name() {
  if (table_name_ != nullptr) table_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PrepareBulkLoadRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PrepareBulkLoadRequest::PrepareBulkLoadRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.PrepareBulkLoadRequest)
}
PrepareBulkLoadRequest::PrepareBulkLoadRequest(const PrepareBulkLoadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_name()) {
    table_name_ = new ::hbase::pb::TableName(*from.table_name_);
  } else {
    table_name_ = nullptr;
  }
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.PrepareBulkLoadRequest)
}

void PrepareBulkLoadRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareBulkLoadRequest_Client_2eproto.base);
  ::memset(&table_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&table_name_)) + sizeof(region_));
}

PrepareBulkLoadRequest::~PrepareBulkLoadRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.PrepareBulkLoadRequest)
  SharedDtor();
}

void PrepareBulkLoadRequest::SharedDtor() {
  if (this != internal_default_instance()) delete table_name_;
  if (this != internal_default_instance()) delete region_;
}

void PrepareBulkLoadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareBulkLoadRequest& PrepareBulkLoadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareBulkLoadRequest_Client_2eproto.base);
  return *internal_default_instance();
}


void PrepareBulkLoadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.PrepareBulkLoadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_name_ != nullptr);
      table_name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareBulkLoadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.TableName table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_table_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.RegionSpecifier region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareBulkLoadRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.PrepareBulkLoadRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.RegionSpecifier region = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.PrepareBulkLoadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.PrepareBulkLoadRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareBulkLoadRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.PrepareBulkLoadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.TableName table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::table_name(this), output);
  }

  // optional .hbase.pb.RegionSpecifier region = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.PrepareBulkLoadRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareBulkLoadRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.PrepareBulkLoadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.TableName table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::table_name(this), target);
  }

  // optional .hbase.pb.RegionSpecifier region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::region(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.PrepareBulkLoadRequest)
  return target;
}

size_t PrepareBulkLoadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.PrepareBulkLoadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.TableName table_name = 1;
  if (has_table_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_name_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hbase.pb.RegionSpecifier region = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareBulkLoadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.PrepareBulkLoadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareBulkLoadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareBulkLoadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.PrepareBulkLoadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.PrepareBulkLoadRequest)
    MergeFrom(*source);
  }
}

void PrepareBulkLoadRequest::MergeFrom(const PrepareBulkLoadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.PrepareBulkLoadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
  }
}

void PrepareBulkLoadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.PrepareBulkLoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareBulkLoadRequest::CopyFrom(const PrepareBulkLoadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.PrepareBulkLoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareBulkLoadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_table_name()) {
    if (!this->table_name_->IsInitialized()) return false;
  }
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void PrepareBulkLoadRequest::InternalSwap(PrepareBulkLoadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(table_name_, other->table_name_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareBulkLoadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareBulkLoadResponse::InitAsDefaultInstance() {
}
class PrepareBulkLoadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PrepareBulkLoadResponse>()._has_bits_);
  static void set_has_bulk_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PrepareBulkLoadResponse::PrepareBulkLoadResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.PrepareBulkLoadResponse)
}
PrepareBulkLoadResponse::PrepareBulkLoadResponse(const PrepareBulkLoadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bulk_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_bulk_token()) {
    bulk_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bulk_token_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.PrepareBulkLoadResponse)
}

void PrepareBulkLoadResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareBulkLoadResponse_Client_2eproto.base);
  bulk_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareBulkLoadResponse::~PrepareBulkLoadResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.PrepareBulkLoadResponse)
  SharedDtor();
}

void PrepareBulkLoadResponse::SharedDtor() {
  bulk_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareBulkLoadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareBulkLoadResponse& PrepareBulkLoadResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareBulkLoadResponse_Client_2eproto.base);
  return *internal_default_instance();
}


void PrepareBulkLoadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.PrepareBulkLoadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    bulk_token_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareBulkLoadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string bulk_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_bulk_token(), ptr, ctx, "hbase.pb.PrepareBulkLoadResponse.bulk_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareBulkLoadResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.PrepareBulkLoadResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bulk_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bulk_token()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bulk_token().data(), static_cast<int>(this->bulk_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.PrepareBulkLoadResponse.bulk_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.PrepareBulkLoadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.PrepareBulkLoadResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareBulkLoadResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.PrepareBulkLoadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string bulk_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulk_token().data(), static_cast<int>(this->bulk_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.PrepareBulkLoadResponse.bulk_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bulk_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.PrepareBulkLoadResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareBulkLoadResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.PrepareBulkLoadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string bulk_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulk_token().data(), static_cast<int>(this->bulk_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.PrepareBulkLoadResponse.bulk_token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->bulk_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.PrepareBulkLoadResponse)
  return target;
}

size_t PrepareBulkLoadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.PrepareBulkLoadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string bulk_token = 1;
  if (has_bulk_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bulk_token());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareBulkLoadResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.PrepareBulkLoadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareBulkLoadResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareBulkLoadResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.PrepareBulkLoadResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.PrepareBulkLoadResponse)
    MergeFrom(*source);
  }
}

void PrepareBulkLoadResponse::MergeFrom(const PrepareBulkLoadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.PrepareBulkLoadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bulk_token()) {
    _has_bits_[0] |= 0x00000001u;
    bulk_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bulk_token_);
  }
}

void PrepareBulkLoadResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.PrepareBulkLoadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareBulkLoadResponse::CopyFrom(const PrepareBulkLoadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.PrepareBulkLoadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareBulkLoadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PrepareBulkLoadResponse::InternalSwap(PrepareBulkLoadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bulk_token_.Swap(&other->bulk_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareBulkLoadResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanupBulkLoadRequest::InitAsDefaultInstance() {
  ::hbase::pb::_CleanupBulkLoadRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class CleanupBulkLoadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanupBulkLoadRequest>()._has_bits_);
  static void set_has_bulk_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::RegionSpecifier& region(const CleanupBulkLoadRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionSpecifier&
CleanupBulkLoadRequest::_Internal::region(const CleanupBulkLoadRequest* msg) {
  return *msg->region_;
}
void CleanupBulkLoadRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CleanupBulkLoadRequest::CleanupBulkLoadRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CleanupBulkLoadRequest)
}
CleanupBulkLoadRequest::CleanupBulkLoadRequest(const CleanupBulkLoadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bulk_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_bulk_token()) {
    bulk_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bulk_token_);
  }
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CleanupBulkLoadRequest)
}

void CleanupBulkLoadRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CleanupBulkLoadRequest_Client_2eproto.base);
  bulk_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_ = nullptr;
}

CleanupBulkLoadRequest::~CleanupBulkLoadRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.CleanupBulkLoadRequest)
  SharedDtor();
}

void CleanupBulkLoadRequest::SharedDtor() {
  bulk_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_;
}

void CleanupBulkLoadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanupBulkLoadRequest& CleanupBulkLoadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanupBulkLoadRequest_Client_2eproto.base);
  return *internal_default_instance();
}


void CleanupBulkLoadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CleanupBulkLoadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bulk_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanupBulkLoadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string bulk_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_bulk_token(), ptr, ctx, "hbase.pb.CleanupBulkLoadRequest.bulk_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.RegionSpecifier region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanupBulkLoadRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CleanupBulkLoadRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bulk_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bulk_token()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bulk_token().data(), static_cast<int>(this->bulk_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.CleanupBulkLoadRequest.bulk_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.RegionSpecifier region = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CleanupBulkLoadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CleanupBulkLoadRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanupBulkLoadRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CleanupBulkLoadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string bulk_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulk_token().data(), static_cast<int>(this->bulk_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CleanupBulkLoadRequest.bulk_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bulk_token(), output);
  }

  // optional .hbase.pb.RegionSpecifier region = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CleanupBulkLoadRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanupBulkLoadRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CleanupBulkLoadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string bulk_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulk_token().data(), static_cast<int>(this->bulk_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CleanupBulkLoadRequest.bulk_token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->bulk_token(), target);
  }

  // optional .hbase.pb.RegionSpecifier region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::region(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CleanupBulkLoadRequest)
  return target;
}

size_t CleanupBulkLoadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CleanupBulkLoadRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string bulk_token = 1;
  if (has_bulk_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bulk_token());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hbase.pb.RegionSpecifier region = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanupBulkLoadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CleanupBulkLoadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupBulkLoadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanupBulkLoadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CleanupBulkLoadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CleanupBulkLoadRequest)
    MergeFrom(*source);
  }
}

void CleanupBulkLoadRequest::MergeFrom(const CleanupBulkLoadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CleanupBulkLoadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      bulk_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bulk_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
  }
}

void CleanupBulkLoadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CleanupBulkLoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupBulkLoadRequest::CopyFrom(const CleanupBulkLoadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CleanupBulkLoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupBulkLoadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void CleanupBulkLoadRequest::InternalSwap(CleanupBulkLoadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bulk_token_.Swap(&other->bulk_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanupBulkLoadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanupBulkLoadResponse::InitAsDefaultInstance() {
}
class CleanupBulkLoadResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanupBulkLoadResponse>()._has_bits_);
};

CleanupBulkLoadResponse::CleanupBulkLoadResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CleanupBulkLoadResponse)
}
CleanupBulkLoadResponse::CleanupBulkLoadResponse(const CleanupBulkLoadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CleanupBulkLoadResponse)
}

void CleanupBulkLoadResponse::SharedCtor() {
}

CleanupBulkLoadResponse::~CleanupBulkLoadResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.CleanupBulkLoadResponse)
  SharedDtor();
}

void CleanupBulkLoadResponse::SharedDtor() {
}

void CleanupBulkLoadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanupBulkLoadResponse& CleanupBulkLoadResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanupBulkLoadResponse_Client_2eproto.base);
  return *internal_default_instance();
}


void CleanupBulkLoadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CleanupBulkLoadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanupBulkLoadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanupBulkLoadResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CleanupBulkLoadResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CleanupBulkLoadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CleanupBulkLoadResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanupBulkLoadResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CleanupBulkLoadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CleanupBulkLoadResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanupBulkLoadResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CleanupBulkLoadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CleanupBulkLoadResponse)
  return target;
}

size_t CleanupBulkLoadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CleanupBulkLoadResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanupBulkLoadResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CleanupBulkLoadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanupBulkLoadResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanupBulkLoadResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CleanupBulkLoadResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CleanupBulkLoadResponse)
    MergeFrom(*source);
  }
}

void CleanupBulkLoadResponse::MergeFrom(const CleanupBulkLoadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CleanupBulkLoadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CleanupBulkLoadResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CleanupBulkLoadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupBulkLoadResponse::CopyFrom(const CleanupBulkLoadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CleanupBulkLoadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupBulkLoadResponse::IsInitialized() const {
  return true;
}

void CleanupBulkLoadResponse::InternalSwap(CleanupBulkLoadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanupBulkLoadResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoprocessorServiceCall::InitAsDefaultInstance() {
}
class CoprocessorServiceCall::_Internal {
 public:
  using HasBits = decltype(std::declval<CoprocessorServiceCall>()._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CoprocessorServiceCall::CoprocessorServiceCall()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CoprocessorServiceCall)
}
CoprocessorServiceCall::CoprocessorServiceCall(const CoprocessorServiceCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_row()) {
    row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_name()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_name()) {
    method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_request()) {
    request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CoprocessorServiceCall)
}

void CoprocessorServiceCall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoprocessorServiceCall_Client_2eproto.base);
  row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CoprocessorServiceCall::~CoprocessorServiceCall() {
  // @@protoc_insertion_point(destructor:hbase.pb.CoprocessorServiceCall)
  SharedDtor();
}

void CoprocessorServiceCall::SharedDtor() {
  row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoprocessorServiceCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoprocessorServiceCall& CoprocessorServiceCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoprocessorServiceCall_Client_2eproto.base);
  return *internal_default_instance();
}


void CoprocessorServiceCall::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CoprocessorServiceCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      row_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      service_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      request_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CoprocessorServiceCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_service_name(), ptr, ctx, "hbase.pb.CoprocessorServiceCall.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_method_name(), ptr, ctx, "hbase.pb.CoprocessorServiceCall.method_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_request(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CoprocessorServiceCall::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CoprocessorServiceCall)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes row = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string service_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.CoprocessorServiceCall.service_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string method_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.CoprocessorServiceCall.method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes request = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CoprocessorServiceCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CoprocessorServiceCall)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CoprocessorServiceCall::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CoprocessorServiceCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row(), output);
  }

  // required string service_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CoprocessorServiceCall.service_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_name(), output);
  }

  // required string method_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CoprocessorServiceCall.method_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method_name(), output);
  }

  // required bytes request = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CoprocessorServiceCall)
}

::PROTOBUF_NAMESPACE_ID::uint8* CoprocessorServiceCall::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CoprocessorServiceCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes row = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->row(), target);
  }

  // required string service_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CoprocessorServiceCall.service_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }

  // required string method_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CoprocessorServiceCall.method_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  // required bytes request = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->request(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CoprocessorServiceCall)
  return target;
}

size_t CoprocessorServiceCall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.CoprocessorServiceCall)
  size_t total_size = 0;

  if (has_row()) {
    // required bytes row = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->row());
  }

  if (has_service_name()) {
    // required string service_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  if (has_method_name()) {
    // required string method_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  if (has_request()) {
    // required bytes request = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->request());
  }

  return total_size;
}
size_t CoprocessorServiceCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CoprocessorServiceCall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes row = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->row());

    // required string service_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->service_name());

    // required string method_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->method_name());

    // required bytes request = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->request());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoprocessorServiceCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CoprocessorServiceCall)
  GOOGLE_DCHECK_NE(&from, this);
  const CoprocessorServiceCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoprocessorServiceCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CoprocessorServiceCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CoprocessorServiceCall)
    MergeFrom(*source);
  }
}

void CoprocessorServiceCall::MergeFrom(const CoprocessorServiceCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CoprocessorServiceCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.row_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_);
    }
  }
}

void CoprocessorServiceCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CoprocessorServiceCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoprocessorServiceCall::CopyFrom(const CoprocessorServiceCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CoprocessorServiceCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoprocessorServiceCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CoprocessorServiceCall::InternalSwap(CoprocessorServiceCall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_.Swap(&other->row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_name_.Swap(&other->method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_.Swap(&other->request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CoprocessorServiceCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoprocessorServiceResult::InitAsDefaultInstance() {
  ::hbase::pb::_CoprocessorServiceResult_default_instance_._instance.get_mutable()->value_ = const_cast< ::hbase::pb::NameBytesPair*>(
      ::hbase::pb::NameBytesPair::internal_default_instance());
}
class CoprocessorServiceResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CoprocessorServiceResult>()._has_bits_);
  static const ::hbase::pb::NameBytesPair& value(const CoprocessorServiceResult* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::NameBytesPair&
CoprocessorServiceResult::_Internal::value(const CoprocessorServiceResult* msg) {
  return *msg->value_;
}
void CoprocessorServiceResult::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CoprocessorServiceResult::CoprocessorServiceResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CoprocessorServiceResult)
}
CoprocessorServiceResult::CoprocessorServiceResult(const CoprocessorServiceResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::hbase::pb::NameBytesPair(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CoprocessorServiceResult)
}

void CoprocessorServiceResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoprocessorServiceResult_Client_2eproto.base);
  value_ = nullptr;
}

CoprocessorServiceResult::~CoprocessorServiceResult() {
  // @@protoc_insertion_point(destructor:hbase.pb.CoprocessorServiceResult)
  SharedDtor();
}

void CoprocessorServiceResult::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void CoprocessorServiceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoprocessorServiceResult& CoprocessorServiceResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoprocessorServiceResult_Client_2eproto.base);
  return *internal_default_instance();
}


void CoprocessorServiceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CoprocessorServiceResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(value_ != nullptr);
    value_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CoprocessorServiceResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hbase.pb.NameBytesPair value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CoprocessorServiceResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CoprocessorServiceResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.NameBytesPair value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CoprocessorServiceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CoprocessorServiceResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CoprocessorServiceResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CoprocessorServiceResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.NameBytesPair value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CoprocessorServiceResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* CoprocessorServiceResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CoprocessorServiceResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.NameBytesPair value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CoprocessorServiceResult)
  return target;
}

size_t CoprocessorServiceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CoprocessorServiceResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hbase.pb.NameBytesPair value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoprocessorServiceResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CoprocessorServiceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CoprocessorServiceResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoprocessorServiceResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CoprocessorServiceResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CoprocessorServiceResult)
    MergeFrom(*source);
  }
}

void CoprocessorServiceResult::MergeFrom(const CoprocessorServiceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CoprocessorServiceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::hbase::pb::NameBytesPair::MergeFrom(from.value());
  }
}

void CoprocessorServiceResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CoprocessorServiceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoprocessorServiceResult::CopyFrom(const CoprocessorServiceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CoprocessorServiceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoprocessorServiceResult::IsInitialized() const {
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void CoprocessorServiceResult::InternalSwap(CoprocessorServiceResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoprocessorServiceResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoprocessorServiceRequest::InitAsDefaultInstance() {
  ::hbase::pb::_CoprocessorServiceRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
  ::hbase::pb::_CoprocessorServiceRequest_default_instance_._instance.get_mutable()->call_ = const_cast< ::hbase::pb::CoprocessorServiceCall*>(
      ::hbase::pb::CoprocessorServiceCall::internal_default_instance());
}
class CoprocessorServiceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CoprocessorServiceRequest>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const CoprocessorServiceRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::CoprocessorServiceCall& call(const CoprocessorServiceRequest* msg);
  static void set_has_call(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionSpecifier&
CoprocessorServiceRequest::_Internal::region(const CoprocessorServiceRequest* msg) {
  return *msg->region_;
}
const ::hbase::pb::CoprocessorServiceCall&
CoprocessorServiceRequest::_Internal::call(const CoprocessorServiceRequest* msg) {
  return *msg->call_;
}
void CoprocessorServiceRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CoprocessorServiceRequest::CoprocessorServiceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CoprocessorServiceRequest)
}
CoprocessorServiceRequest::CoprocessorServiceRequest(const CoprocessorServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_call()) {
    call_ = new ::hbase::pb::CoprocessorServiceCall(*from.call_);
  } else {
    call_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CoprocessorServiceRequest)
}

void CoprocessorServiceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoprocessorServiceRequest_Client_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_) -
      reinterpret_cast<char*>(&region_)) + sizeof(call_));
}

CoprocessorServiceRequest::~CoprocessorServiceRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.CoprocessorServiceRequest)
  SharedDtor();
}

void CoprocessorServiceRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete call_;
}

void CoprocessorServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoprocessorServiceRequest& CoprocessorServiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoprocessorServiceRequest_Client_2eproto.base);
  return *internal_default_instance();
}


void CoprocessorServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CoprocessorServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(call_ != nullptr);
      call_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CoprocessorServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.CoprocessorServiceCall call = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CoprocessorServiceRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CoprocessorServiceRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.CoprocessorServiceCall call = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_call()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CoprocessorServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CoprocessorServiceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CoprocessorServiceRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CoprocessorServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // required .hbase.pb.CoprocessorServiceCall call = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::call(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CoprocessorServiceRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CoprocessorServiceRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CoprocessorServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // required .hbase.pb.CoprocessorServiceCall call = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::call(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CoprocessorServiceRequest)
  return target;
}

size_t CoprocessorServiceRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.CoprocessorServiceRequest)
  size_t total_size = 0;

  if (has_region()) {
    // required .hbase.pb.RegionSpecifier region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  if (has_call()) {
    // required .hbase.pb.CoprocessorServiceCall call = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  return total_size;
}
size_t CoprocessorServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CoprocessorServiceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .hbase.pb.RegionSpecifier region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);

    // required .hbase.pb.CoprocessorServiceCall call = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoprocessorServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CoprocessorServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CoprocessorServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoprocessorServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CoprocessorServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CoprocessorServiceRequest)
    MergeFrom(*source);
  }
}

void CoprocessorServiceRequest::MergeFrom(const CoprocessorServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CoprocessorServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_call()->::hbase::pb::CoprocessorServiceCall::MergeFrom(from.call());
    }
  }
}

void CoprocessorServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CoprocessorServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoprocessorServiceRequest::CopyFrom(const CoprocessorServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CoprocessorServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoprocessorServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  if (has_call()) {
    if (!this->call_->IsInitialized()) return false;
  }
  return true;
}

void CoprocessorServiceRequest::InternalSwap(CoprocessorServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_, other->region_);
  swap(call_, other->call_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoprocessorServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoprocessorServiceResponse::InitAsDefaultInstance() {
  ::hbase::pb::_CoprocessorServiceResponse_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
  ::hbase::pb::_CoprocessorServiceResponse_default_instance_._instance.get_mutable()->value_ = const_cast< ::hbase::pb::NameBytesPair*>(
      ::hbase::pb::NameBytesPair::internal_default_instance());
}
class CoprocessorServiceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CoprocessorServiceResponse>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const CoprocessorServiceResponse* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::NameBytesPair& value(const CoprocessorServiceResponse* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionSpecifier&
CoprocessorServiceResponse::_Internal::region(const CoprocessorServiceResponse* msg) {
  return *msg->region_;
}
const ::hbase::pb::NameBytesPair&
CoprocessorServiceResponse::_Internal::value(const CoprocessorServiceResponse* msg) {
  return *msg->value_;
}
void CoprocessorServiceResponse::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CoprocessorServiceResponse::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CoprocessorServiceResponse::CoprocessorServiceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CoprocessorServiceResponse)
}
CoprocessorServiceResponse::CoprocessorServiceResponse(const CoprocessorServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_value()) {
    value_ = new ::hbase::pb::NameBytesPair(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CoprocessorServiceResponse)
}

void CoprocessorServiceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoprocessorServiceResponse_Client_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&region_)) + sizeof(value_));
}

CoprocessorServiceResponse::~CoprocessorServiceResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.CoprocessorServiceResponse)
  SharedDtor();
}

void CoprocessorServiceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete value_;
}

void CoprocessorServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoprocessorServiceResponse& CoprocessorServiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoprocessorServiceResponse_Client_2eproto.base);
  return *internal_default_instance();
}


void CoprocessorServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CoprocessorServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CoprocessorServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.NameBytesPair value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CoprocessorServiceResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CoprocessorServiceResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.NameBytesPair value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CoprocessorServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CoprocessorServiceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CoprocessorServiceResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CoprocessorServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // required .hbase.pb.NameBytesPair value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CoprocessorServiceResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CoprocessorServiceResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CoprocessorServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // required .hbase.pb.NameBytesPair value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CoprocessorServiceResponse)
  return target;
}

size_t CoprocessorServiceResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.CoprocessorServiceResponse)
  size_t total_size = 0;

  if (has_region()) {
    // required .hbase.pb.RegionSpecifier region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  if (has_value()) {
    // required .hbase.pb.NameBytesPair value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t CoprocessorServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CoprocessorServiceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .hbase.pb.RegionSpecifier region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);

    // required .hbase.pb.NameBytesPair value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoprocessorServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CoprocessorServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CoprocessorServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoprocessorServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CoprocessorServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CoprocessorServiceResponse)
    MergeFrom(*source);
  }
}

void CoprocessorServiceResponse::MergeFrom(const CoprocessorServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CoprocessorServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_value()->::hbase::pb::NameBytesPair::MergeFrom(from.value());
    }
  }
}

void CoprocessorServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CoprocessorServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoprocessorServiceResponse::CopyFrom(const CoprocessorServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CoprocessorServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoprocessorServiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value_->IsInitialized()) return false;
  }
  return true;
}

void CoprocessorServiceResponse::InternalSwap(CoprocessorServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_, other->region_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoprocessorServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Action::InitAsDefaultInstance() {
  ::hbase::pb::_Action_default_instance_._instance.get_mutable()->mutation_ = const_cast< ::hbase::pb::MutationProto*>(
      ::hbase::pb::MutationProto::internal_default_instance());
  ::hbase::pb::_Action_default_instance_._instance.get_mutable()->get_ = const_cast< ::hbase::pb::Get*>(
      ::hbase::pb::Get::internal_default_instance());
  ::hbase::pb::_Action_default_instance_._instance.get_mutable()->service_call_ = const_cast< ::hbase::pb::CoprocessorServiceCall*>(
      ::hbase::pb::CoprocessorServiceCall::internal_default_instance());
}
class Action::_Internal {
 public:
  using HasBits = decltype(std::declval<Action>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hbase::pb::MutationProto& mutation(const Action* msg);
  static void set_has_mutation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::Get& get(const Action* msg);
  static void set_has_get(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::CoprocessorServiceCall& service_call(const Action* msg);
  static void set_has_service_call(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::MutationProto&
Action::_Internal::mutation(const Action* msg) {
  return *msg->mutation_;
}
const ::hbase::pb::Get&
Action::_Internal::get(const Action* msg) {
  return *msg->get_;
}
const ::hbase::pb::CoprocessorServiceCall&
Action::_Internal::service_call(const Action* msg) {
  return *msg->service_call_;
}
Action::Action()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mutation()) {
    mutation_ = new ::hbase::pb::MutationProto(*from.mutation_);
  } else {
    mutation_ = nullptr;
  }
  if (from.has_get()) {
    get_ = new ::hbase::pb::Get(*from.get_);
  } else {
    get_ = nullptr;
  }
  if (from.has_service_call()) {
    service_call_ = new ::hbase::pb::CoprocessorServiceCall(*from.service_call_);
  } else {
    service_call_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Action)
}

void Action::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Action_Client_2eproto.base);
  ::memset(&mutation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&mutation_)) + sizeof(index_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:hbase.pb.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != internal_default_instance()) delete mutation_;
  if (this != internal_default_instance()) delete get_;
  if (this != internal_default_instance()) delete service_call_;
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Action_Client_2eproto.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mutation_ != nullptr);
      mutation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(get_ != nullptr);
      get_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(service_call_ != nullptr);
      service_call_->Clear();
    }
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.MutationProto mutation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mutation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Get get = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.CoprocessorServiceCall service_call = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_service_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Action)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.MutationProto mutation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mutation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Get get = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.CoprocessorServiceCall service_call = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service_call()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Action)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .hbase.pb.MutationProto mutation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::mutation(this), output);
  }

  // optional .hbase.pb.Get get = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::get(this), output);
  }

  // optional .hbase.pb.CoprocessorServiceCall service_call = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::service_call(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Action)
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .hbase.pb.MutationProto mutation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::mutation(this), target);
  }

  // optional .hbase.pb.Get get = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::get(this), target);
  }

  // optional .hbase.pb.CoprocessorServiceCall service_call = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::service_call(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .hbase.pb.MutationProto mutation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_);
    }

    // optional .hbase.pb.Get get = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *get_);
    }

    // optional .hbase.pb.CoprocessorServiceCall service_call = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_call_);
    }

    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mutation()->::hbase::pb::MutationProto::MergeFrom(from.mutation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_get()->::hbase::pb::Get::MergeFrom(from.get());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_service_call()->::hbase::pb::CoprocessorServiceCall::MergeFrom(from.service_call());
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if (has_mutation()) {
    if (!this->mutation_->IsInitialized()) return false;
  }
  if (has_get()) {
    if (!this->get_->IsInitialized()) return false;
  }
  if (has_service_call()) {
    if (!this->service_call_->IsInitialized()) return false;
  }
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mutation_, other->mutation_);
  swap(get_, other->get_);
  swap(service_call_, other->service_call_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionAction::InitAsDefaultInstance() {
  ::hbase::pb::_RegionAction_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class RegionAction::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionAction>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region(const RegionAction* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_atomic(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionSpecifier&
RegionAction::_Internal::region(const RegionAction* msg) {
  return *msg->region_;
}
void RegionAction::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RegionAction::RegionAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RegionAction)
}
RegionAction::RegionAction(const RegionAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      action_(from.action_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  atomic_ = from.atomic_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RegionAction)
}

void RegionAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionAction_Client_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atomic_) -
      reinterpret_cast<char*>(&region_)) + sizeof(atomic_));
}

RegionAction::~RegionAction() {
  // @@protoc_insertion_point(destructor:hbase.pb.RegionAction)
  SharedDtor();
}

void RegionAction::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void RegionAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionAction& RegionAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionAction_Client_2eproto.base);
  return *internal_default_instance();
}


void RegionAction::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RegionAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_ != nullptr);
    region_->Clear();
  }
  atomic_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool atomic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_atomic(&has_bits);
          atomic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_action(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionAction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RegionAction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool atomic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_atomic(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &atomic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.Action action = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RegionAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RegionAction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionAction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RegionAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region(this), output);
  }

  // optional bool atomic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->atomic(), output);
  }

  // repeated .hbase.pb.Action action = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->action(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RegionAction)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionAction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RegionAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region(this), target);
  }

  // optional bool atomic = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->atomic(), target);
  }

  // repeated .hbase.pb.Action action = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->action(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RegionAction)
  return target;
}

size_t RegionAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RegionAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionSpecifier region = 1;
  if (has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.Action action = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->action_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->action(static_cast<int>(i)));
    }
  }

  // optional bool atomic = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RegionAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RegionAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RegionAction)
    MergeFrom(*source);
  }
}

void RegionAction::MergeFrom(const RegionAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RegionAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_.MergeFrom(from.action_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      atomic_ = from.atomic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RegionAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionAction::CopyFrom(const RegionAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RegionAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->action())) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void RegionAction::InternalSwap(RegionAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&action_)->InternalSwap(CastToBase(&other->action_));
  swap(region_, other->region_);
  swap(atomic_, other->atomic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionLoadStats::InitAsDefaultInstance() {
}
class RegionLoadStats::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionLoadStats>()._has_bits_);
  static void set_has_memstoreload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heapoccupancy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compactionpressure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RegionLoadStats::RegionLoadStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RegionLoadStats)
}
RegionLoadStats::RegionLoadStats(const RegionLoadStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memstoreload_, &from.memstoreload_,
    static_cast<size_t>(reinterpret_cast<char*>(&compactionpressure_) -
    reinterpret_cast<char*>(&memstoreload_)) + sizeof(compactionpressure_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RegionLoadStats)
}

void RegionLoadStats::SharedCtor() {
  ::memset(&memstoreload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compactionpressure_) -
      reinterpret_cast<char*>(&memstoreload_)) + sizeof(compactionpressure_));
}

RegionLoadStats::~RegionLoadStats() {
  // @@protoc_insertion_point(destructor:hbase.pb.RegionLoadStats)
  SharedDtor();
}

void RegionLoadStats::SharedDtor() {
}

void RegionLoadStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionLoadStats& RegionLoadStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionLoadStats_Client_2eproto.base);
  return *internal_default_instance();
}


void RegionLoadStats::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RegionLoadStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&memstoreload_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compactionpressure_) -
        reinterpret_cast<char*>(&memstoreload_)) + sizeof(compactionpressure_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionLoadStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 memStoreLoad = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memstoreload(&has_bits);
          memstoreload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 heapOccupancy = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_heapoccupancy(&has_bits);
          heapoccupancy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 compactionPressure = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_compactionpressure(&has_bits);
          compactionpressure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionLoadStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RegionLoadStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 memStoreLoad = 1 [default = 0];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_memstoreload(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &memstoreload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 heapOccupancy = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_heapoccupancy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &heapoccupancy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 compactionPressure = 3 [default = 0];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_compactionpressure(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &compactionpressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RegionLoadStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RegionLoadStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionLoadStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RegionLoadStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 memStoreLoad = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->memstoreload(), output);
  }

  // optional int32 heapOccupancy = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->heapoccupancy(), output);
  }

  // optional int32 compactionPressure = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->compactionpressure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RegionLoadStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionLoadStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RegionLoadStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 memStoreLoad = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->memstoreload(), target);
  }

  // optional int32 heapOccupancy = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->heapoccupancy(), target);
  }

  // optional int32 compactionPressure = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->compactionpressure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RegionLoadStats)
  return target;
}

size_t RegionLoadStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RegionLoadStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 memStoreLoad = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->memstoreload());
    }

    // optional int32 heapOccupancy = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->heapoccupancy());
    }

    // optional int32 compactionPressure = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->compactionpressure());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionLoadStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RegionLoadStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionLoadStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionLoadStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RegionLoadStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RegionLoadStats)
    MergeFrom(*source);
  }
}

void RegionLoadStats::MergeFrom(const RegionLoadStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RegionLoadStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      memstoreload_ = from.memstoreload_;
    }
    if (cached_has_bits & 0x00000002u) {
      heapoccupancy_ = from.heapoccupancy_;
    }
    if (cached_has_bits & 0x00000004u) {
      compactionpressure_ = from.compactionpressure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionLoadStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RegionLoadStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLoadStats::CopyFrom(const RegionLoadStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RegionLoadStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLoadStats::IsInitialized() const {
  return true;
}

void RegionLoadStats::InternalSwap(RegionLoadStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(memstoreload_, other->memstoreload_);
  swap(heapoccupancy_, other->heapoccupancy_);
  swap(compactionpressure_, other->compactionpressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionLoadStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiRegionLoadStats::InitAsDefaultInstance() {
}
class MultiRegionLoadStats::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiRegionLoadStats>()._has_bits_);
};

void MultiRegionLoadStats::clear_region() {
  region_.Clear();
}
MultiRegionLoadStats::MultiRegionLoadStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MultiRegionLoadStats)
}
MultiRegionLoadStats::MultiRegionLoadStats(const MultiRegionLoadStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      region_(from.region_),
      stat_(from.stat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MultiRegionLoadStats)
}

void MultiRegionLoadStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiRegionLoadStats_Client_2eproto.base);
}

MultiRegionLoadStats::~MultiRegionLoadStats() {
  // @@protoc_insertion_point(destructor:hbase.pb.MultiRegionLoadStats)
  SharedDtor();
}

void MultiRegionLoadStats::SharedDtor() {
}

void MultiRegionLoadStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRegionLoadStats& MultiRegionLoadStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRegionLoadStats_Client_2eproto.base);
  return *internal_default_instance();
}


void MultiRegionLoadStats::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MultiRegionLoadStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.Clear();
  stat_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiRegionLoadStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.RegionSpecifier region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_region(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.RegionLoadStats stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiRegionLoadStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MultiRegionLoadStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionSpecifier region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.RegionLoadStats stat = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MultiRegionLoadStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MultiRegionLoadStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiRegionLoadStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MultiRegionLoadStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionSpecifier region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->region(static_cast<int>(i)),
      output);
  }

  // repeated .hbase.pb.RegionLoadStats stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stat(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MultiRegionLoadStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRegionLoadStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MultiRegionLoadStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionSpecifier region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->region(static_cast<int>(i)), target);
  }

  // repeated .hbase.pb.RegionLoadStats stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stat(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MultiRegionLoadStats)
  return target;
}

size_t MultiRegionLoadStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MultiRegionLoadStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionSpecifier region = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->region_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->region(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.RegionLoadStats stat = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stat(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRegionLoadStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MultiRegionLoadStats)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRegionLoadStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRegionLoadStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MultiRegionLoadStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MultiRegionLoadStats)
    MergeFrom(*source);
  }
}

void MultiRegionLoadStats::MergeFrom(const MultiRegionLoadStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MultiRegionLoadStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_.MergeFrom(from.region_);
  stat_.MergeFrom(from.stat_);
}

void MultiRegionLoadStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MultiRegionLoadStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRegionLoadStats::CopyFrom(const MultiRegionLoadStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MultiRegionLoadStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRegionLoadStats::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->region())) return false;
  return true;
}

void MultiRegionLoadStats::InternalSwap(MultiRegionLoadStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&region_)->InternalSwap(CastToBase(&other->region_));
  CastToBase(&stat_)->InternalSwap(CastToBase(&other->stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRegionLoadStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultOrException::InitAsDefaultInstance() {
  ::hbase::pb::_ResultOrException_default_instance_._instance.get_mutable()->result_ = const_cast< ::hbase::pb::Result*>(
      ::hbase::pb::Result::internal_default_instance());
  ::hbase::pb::_ResultOrException_default_instance_._instance.get_mutable()->exception_ = const_cast< ::hbase::pb::NameBytesPair*>(
      ::hbase::pb::NameBytesPair::internal_default_instance());
  ::hbase::pb::_ResultOrException_default_instance_._instance.get_mutable()->service_result_ = const_cast< ::hbase::pb::CoprocessorServiceResult*>(
      ::hbase::pb::CoprocessorServiceResult::internal_default_instance());
  ::hbase::pb::_ResultOrException_default_instance_._instance.get_mutable()->loadstats_ = const_cast< ::hbase::pb::RegionLoadStats*>(
      ::hbase::pb::RegionLoadStats::internal_default_instance());
}
class ResultOrException::_Internal {
 public:
  using HasBits = decltype(std::declval<ResultOrException>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hbase::pb::Result& result(const ResultOrException* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::NameBytesPair& exception(const ResultOrException* msg);
  static void set_has_exception(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::CoprocessorServiceResult& service_result(const ResultOrException* msg);
  static void set_has_service_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hbase::pb::RegionLoadStats& loadstats(const ResultOrException* msg);
  static void set_has_loadstats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hbase::pb::Result&
ResultOrException::_Internal::result(const ResultOrException* msg) {
  return *msg->result_;
}
const ::hbase::pb::NameBytesPair&
ResultOrException::_Internal::exception(const ResultOrException* msg) {
  return *msg->exception_;
}
const ::hbase::pb::CoprocessorServiceResult&
ResultOrException::_Internal::service_result(const ResultOrException* msg) {
  return *msg->service_result_;
}
const ::hbase::pb::RegionLoadStats&
ResultOrException::_Internal::loadstats(const ResultOrException* msg) {
  return *msg->loadstats_;
}
void ResultOrException::clear_exception() {
  if (exception_ != nullptr) exception_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResultOrException::ResultOrException()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ResultOrException)
}
ResultOrException::ResultOrException(const ResultOrException& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::hbase::pb::Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_exception()) {
    exception_ = new ::hbase::pb::NameBytesPair(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  if (from.has_service_result()) {
    service_result_ = new ::hbase::pb::CoprocessorServiceResult(*from.service_result_);
  } else {
    service_result_ = nullptr;
  }
  if (from.has_loadstats()) {
    loadstats_ = new ::hbase::pb::RegionLoadStats(*from.loadstats_);
  } else {
    loadstats_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ResultOrException)
}

void ResultOrException::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultOrException_Client_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&result_)) + sizeof(index_));
}

ResultOrException::~ResultOrException() {
  // @@protoc_insertion_point(destructor:hbase.pb.ResultOrException)
  SharedDtor();
}

void ResultOrException::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete exception_;
  if (this != internal_default_instance()) delete service_result_;
  if (this != internal_default_instance()) delete loadstats_;
}

void ResultOrException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultOrException& ResultOrException::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultOrException_Client_2eproto.base);
  return *internal_default_instance();
}


void ResultOrException::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ResultOrException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(result_ != nullptr);
      result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(exception_ != nullptr);
      exception_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(service_result_ != nullptr);
      service_result_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(loadstats_ != nullptr);
      loadstats_->Clear();
    }
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResultOrException::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.NameBytesPair exception = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.CoprocessorServiceResult service_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_service_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.RegionLoadStats loadStats = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_loadstats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResultOrException::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ResultOrException)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Result result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.NameBytesPair exception = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.CoprocessorServiceResult service_result = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.RegionLoadStats loadStats = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_loadstats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ResultOrException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ResultOrException)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResultOrException::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ResultOrException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .hbase.pb.Result result = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::result(this), output);
  }

  // optional .hbase.pb.NameBytesPair exception = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::exception(this), output);
  }

  // optional .hbase.pb.CoprocessorServiceResult service_result = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::service_result(this), output);
  }

  // optional .hbase.pb.RegionLoadStats loadStats = 5 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::loadstats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ResultOrException)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultOrException::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ResultOrException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .hbase.pb.Result result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::result(this), target);
  }

  // optional .hbase.pb.NameBytesPair exception = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::exception(this), target);
  }

  // optional .hbase.pb.CoprocessorServiceResult service_result = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::service_result(this), target);
  }

  // optional .hbase.pb.RegionLoadStats loadStats = 5 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::loadstats(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ResultOrException)
  return target;
}

size_t ResultOrException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ResultOrException)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .hbase.pb.Result result = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_);
    }

    // optional .hbase.pb.NameBytesPair exception = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exception_);
    }

    // optional .hbase.pb.CoprocessorServiceResult service_result = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_result_);
    }

    // optional .hbase.pb.RegionLoadStats loadStats = 5 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *loadstats_);
    }

    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultOrException::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ResultOrException)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultOrException* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultOrException>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ResultOrException)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ResultOrException)
    MergeFrom(*source);
  }
}

void ResultOrException::MergeFrom(const ResultOrException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ResultOrException)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_result()->::hbase::pb::Result::MergeFrom(from.result());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_exception()->::hbase::pb::NameBytesPair::MergeFrom(from.exception());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_service_result()->::hbase::pb::CoprocessorServiceResult::MergeFrom(from.service_result());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_loadstats()->::hbase::pb::RegionLoadStats::MergeFrom(from.loadstats());
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResultOrException::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ResultOrException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultOrException::CopyFrom(const ResultOrException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ResultOrException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultOrException::IsInitialized() const {
  if (has_exception()) {
    if (!this->exception_->IsInitialized()) return false;
  }
  if (has_service_result()) {
    if (!this->service_result_->IsInitialized()) return false;
  }
  return true;
}

void ResultOrException::InternalSwap(ResultOrException* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
  swap(exception_, other->exception_);
  swap(service_result_, other->service_result_);
  swap(loadstats_, other->loadstats_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultOrException::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionActionResult::InitAsDefaultInstance() {
  ::hbase::pb::_RegionActionResult_default_instance_._instance.get_mutable()->exception_ = const_cast< ::hbase::pb::NameBytesPair*>(
      ::hbase::pb::NameBytesPair::internal_default_instance());
}
class RegionActionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionActionResult>()._has_bits_);
  static const ::hbase::pb::NameBytesPair& exception(const RegionActionResult* msg);
  static void set_has_exception(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::NameBytesPair&
RegionActionResult::_Internal::exception(const RegionActionResult* msg) {
  return *msg->exception_;
}
void RegionActionResult::clear_exception() {
  if (exception_ != nullptr) exception_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RegionActionResult::RegionActionResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RegionActionResult)
}
RegionActionResult::RegionActionResult(const RegionActionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      resultorexception_(from.resultorexception_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exception()) {
    exception_ = new ::hbase::pb::NameBytesPair(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RegionActionResult)
}

void RegionActionResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionActionResult_Client_2eproto.base);
  exception_ = nullptr;
}

RegionActionResult::~RegionActionResult() {
  // @@protoc_insertion_point(destructor:hbase.pb.RegionActionResult)
  SharedDtor();
}

void RegionActionResult::SharedDtor() {
  if (this != internal_default_instance()) delete exception_;
}

void RegionActionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionActionResult& RegionActionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionActionResult_Client_2eproto.base);
  return *internal_default_instance();
}


void RegionActionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RegionActionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resultorexception_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(exception_ != nullptr);
    exception_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionActionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.ResultOrException resultOrException = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_resultorexception(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.NameBytesPair exception = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionActionResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RegionActionResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.ResultOrException resultOrException = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_resultorexception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.NameBytesPair exception = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RegionActionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RegionActionResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionActionResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RegionActionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.ResultOrException resultOrException = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resultorexception_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->resultorexception(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.NameBytesPair exception = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::exception(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RegionActionResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionActionResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RegionActionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.ResultOrException resultOrException = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resultorexception_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->resultorexception(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.NameBytesPair exception = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::exception(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RegionActionResult)
  return target;
}

size_t RegionActionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RegionActionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.ResultOrException resultOrException = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->resultorexception_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->resultorexception(static_cast<int>(i)));
    }
  }

  // optional .hbase.pb.NameBytesPair exception = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionActionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RegionActionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionActionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionActionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RegionActionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RegionActionResult)
    MergeFrom(*source);
  }
}

void RegionActionResult::MergeFrom(const RegionActionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RegionActionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resultorexception_.MergeFrom(from.resultorexception_);
  if (from.has_exception()) {
    mutable_exception()->::hbase::pb::NameBytesPair::MergeFrom(from.exception());
  }
}

void RegionActionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RegionActionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionActionResult::CopyFrom(const RegionActionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RegionActionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionActionResult::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->resultorexception())) return false;
  if (has_exception()) {
    if (!this->exception_->IsInitialized()) return false;
  }
  return true;
}

void RegionActionResult::InternalSwap(RegionActionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&resultorexception_)->InternalSwap(CastToBase(&other->resultorexception_));
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionActionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiRequest::InitAsDefaultInstance() {
  ::hbase::pb::_MultiRequest_default_instance_._instance.get_mutable()->condition_ = const_cast< ::hbase::pb::Condition*>(
      ::hbase::pb::Condition::internal_default_instance());
}
class MultiRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiRequest>()._has_bits_);
  static void set_has_noncegroup(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::Condition& condition(const MultiRequest* msg);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::Condition&
MultiRequest::_Internal::condition(const MultiRequest* msg) {
  return *msg->condition_;
}
MultiRequest::MultiRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MultiRequest)
}
MultiRequest::MultiRequest(const MultiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      regionaction_(from.regionaction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition()) {
    condition_ = new ::hbase::pb::Condition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  noncegroup_ = from.noncegroup_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MultiRequest)
}

void MultiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiRequest_Client_2eproto.base);
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noncegroup_) -
      reinterpret_cast<char*>(&condition_)) + sizeof(noncegroup_));
}

MultiRequest::~MultiRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.MultiRequest)
  SharedDtor();
}

void MultiRequest::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
}

void MultiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRequest& MultiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRequest_Client_2eproto.base);
  return *internal_default_instance();
}


void MultiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MultiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regionaction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(condition_ != nullptr);
    condition_->Clear();
  }
  noncegroup_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.RegionAction regionAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_regionaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional uint64 nonceGroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_noncegroup(&has_bits);
          noncegroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Condition condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MultiRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionAction regionAction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_regionaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nonceGroup = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_noncegroup(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &noncegroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Condition condition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MultiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MultiRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MultiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionAction regionAction = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regionaction_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->regionaction(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 nonceGroup = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->noncegroup(), output);
  }

  // optional .hbase.pb.Condition condition = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::condition(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MultiRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MultiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionAction regionAction = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regionaction_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->regionaction(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 nonceGroup = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->noncegroup(), target);
  }

  // optional .hbase.pb.Condition condition = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::condition(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MultiRequest)
  return target;
}

size_t MultiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MultiRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionAction regionAction = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->regionaction_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->regionaction(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hbase.pb.Condition condition = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_);
    }

    // optional uint64 nonceGroup = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->noncegroup());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MultiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MultiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MultiRequest)
    MergeFrom(*source);
  }
}

void MultiRequest::MergeFrom(const MultiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MultiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regionaction_.MergeFrom(from.regionaction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_condition()->::hbase::pb::Condition::MergeFrom(from.condition());
    }
    if (cached_has_bits & 0x00000002u) {
      noncegroup_ = from.noncegroup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MultiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRequest::CopyFrom(const MultiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MultiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->regionaction())) return false;
  if (has_condition()) {
    if (!this->condition_->IsInitialized()) return false;
  }
  return true;
}

void MultiRequest::InternalSwap(MultiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&regionaction_)->InternalSwap(CastToBase(&other->regionaction_));
  swap(condition_, other->condition_);
  swap(noncegroup_, other->noncegroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiResponse::InitAsDefaultInstance() {
  ::hbase::pb::_MultiResponse_default_instance_._instance.get_mutable()->regionstatistics_ = const_cast< ::hbase::pb::MultiRegionLoadStats*>(
      ::hbase::pb::MultiRegionLoadStats::internal_default_instance());
}
class MultiResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiResponse>()._has_bits_);
  static void set_has_processed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::MultiRegionLoadStats& regionstatistics(const MultiResponse* msg);
  static void set_has_regionstatistics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::MultiRegionLoadStats&
MultiResponse::_Internal::regionstatistics(const MultiResponse* msg) {
  return *msg->regionstatistics_;
}
MultiResponse::MultiResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MultiResponse)
}
MultiResponse::MultiResponse(const MultiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      regionactionresult_(from.regionactionresult_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_regionstatistics()) {
    regionstatistics_ = new ::hbase::pb::MultiRegionLoadStats(*from.regionstatistics_);
  } else {
    regionstatistics_ = nullptr;
  }
  processed_ = from.processed_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MultiResponse)
}

void MultiResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiResponse_Client_2eproto.base);
  ::memset(&regionstatistics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processed_) -
      reinterpret_cast<char*>(&regionstatistics_)) + sizeof(processed_));
}

MultiResponse::~MultiResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.MultiResponse)
  SharedDtor();
}

void MultiResponse::SharedDtor() {
  if (this != internal_default_instance()) delete regionstatistics_;
}

void MultiResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiResponse& MultiResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiResponse_Client_2eproto.base);
  return *internal_default_instance();
}


void MultiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MultiResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regionactionresult_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(regionstatistics_ != nullptr);
    regionstatistics_->Clear();
  }
  processed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.RegionActionResult regionActionResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_regionactionresult(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional bool processed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_processed(&has_bits);
          processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.MultiRegionLoadStats regionStatistics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_regionstatistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MultiResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionActionResult regionActionResult = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_regionactionresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool processed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_processed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.MultiRegionLoadStats regionStatistics = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_regionstatistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MultiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MultiResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MultiResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionActionResult regionActionResult = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regionactionresult_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->regionactionresult(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool processed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->processed(), output);
  }

  // optional .hbase.pb.MultiRegionLoadStats regionStatistics = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::regionstatistics(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MultiResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MultiResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionActionResult regionActionResult = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regionactionresult_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->regionactionresult(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool processed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->processed(), target);
  }

  // optional .hbase.pb.MultiRegionLoadStats regionStatistics = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::regionstatistics(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MultiResponse)
  return target;
}

size_t MultiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MultiResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionActionResult regionActionResult = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->regionactionresult_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->regionactionresult(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hbase.pb.MultiRegionLoadStats regionStatistics = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regionstatistics_);
    }

    // optional bool processed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MultiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MultiResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MultiResponse)
    MergeFrom(*source);
  }
}

void MultiResponse::MergeFrom(const MultiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MultiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regionactionresult_.MergeFrom(from.regionactionresult_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_regionstatistics()->::hbase::pb::MultiRegionLoadStats::MergeFrom(from.regionstatistics());
    }
    if (cached_has_bits & 0x00000002u) {
      processed_ = from.processed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MultiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiResponse::CopyFrom(const MultiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MultiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->regionactionresult())) return false;
  if (has_regionstatistics()) {
    if (!this->regionstatistics_->IsInitialized()) return false;
  }
  return true;
}

void MultiResponse::InternalSwap(MultiResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&regionactionresult_)->InternalSwap(CastToBase(&other->regionactionresult_));
  swap(regionstatistics_, other->regionstatistics_);
  swap(processed_, other->processed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::Authorizations* Arena::CreateMaybeMessage< ::hbase::pb::Authorizations >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Authorizations >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CellVisibility* Arena::CreateMaybeMessage< ::hbase::pb::CellVisibility >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CellVisibility >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::Column* Arena::CreateMaybeMessage< ::hbase::pb::Column >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Column >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::Get* Arena::CreateMaybeMessage< ::hbase::pb::Get >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Get >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::Result* Arena::CreateMaybeMessage< ::hbase::pb::Result >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetRequest* Arena::CreateMaybeMessage< ::hbase::pb::GetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetResponse* Arena::CreateMaybeMessage< ::hbase::pb::GetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::Condition* Arena::CreateMaybeMessage< ::hbase::pb::Condition >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MutationProto_ColumnValue_QualifierValue* Arena::CreateMaybeMessage< ::hbase::pb::MutationProto_ColumnValue_QualifierValue >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MutationProto_ColumnValue_QualifierValue >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MutationProto_ColumnValue* Arena::CreateMaybeMessage< ::hbase::pb::MutationProto_ColumnValue >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MutationProto_ColumnValue >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MutationProto* Arena::CreateMaybeMessage< ::hbase::pb::MutationProto >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MutationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MutateRequest* Arena::CreateMaybeMessage< ::hbase::pb::MutateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MutateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MutateResponse* Arena::CreateMaybeMessage< ::hbase::pb::MutateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MutateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::Scan* Arena::CreateMaybeMessage< ::hbase::pb::Scan >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Scan >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ScanRequest* Arena::CreateMaybeMessage< ::hbase::pb::ScanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::Cursor* Arena::CreateMaybeMessage< ::hbase::pb::Cursor >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Cursor >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ScanResponse* Arena::CreateMaybeMessage< ::hbase::pb::ScanResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::BulkLoadHFileRequest_FamilyPath* Arena::CreateMaybeMessage< ::hbase::pb::BulkLoadHFileRequest_FamilyPath >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::BulkLoadHFileRequest_FamilyPath >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::BulkLoadHFileRequest* Arena::CreateMaybeMessage< ::hbase::pb::BulkLoadHFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::BulkLoadHFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::BulkLoadHFileResponse* Arena::CreateMaybeMessage< ::hbase::pb::BulkLoadHFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::BulkLoadHFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::DelegationToken* Arena::CreateMaybeMessage< ::hbase::pb::DelegationToken >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::DelegationToken >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::PrepareBulkLoadRequest* Arena::CreateMaybeMessage< ::hbase::pb::PrepareBulkLoadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::PrepareBulkLoadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::PrepareBulkLoadResponse* Arena::CreateMaybeMessage< ::hbase::pb::PrepareBulkLoadResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::PrepareBulkLoadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CleanupBulkLoadRequest* Arena::CreateMaybeMessage< ::hbase::pb::CleanupBulkLoadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CleanupBulkLoadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CleanupBulkLoadResponse* Arena::CreateMaybeMessage< ::hbase::pb::CleanupBulkLoadResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CleanupBulkLoadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CoprocessorServiceCall* Arena::CreateMaybeMessage< ::hbase::pb::CoprocessorServiceCall >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CoprocessorServiceCall >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CoprocessorServiceResult* Arena::CreateMaybeMessage< ::hbase::pb::CoprocessorServiceResult >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CoprocessorServiceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CoprocessorServiceRequest* Arena::CreateMaybeMessage< ::hbase::pb::CoprocessorServiceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CoprocessorServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CoprocessorServiceResponse* Arena::CreateMaybeMessage< ::hbase::pb::CoprocessorServiceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CoprocessorServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::Action* Arena::CreateMaybeMessage< ::hbase::pb::Action >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RegionAction* Arena::CreateMaybeMessage< ::hbase::pb::RegionAction >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RegionAction >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RegionLoadStats* Arena::CreateMaybeMessage< ::hbase::pb::RegionLoadStats >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RegionLoadStats >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MultiRegionLoadStats* Arena::CreateMaybeMessage< ::hbase::pb::MultiRegionLoadStats >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MultiRegionLoadStats >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ResultOrException* Arena::CreateMaybeMessage< ::hbase::pb::ResultOrException >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ResultOrException >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RegionActionResult* Arena::CreateMaybeMessage< ::hbase::pb::RegionActionResult >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RegionActionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MultiRequest* Arena::CreateMaybeMessage< ::hbase::pb::MultiRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MultiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MultiResponse* Arena::CreateMaybeMessage< ::hbase::pb::MultiResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MultiResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
