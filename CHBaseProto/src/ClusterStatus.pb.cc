// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClusterStatus.proto

#include "ClusterStatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ClusterId_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClusterId_ClusterId_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coprocessor_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_FS_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBaseVersionFileContent_FS_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClusterStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LiveServerInfo_ClusterStatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClusterStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionInTransition_ClusterStatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionInfo_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClusterStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionLoad_ClusterStatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionSpecifier_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClusterStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionState_ClusterStatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClusterStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicationLoadSink_ClusterStatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClusterStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicationLoadSource_ClusterStatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClusterStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ServerLoad_ClusterStatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerName_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClusterStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreSequenceId_ClusterStatus_2eproto;
namespace hbase {
namespace pb {
class RegionStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionState> _instance;
} _RegionState_default_instance_;
class RegionInTransitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionInTransition> _instance;
} _RegionInTransition_default_instance_;
class StoreSequenceIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreSequenceId> _instance;
} _StoreSequenceId_default_instance_;
class RegionStoreSequenceIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionStoreSequenceIds> _instance;
} _RegionStoreSequenceIds_default_instance_;
class RegionLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionLoad> _instance;
} _RegionLoad_default_instance_;
class ReplicationLoadSinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicationLoadSink> _instance;
} _ReplicationLoadSink_default_instance_;
class ReplicationLoadSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicationLoadSource> _instance;
} _ReplicationLoadSource_default_instance_;
class ServerLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerLoad> _instance;
} _ServerLoad_default_instance_;
class LiveServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiveServerInfo> _instance;
} _LiveServerInfo_default_instance_;
class ClusterStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterStatus> _instance;
} _ClusterStatus_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_ClusterStatus_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ClusterStatus_default_instance_;
    new (ptr) ::hbase::pb::ClusterStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ClusterStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ClusterStatus_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_ClusterStatus_ClusterStatus_2eproto}, {
      &scc_info_HBaseVersionFileContent_FS_2eproto.base,
      &scc_info_LiveServerInfo_ClusterStatus_2eproto.base,
      &scc_info_ServerName_HBase_2eproto.base,
      &scc_info_RegionInTransition_ClusterStatus_2eproto.base,
      &scc_info_ClusterId_ClusterId_2eproto.base,
      &scc_info_Coprocessor_HBase_2eproto.base,}};

static void InitDefaultsscc_info_LiveServerInfo_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_LiveServerInfo_default_instance_;
    new (ptr) ::hbase::pb::LiveServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::LiveServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LiveServerInfo_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LiveServerInfo_ClusterStatus_2eproto}, {
      &scc_info_ServerName_HBase_2eproto.base,
      &scc_info_ServerLoad_ClusterStatus_2eproto.base,}};

static void InitDefaultsscc_info_RegionInTransition_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RegionInTransition_default_instance_;
    new (ptr) ::hbase::pb::RegionInTransition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RegionInTransition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionInTransition_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegionInTransition_ClusterStatus_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_RegionState_ClusterStatus_2eproto.base,}};

static void InitDefaultsscc_info_RegionLoad_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RegionLoad_default_instance_;
    new (ptr) ::hbase::pb::RegionLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RegionLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionLoad_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegionLoad_ClusterStatus_2eproto}, {
      &scc_info_RegionSpecifier_HBase_2eproto.base,
      &scc_info_StoreSequenceId_ClusterStatus_2eproto.base,}};

static void InitDefaultsscc_info_RegionState_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RegionState_default_instance_;
    new (ptr) ::hbase::pb::RegionState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RegionState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionState_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RegionState_ClusterStatus_2eproto}, {
      &scc_info_RegionInfo_HBase_2eproto.base,}};

static void InitDefaultsscc_info_RegionStoreSequenceIds_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RegionStoreSequenceIds_default_instance_;
    new (ptr) ::hbase::pb::RegionStoreSequenceIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RegionStoreSequenceIds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionStoreSequenceIds_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RegionStoreSequenceIds_ClusterStatus_2eproto}, {
      &scc_info_StoreSequenceId_ClusterStatus_2eproto.base,}};

static void InitDefaultsscc_info_ReplicationLoadSink_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ReplicationLoadSink_default_instance_;
    new (ptr) ::hbase::pb::ReplicationLoadSink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ReplicationLoadSink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicationLoadSink_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReplicationLoadSink_ClusterStatus_2eproto}, {}};

static void InitDefaultsscc_info_ReplicationLoadSource_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ReplicationLoadSource_default_instance_;
    new (ptr) ::hbase::pb::ReplicationLoadSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ReplicationLoadSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicationLoadSource_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReplicationLoadSource_ClusterStatus_2eproto}, {}};

static void InitDefaultsscc_info_ServerLoad_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ServerLoad_default_instance_;
    new (ptr) ::hbase::pb::ServerLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ServerLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ServerLoad_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ServerLoad_ClusterStatus_2eproto}, {
      &scc_info_RegionLoad_ClusterStatus_2eproto.base,
      &scc_info_Coprocessor_HBase_2eproto.base,
      &scc_info_ReplicationLoadSource_ClusterStatus_2eproto.base,
      &scc_info_ReplicationLoadSink_ClusterStatus_2eproto.base,}};

static void InitDefaultsscc_info_StoreSequenceId_ClusterStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_StoreSequenceId_default_instance_;
    new (ptr) ::hbase::pb::StoreSequenceId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::StoreSequenceId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreSequenceId_ClusterStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StoreSequenceId_ClusterStatus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ClusterStatus_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ClusterStatus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ClusterStatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ClusterStatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionState, region_info_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionState, state_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionState, stamp_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionInTransition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionInTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionInTransition, spec_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionInTransition, region_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreSequenceId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreSequenceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreSequenceId, family_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreSequenceId, sequence_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionStoreSequenceIds, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionStoreSequenceIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionStoreSequenceIds, last_flushed_sequence_id_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionStoreSequenceIds, store_sequence_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, region_specifier_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, stores_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, storefiles_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, store_uncompressed_size_mb_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, storefile_size_mb_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, memstore_size_mb_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, storefile_index_size_kb_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, read_requests_count_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, write_requests_count_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, total_compacting_kvs_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, current_compacted_kvs_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, root_index_size_kb_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, total_static_index_size_kb_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, total_static_bloom_size_kb_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, complete_sequence_id_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, data_locality_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, last_major_compaction_ts_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, store_complete_sequence_id_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, filtered_read_requests_count_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionLoad, cp_requests_count_),
  0,
  1,
  2,
  3,
  4,
  8,
  5,
  6,
  7,
  10,
  11,
  9,
  12,
  13,
  14,
  18,
  15,
  ~0u,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSink, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSink, ageoflastappliedop_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSink, timestampsoflastappliedop_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSource, peerid_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSource, ageoflastshippedop_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSource, sizeoflogqueue_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSource, timestampoflastshippedop_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationLoadSource, replicationlag_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, number_of_requests_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, total_number_of_requests_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, used_heap_mb_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, max_heap_mb_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, region_loads_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, coprocessors_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, report_start_time_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, report_end_time_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, info_server_port_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, replloadsource_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ServerLoad, replloadsink_),
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  6,
  7,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::LiveServerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::LiveServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::LiveServerInfo, server_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::LiveServerInfo, server_load_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, hbase_version_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, live_servers_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, dead_servers_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, regions_in_transition_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, master_coprocessors_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, master_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, backup_masters_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterStatus, balancer_on_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::hbase::pb::RegionState)},
  { 11, 18, sizeof(::hbase::pb::RegionInTransition)},
  { 20, 27, sizeof(::hbase::pb::StoreSequenceId)},
  { 29, 36, sizeof(::hbase::pb::RegionStoreSequenceIds)},
  { 38, 63, sizeof(::hbase::pb::RegionLoad)},
  { 83, 90, sizeof(::hbase::pb::ReplicationLoadSink)},
  { 92, 102, sizeof(::hbase::pb::ReplicationLoadSource)},
  { 107, 123, sizeof(::hbase::pb::ServerLoad)},
  { 134, 141, sizeof(::hbase::pb::LiveServerInfo)},
  { 143, 157, sizeof(::hbase::pb::ClusterStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RegionState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RegionInTransition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_StoreSequenceId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RegionStoreSequenceIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RegionLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ReplicationLoadSink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ReplicationLoadSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ServerLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_LiveServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ClusterStatus_default_instance_),
};

const char descriptor_table_protodef_ClusterStatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ClusterStatus.proto\022\010hbase.pb\032\013HBase.p"
  "roto\032\017ClusterId.proto\032\010FS.proto\"\331\002\n\013Regi"
  "onState\022)\n\013region_info\030\001 \002(\0132\024.hbase.pb."
  "RegionInfo\022*\n\005state\030\002 \002(\0162\033.hbase.pb.Reg"
  "ionState.State\022\r\n\005stamp\030\003 \001(\004\"\343\001\n\005State\022"
  "\013\n\007OFFLINE\020\000\022\020\n\014PENDING_OPEN\020\001\022\013\n\007OPENIN"
  "G\020\002\022\010\n\004OPEN\020\003\022\021\n\rPENDING_CLOSE\020\004\022\013\n\007CLOS"
  "ING\020\005\022\n\n\006CLOSED\020\006\022\r\n\tSPLITTING\020\007\022\t\n\005SPLI"
  "T\020\010\022\017\n\013FAILED_OPEN\020\t\022\020\n\014FAILED_CLOSE\020\n\022\013"
  "\n\007MERGING\020\013\022\n\n\006MERGED\020\014\022\021\n\rSPLITTING_NEW"
  "\020\r\022\017\n\013MERGING_NEW\020\016\"j\n\022RegionInTransitio"
  "n\022\'\n\004spec\030\001 \002(\0132\031.hbase.pb.RegionSpecifi"
  "er\022+\n\014region_state\030\002 \002(\0132\025.hbase.pb.Regi"
  "onState\";\n\017StoreSequenceId\022\023\n\013family_nam"
  "e\030\001 \002(\014\022\023\n\013sequence_id\030\002 \002(\004\"p\n\026RegionSt"
  "oreSequenceIds\022 \n\030last_flushed_sequence_"
  "id\030\001 \002(\004\0224\n\021store_sequence_id\030\002 \003(\0132\031.hb"
  "ase.pb.StoreSequenceId\"\225\005\n\nRegionLoad\0223\n"
  "\020region_specifier\030\001 \002(\0132\031.hbase.pb.Regio"
  "nSpecifier\022\016\n\006stores\030\002 \001(\r\022\022\n\nstorefiles"
  "\030\003 \001(\r\022\"\n\032store_uncompressed_size_MB\030\004 \001"
  "(\r\022\031\n\021storefile_size_MB\030\005 \001(\r\022\030\n\020memstor"
  "e_size_MB\030\006 \001(\r\022\037\n\027storefile_index_size_"
  "KB\030\007 \001(\004\022\033\n\023read_requests_count\030\010 \001(\004\022\034\n"
  "\024write_requests_count\030\t \001(\004\022\034\n\024total_com"
  "pacting_KVs\030\n \001(\004\022\035\n\025current_compacted_K"
  "Vs\030\013 \001(\004\022\032\n\022root_index_size_KB\030\014 \001(\r\022\"\n\032"
  "total_static_index_size_KB\030\r \001(\r\022\"\n\032tota"
  "l_static_bloom_size_KB\030\016 \001(\r\022\034\n\024complete"
  "_sequence_id\030\017 \001(\004\022\025\n\rdata_locality\030\020 \001("
  "\002\022#\n\030last_major_compaction_ts\030\021 \001(\004:\0010\022="
  "\n\032store_complete_sequence_id\030\022 \003(\0132\031.hba"
  "se.pb.StoreSequenceId\022$\n\034filtered_read_r"
  "equests_count\030\023 \001(\004\022\031\n\021cp_requests_count"
  "\030\024 \001(\004\"T\n\023ReplicationLoadSink\022\032\n\022ageOfLa"
  "stAppliedOp\030\001 \002(\004\022!\n\031timeStampsOfLastApp"
  "liedOp\030\002 \002(\004\"\225\001\n\025ReplicationLoadSource\022\016"
  "\n\006peerID\030\001 \002(\t\022\032\n\022ageOfLastShippedOp\030\002 \002"
  "(\004\022\026\n\016sizeOfLogQueue\030\003 \002(\r\022 \n\030timeStampO"
  "fLastShippedOp\030\004 \002(\004\022\026\n\016replicationLag\030\005"
  " \002(\004\"\212\003\n\nServerLoad\022\032\n\022number_of_request"
  "s\030\001 \001(\004\022 \n\030total_number_of_requests\030\002 \001("
  "\004\022\024\n\014used_heap_MB\030\003 \001(\r\022\023\n\013max_heap_MB\030\004"
  " \001(\r\022*\n\014region_loads\030\005 \003(\0132\024.hbase.pb.Re"
  "gionLoad\022+\n\014coprocessors\030\006 \003(\0132\025.hbase.p"
  "b.Coprocessor\022\031\n\021report_start_time\030\007 \001(\004"
  "\022\027\n\017report_end_time\030\010 \001(\004\022\030\n\020info_server"
  "_port\030\t \001(\r\0227\n\016replLoadSource\030\n \003(\0132\037.hb"
  "ase.pb.ReplicationLoadSource\0223\n\014replLoad"
  "Sink\030\013 \001(\0132\035.hbase.pb.ReplicationLoadSin"
  "k\"a\n\016LiveServerInfo\022$\n\006server\030\001 \002(\0132\024.hb"
  "ase.pb.ServerName\022)\n\013server_load\030\002 \002(\0132\024"
  ".hbase.pb.ServerLoad\"\250\003\n\rClusterStatus\0228"
  "\n\rhbase_version\030\001 \001(\0132!.hbase.pb.HBaseVe"
  "rsionFileContent\022.\n\014live_servers\030\002 \003(\0132\030"
  ".hbase.pb.LiveServerInfo\022*\n\014dead_servers"
  "\030\003 \003(\0132\024.hbase.pb.ServerName\022;\n\025regions_"
  "in_transition\030\004 \003(\0132\034.hbase.pb.RegionInT"
  "ransition\022\'\n\ncluster_id\030\005 \001(\0132\023.hbase.pb"
  ".ClusterId\0222\n\023master_coprocessors\030\006 \003(\0132"
  "\025.hbase.pb.Coprocessor\022$\n\006master\030\007 \001(\0132\024"
  ".hbase.pb.ServerName\022,\n\016backup_masters\030\010"
  " \003(\0132\024.hbase.pb.ServerName\022\023\n\013balancer_o"
  "n\030\t \001(\010*\264\001\n\006Option\022\021\n\rHBASE_VERSION\020\000\022\016\n"
  "\nCLUSTER_ID\020\001\022\020\n\014LIVE_SERVERS\020\002\022\020\n\014DEAD_"
  "SERVERS\020\003\022\n\n\006MASTER\020\004\022\022\n\016BACKUP_MASTERS\020"
  "\005\022\027\n\023MASTER_COPROCESSORS\020\006\022\031\n\025REGIONS_IN"
  "_TRANSITION\020\007\022\017\n\013BALANCER_ON\020\010BF\n*org.ap"
  "ache.hadoop.hbase.protobuf.generatedB\023Cl"
  "usterStatusProtosH\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ClusterStatus_2eproto_deps[3] = {
  &::descriptor_table_ClusterId_2eproto,
  &::descriptor_table_FS_2eproto,
  &::descriptor_table_HBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ClusterStatus_2eproto_sccs[10] = {
  &scc_info_ClusterStatus_ClusterStatus_2eproto.base,
  &scc_info_LiveServerInfo_ClusterStatus_2eproto.base,
  &scc_info_RegionInTransition_ClusterStatus_2eproto.base,
  &scc_info_RegionLoad_ClusterStatus_2eproto.base,
  &scc_info_RegionState_ClusterStatus_2eproto.base,
  &scc_info_RegionStoreSequenceIds_ClusterStatus_2eproto.base,
  &scc_info_ReplicationLoadSink_ClusterStatus_2eproto.base,
  &scc_info_ReplicationLoadSource_ClusterStatus_2eproto.base,
  &scc_info_ServerLoad_ClusterStatus_2eproto.base,
  &scc_info_StoreSequenceId_ClusterStatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ClusterStatus_2eproto_once;
static bool descriptor_table_ClusterStatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ClusterStatus_2eproto = {
  &descriptor_table_ClusterStatus_2eproto_initialized, descriptor_table_protodef_ClusterStatus_2eproto, "ClusterStatus.proto", 2782,
  &descriptor_table_ClusterStatus_2eproto_once, descriptor_table_ClusterStatus_2eproto_sccs, descriptor_table_ClusterStatus_2eproto_deps, 10, 3,
  schemas, file_default_instances, TableStruct_ClusterStatus_2eproto::offsets,
  file_level_metadata_ClusterStatus_2eproto, 10, file_level_enum_descriptors_ClusterStatus_2eproto, file_level_service_descriptors_ClusterStatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ClusterStatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ClusterStatus_2eproto), true);
namespace hbase {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ClusterStatus_2eproto);
  return file_level_enum_descriptors_ClusterStatus_2eproto[0];
}
bool RegionState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegionState_State RegionState::OFFLINE;
constexpr RegionState_State RegionState::PENDING_OPEN;
constexpr RegionState_State RegionState::OPENING;
constexpr RegionState_State RegionState::OPEN;
constexpr RegionState_State RegionState::PENDING_CLOSE;
constexpr RegionState_State RegionState::CLOSING;
constexpr RegionState_State RegionState::CLOSED;
constexpr RegionState_State RegionState::SPLITTING;
constexpr RegionState_State RegionState::SPLIT;
constexpr RegionState_State RegionState::FAILED_OPEN;
constexpr RegionState_State RegionState::FAILED_CLOSE;
constexpr RegionState_State RegionState::MERGING;
constexpr RegionState_State RegionState::MERGED;
constexpr RegionState_State RegionState::SPLITTING_NEW;
constexpr RegionState_State RegionState::MERGING_NEW;
constexpr RegionState_State RegionState::State_MIN;
constexpr RegionState_State RegionState::State_MAX;
constexpr int RegionState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Option_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ClusterStatus_2eproto);
  return file_level_enum_descriptors_ClusterStatus_2eproto[1];
}
bool Option_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RegionState::InitAsDefaultInstance() {
  ::hbase::pb::_RegionState_default_instance_._instance.get_mutable()->region_info_ = const_cast< ::hbase::pb::RegionInfo*>(
      ::hbase::pb::RegionInfo::internal_default_instance());
}
class RegionState::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionState>()._has_bits_);
  static const ::hbase::pb::RegionInfo& region_info(const RegionState* msg);
  static void set_has_region_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionInfo&
RegionState::_Internal::region_info(const RegionState* msg) {
  return *msg->region_info_;
}
void RegionState::clear_region_info() {
  if (region_info_ != nullptr) region_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RegionState::RegionState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RegionState)
}
RegionState::RegionState(const RegionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_info()) {
    region_info_ = new ::hbase::pb::RegionInfo(*from.region_info_);
  } else {
    region_info_ = nullptr;
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RegionState)
}

void RegionState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionState_ClusterStatus_2eproto.base);
  ::memset(&region_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&region_info_)) + sizeof(state_));
}

RegionState::~RegionState() {
  // @@protoc_insertion_point(destructor:hbase.pb.RegionState)
  SharedDtor();
}

void RegionState::SharedDtor() {
  if (this != internal_default_instance()) delete region_info_;
}

void RegionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionState& RegionState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionState_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void RegionState::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RegionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_info_ != nullptr);
    region_info_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&stamp_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionInfo region_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.RegionState.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::RegionState_State_IsValid(val))) {
            set_state(static_cast<::hbase::pb::RegionState_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stamp(&has_bits);
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RegionState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionInfo region_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.RegionState.State state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::RegionState_State_IsValid(value)) {
            set_state(static_cast< ::hbase::pb::RegionState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 stamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_stamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RegionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RegionState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RegionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo region_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region_info(this), output);
  }

  // required .hbase.pb.RegionState.State state = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint64 stamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->stamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RegionState)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RegionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionInfo region_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region_info(this), target);
  }

  // required .hbase.pb.RegionState.State state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint64 stamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->stamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RegionState)
  return target;
}

size_t RegionState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.RegionState)
  size_t total_size = 0;

  if (has_region_info()) {
    // required .hbase.pb.RegionInfo region_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_info_);
  }

  if (has_state()) {
    // required .hbase.pb.RegionState.State state = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t RegionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RegionState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .hbase.pb.RegionInfo region_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_info_);

    // required .hbase.pb.RegionState.State state = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 stamp = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RegionState)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RegionState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RegionState)
    MergeFrom(*source);
  }
}

void RegionState::MergeFrom(const RegionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RegionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region_info()->::hbase::pb::RegionInfo::MergeFrom(from.region_info());
    }
    if (cached_has_bits & 0x00000002u) {
      stamp_ = from.stamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RegionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionState::CopyFrom(const RegionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RegionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (has_region_info()) {
    if (!this->region_info_->IsInitialized()) return false;
  }
  return true;
}

void RegionState::InternalSwap(RegionState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(region_info_, other->region_info_);
  swap(stamp_, other->stamp_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionInTransition::InitAsDefaultInstance() {
  ::hbase::pb::_RegionInTransition_default_instance_._instance.get_mutable()->spec_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
  ::hbase::pb::_RegionInTransition_default_instance_._instance.get_mutable()->region_state_ = const_cast< ::hbase::pb::RegionState*>(
      ::hbase::pb::RegionState::internal_default_instance());
}
class RegionInTransition::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionInTransition>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& spec(const RegionInTransition* msg);
  static void set_has_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::RegionState& region_state(const RegionInTransition* msg);
  static void set_has_region_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::RegionSpecifier&
RegionInTransition::_Internal::spec(const RegionInTransition* msg) {
  return *msg->spec_;
}
const ::hbase::pb::RegionState&
RegionInTransition::_Internal::region_state(const RegionInTransition* msg) {
  return *msg->region_state_;
}
void RegionInTransition::clear_spec() {
  if (spec_ != nullptr) spec_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RegionInTransition::RegionInTransition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RegionInTransition)
}
RegionInTransition::RegionInTransition(const RegionInTransition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_spec()) {
    spec_ = new ::hbase::pb::RegionSpecifier(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from.has_region_state()) {
    region_state_ = new ::hbase::pb::RegionState(*from.region_state_);
  } else {
    region_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RegionInTransition)
}

void RegionInTransition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionInTransition_ClusterStatus_2eproto.base);
  ::memset(&spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_state_) -
      reinterpret_cast<char*>(&spec_)) + sizeof(region_state_));
}

RegionInTransition::~RegionInTransition() {
  // @@protoc_insertion_point(destructor:hbase.pb.RegionInTransition)
  SharedDtor();
}

void RegionInTransition::SharedDtor() {
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete region_state_;
}

void RegionInTransition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionInTransition& RegionInTransition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionInTransition_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void RegionInTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RegionInTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(spec_ != nullptr);
      spec_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(region_state_ != nullptr);
      region_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionInTransition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.RegionState region_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_region_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionInTransition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RegionInTransition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier spec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.RegionState region_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RegionInTransition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RegionInTransition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionInTransition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RegionInTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier spec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::spec(this), output);
  }

  // required .hbase.pb.RegionState region_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::region_state(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RegionInTransition)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionInTransition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RegionInTransition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier spec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::spec(this), target);
  }

  // required .hbase.pb.RegionState region_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::region_state(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RegionInTransition)
  return target;
}

size_t RegionInTransition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.RegionInTransition)
  size_t total_size = 0;

  if (has_spec()) {
    // required .hbase.pb.RegionSpecifier spec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  if (has_region_state()) {
    // required .hbase.pb.RegionState region_state = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_state_);
  }

  return total_size;
}
size_t RegionInTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RegionInTransition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .hbase.pb.RegionSpecifier spec = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);

    // required .hbase.pb.RegionState region_state = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_state_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionInTransition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RegionInTransition)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionInTransition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionInTransition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RegionInTransition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RegionInTransition)
    MergeFrom(*source);
  }
}

void RegionInTransition::MergeFrom(const RegionInTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RegionInTransition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_spec()->::hbase::pb::RegionSpecifier::MergeFrom(from.spec());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_region_state()->::hbase::pb::RegionState::MergeFrom(from.region_state());
    }
  }
}

void RegionInTransition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RegionInTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionInTransition::CopyFrom(const RegionInTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RegionInTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInTransition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_spec()) {
    if (!this->spec_->IsInitialized()) return false;
  }
  if (has_region_state()) {
    if (!this->region_state_->IsInitialized()) return false;
  }
  return true;
}

void RegionInTransition::InternalSwap(RegionInTransition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spec_, other->spec_);
  swap(region_state_, other->region_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionInTransition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreSequenceId::InitAsDefaultInstance() {
}
class StoreSequenceId::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreSequenceId>()._has_bits_);
  static void set_has_family_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StoreSequenceId::StoreSequenceId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.StoreSequenceId)
}
StoreSequenceId::StoreSequenceId(const StoreSequenceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family_name()) {
    family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
  sequence_id_ = from.sequence_id_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.StoreSequenceId)
}

void StoreSequenceId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreSequenceId_ClusterStatus_2eproto.base);
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_id_ = PROTOBUF_ULONGLONG(0);
}

StoreSequenceId::~StoreSequenceId() {
  // @@protoc_insertion_point(destructor:hbase.pb.StoreSequenceId)
  SharedDtor();
}

void StoreSequenceId::SharedDtor() {
  family_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StoreSequenceId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreSequenceId& StoreSequenceId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreSequenceId_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void StoreSequenceId::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.StoreSequenceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    family_name_.ClearNonDefaultToEmptyNoArena();
  }
  sequence_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreSequenceId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes family_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 sequence_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sequence_id(&has_bits);
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreSequenceId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.StoreSequenceId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 sequence_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sequence_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.StoreSequenceId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.StoreSequenceId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreSequenceId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.StoreSequenceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->family_name(), output);
  }

  // required uint64 sequence_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->sequence_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.StoreSequenceId)
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreSequenceId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.StoreSequenceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->family_name(), target);
  }

  // required uint64 sequence_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->sequence_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.StoreSequenceId)
  return target;
}

size_t StoreSequenceId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.StoreSequenceId)
  size_t total_size = 0;

  if (has_family_name()) {
    // required bytes family_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family_name());
  }

  if (has_sequence_id()) {
    // required uint64 sequence_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sequence_id());
  }

  return total_size;
}
size_t StoreSequenceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.StoreSequenceId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes family_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family_name());

    // required uint64 sequence_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sequence_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreSequenceId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.StoreSequenceId)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreSequenceId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreSequenceId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.StoreSequenceId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.StoreSequenceId)
    MergeFrom(*source);
  }
}

void StoreSequenceId::MergeFrom(const StoreSequenceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.StoreSequenceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoreSequenceId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.StoreSequenceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreSequenceId::CopyFrom(const StoreSequenceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.StoreSequenceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreSequenceId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StoreSequenceId::InternalSwap(StoreSequenceId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  family_name_.Swap(&other->family_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_id_, other->sequence_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreSequenceId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionStoreSequenceIds::InitAsDefaultInstance() {
}
class RegionStoreSequenceIds::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionStoreSequenceIds>()._has_bits_);
  static void set_has_last_flushed_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RegionStoreSequenceIds::RegionStoreSequenceIds()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RegionStoreSequenceIds)
}
RegionStoreSequenceIds::RegionStoreSequenceIds(const RegionStoreSequenceIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      store_sequence_id_(from.store_sequence_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_flushed_sequence_id_ = from.last_flushed_sequence_id_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RegionStoreSequenceIds)
}

void RegionStoreSequenceIds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionStoreSequenceIds_ClusterStatus_2eproto.base);
  last_flushed_sequence_id_ = PROTOBUF_ULONGLONG(0);
}

RegionStoreSequenceIds::~RegionStoreSequenceIds() {
  // @@protoc_insertion_point(destructor:hbase.pb.RegionStoreSequenceIds)
  SharedDtor();
}

void RegionStoreSequenceIds::SharedDtor() {
}

void RegionStoreSequenceIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionStoreSequenceIds& RegionStoreSequenceIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionStoreSequenceIds_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void RegionStoreSequenceIds::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RegionStoreSequenceIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_sequence_id_.Clear();
  last_flushed_sequence_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionStoreSequenceIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 last_flushed_sequence_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_flushed_sequence_id(&has_bits);
          last_flushed_sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_store_sequence_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionStoreSequenceIds::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RegionStoreSequenceIds)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 last_flushed_sequence_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_flushed_sequence_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_flushed_sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_store_sequence_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RegionStoreSequenceIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RegionStoreSequenceIds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionStoreSequenceIds::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RegionStoreSequenceIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 last_flushed_sequence_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->last_flushed_sequence_id(), output);
  }

  // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_sequence_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->store_sequence_id(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RegionStoreSequenceIds)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionStoreSequenceIds::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RegionStoreSequenceIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 last_flushed_sequence_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_flushed_sequence_id(), target);
  }

  // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_sequence_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->store_sequence_id(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RegionStoreSequenceIds)
  return target;
}

size_t RegionStoreSequenceIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RegionStoreSequenceIds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 last_flushed_sequence_id = 1;
  if (has_last_flushed_sequence_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->last_flushed_sequence_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.StoreSequenceId store_sequence_id = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->store_sequence_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->store_sequence_id(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionStoreSequenceIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RegionStoreSequenceIds)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionStoreSequenceIds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionStoreSequenceIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RegionStoreSequenceIds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RegionStoreSequenceIds)
    MergeFrom(*source);
  }
}

void RegionStoreSequenceIds::MergeFrom(const RegionStoreSequenceIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RegionStoreSequenceIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_sequence_id_.MergeFrom(from.store_sequence_id_);
  if (from.has_last_flushed_sequence_id()) {
    set_last_flushed_sequence_id(from.last_flushed_sequence_id());
  }
}

void RegionStoreSequenceIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RegionStoreSequenceIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionStoreSequenceIds::CopyFrom(const RegionStoreSequenceIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RegionStoreSequenceIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionStoreSequenceIds::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->store_sequence_id())) return false;
  return true;
}

void RegionStoreSequenceIds::InternalSwap(RegionStoreSequenceIds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&store_sequence_id_)->InternalSwap(CastToBase(&other->store_sequence_id_));
  swap(last_flushed_sequence_id_, other->last_flushed_sequence_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionStoreSequenceIds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionLoad::InitAsDefaultInstance() {
  ::hbase::pb::_RegionLoad_default_instance_._instance.get_mutable()->region_specifier_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class RegionLoad::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionLoad>()._has_bits_);
  static const ::hbase::pb::RegionSpecifier& region_specifier(const RegionLoad* msg);
  static void set_has_region_specifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stores(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_storefiles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_store_uncompressed_size_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_storefile_size_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_memstore_size_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_storefile_index_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_read_requests_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_write_requests_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_compacting_kvs(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_current_compacted_kvs(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_root_index_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_static_index_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_total_static_bloom_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_complete_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_data_locality(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_last_major_compaction_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_filtered_read_requests_count(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_cp_requests_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::hbase::pb::RegionSpecifier&
RegionLoad::_Internal::region_specifier(const RegionLoad* msg) {
  return *msg->region_specifier_;
}
void RegionLoad::clear_region_specifier() {
  if (region_specifier_ != nullptr) region_specifier_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RegionLoad::RegionLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RegionLoad)
}
RegionLoad::RegionLoad(const RegionLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      store_complete_sequence_id_(from.store_complete_sequence_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_specifier()) {
    region_specifier_ = new ::hbase::pb::RegionSpecifier(*from.region_specifier_);
  } else {
    region_specifier_ = nullptr;
  }
  ::memcpy(&stores_, &from.stores_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_locality_) -
    reinterpret_cast<char*>(&stores_)) + sizeof(data_locality_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RegionLoad)
}

void RegionLoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionLoad_ClusterStatus_2eproto.base);
  ::memset(&region_specifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_locality_) -
      reinterpret_cast<char*>(&region_specifier_)) + sizeof(data_locality_));
}

RegionLoad::~RegionLoad() {
  // @@protoc_insertion_point(destructor:hbase.pb.RegionLoad)
  SharedDtor();
}

void RegionLoad::SharedDtor() {
  if (this != internal_default_instance()) delete region_specifier_;
}

void RegionLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionLoad& RegionLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionLoad_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void RegionLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RegionLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_complete_sequence_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_specifier_ != nullptr);
    region_specifier_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&stores_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&write_requests_count_) -
        reinterpret_cast<char*>(&stores_)) + sizeof(write_requests_count_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&memstore_size_mb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_major_compaction_ts_) -
        reinterpret_cast<char*>(&memstore_size_mb_)) + sizeof(last_major_compaction_ts_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&filtered_read_requests_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_locality_) -
        reinterpret_cast<char*>(&filtered_read_requests_count_)) + sizeof(data_locality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionSpecifier region_specifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_specifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stores = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stores(&has_bits);
          stores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 storefiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_storefiles(&has_bits);
          storefiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 store_uncompressed_size_MB = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_store_uncompressed_size_mb(&has_bits);
          store_uncompressed_size_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 storefile_size_MB = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_storefile_size_mb(&has_bits);
          storefile_size_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 memstore_size_MB = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_memstore_size_mb(&has_bits);
          memstore_size_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 storefile_index_size_KB = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_storefile_index_size_kb(&has_bits);
          storefile_index_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 read_requests_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_read_requests_count(&has_bits);
          read_requests_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 write_requests_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_write_requests_count(&has_bits);
          write_requests_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_compacting_KVs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_total_compacting_kvs(&has_bits);
          total_compacting_kvs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 current_compacted_KVs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_current_compacted_kvs(&has_bits);
          current_compacted_kvs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 root_index_size_KB = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_root_index_size_kb(&has_bits);
          root_index_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_static_index_size_KB = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_total_static_index_size_kb(&has_bits);
          total_static_index_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_static_bloom_size_KB = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_total_static_bloom_size_kb(&has_bits);
          total_static_bloom_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 complete_sequence_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_complete_sequence_id(&has_bits);
          complete_sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float data_locality = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_data_locality(&has_bits);
          data_locality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_major_compaction_ts = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_last_major_compaction_ts(&has_bits);
          last_major_compaction_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_store_complete_sequence_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // optional uint64 filtered_read_requests_count = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_filtered_read_requests_count(&has_bits);
          filtered_read_requests_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 cp_requests_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_cp_requests_count(&has_bits);
          cp_requests_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionLoad::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RegionLoad)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionSpecifier region_specifier = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_specifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stores = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_stores(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 storefiles = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_storefiles(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storefiles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 store_uncompressed_size_MB = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_store_uncompressed_size_mb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_uncompressed_size_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 storefile_size_MB = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_storefile_size_mb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storefile_size_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 memstore_size_MB = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_memstore_size_mb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memstore_size_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 storefile_index_size_KB = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_storefile_index_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &storefile_index_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 read_requests_count = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_read_requests_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_requests_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 write_requests_count = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_write_requests_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_requests_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_compacting_KVs = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_total_compacting_kvs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_compacting_kvs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 current_compacted_KVs = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_current_compacted_kvs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_compacted_kvs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 root_index_size_KB = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_root_index_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &root_index_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_static_index_size_KB = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_total_static_index_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_static_index_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_static_bloom_size_KB = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_total_static_bloom_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_static_bloom_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 complete_sequence_id = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_complete_sequence_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &complete_sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float data_locality = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          _Internal::set_has_data_locality(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_locality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_major_compaction_ts = 17 [default = 0];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_last_major_compaction_ts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_major_compaction_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_store_complete_sequence_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filtered_read_requests_count = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_filtered_read_requests_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filtered_read_requests_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cp_requests_count = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_cp_requests_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cp_requests_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RegionLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RegionLoad)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionLoad::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RegionLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region_specifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::region_specifier(this), output);
  }

  // optional uint32 stores = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->stores(), output);
  }

  // optional uint32 storefiles = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->storefiles(), output);
  }

  // optional uint32 store_uncompressed_size_MB = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->store_uncompressed_size_mb(), output);
  }

  // optional uint32 storefile_size_MB = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->storefile_size_mb(), output);
  }

  // optional uint32 memstore_size_MB = 6;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->memstore_size_mb(), output);
  }

  // optional uint64 storefile_index_size_KB = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->storefile_index_size_kb(), output);
  }

  // optional uint64 read_requests_count = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->read_requests_count(), output);
  }

  // optional uint64 write_requests_count = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->write_requests_count(), output);
  }

  // optional uint64 total_compacting_KVs = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->total_compacting_kvs(), output);
  }

  // optional uint64 current_compacted_KVs = 11;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->current_compacted_kvs(), output);
  }

  // optional uint32 root_index_size_KB = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->root_index_size_kb(), output);
  }

  // optional uint32 total_static_index_size_KB = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->total_static_index_size_kb(), output);
  }

  // optional uint32 total_static_bloom_size_KB = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->total_static_bloom_size_kb(), output);
  }

  // optional uint64 complete_sequence_id = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(15, this->complete_sequence_id(), output);
  }

  // optional float data_locality = 16;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->data_locality(), output);
  }

  // optional uint64 last_major_compaction_ts = 17 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(17, this->last_major_compaction_ts(), output);
  }

  // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_complete_sequence_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->store_complete_sequence_id(static_cast<int>(i)),
      output);
  }

  // optional uint64 filtered_read_requests_count = 19;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(19, this->filtered_read_requests_count(), output);
  }

  // optional uint64 cp_requests_count = 20;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(20, this->cp_requests_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RegionLoad)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RegionLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionSpecifier region_specifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::region_specifier(this), target);
  }

  // optional uint32 stores = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->stores(), target);
  }

  // optional uint32 storefiles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->storefiles(), target);
  }

  // optional uint32 store_uncompressed_size_MB = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->store_uncompressed_size_mb(), target);
  }

  // optional uint32 storefile_size_MB = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->storefile_size_mb(), target);
  }

  // optional uint32 memstore_size_MB = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->memstore_size_mb(), target);
  }

  // optional uint64 storefile_index_size_KB = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->storefile_index_size_kb(), target);
  }

  // optional uint64 read_requests_count = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->read_requests_count(), target);
  }

  // optional uint64 write_requests_count = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->write_requests_count(), target);
  }

  // optional uint64 total_compacting_KVs = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->total_compacting_kvs(), target);
  }

  // optional uint64 current_compacted_KVs = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->current_compacted_kvs(), target);
  }

  // optional uint32 root_index_size_KB = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->root_index_size_kb(), target);
  }

  // optional uint32 total_static_index_size_KB = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->total_static_index_size_kb(), target);
  }

  // optional uint32 total_static_bloom_size_KB = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->total_static_bloom_size_kb(), target);
  }

  // optional uint64 complete_sequence_id = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->complete_sequence_id(), target);
  }

  // optional float data_locality = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->data_locality(), target);
  }

  // optional uint64 last_major_compaction_ts = 17 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->last_major_compaction_ts(), target);
  }

  // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_complete_sequence_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->store_complete_sequence_id(static_cast<int>(i)), target);
  }

  // optional uint64 filtered_read_requests_count = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->filtered_read_requests_count(), target);
  }

  // optional uint64 cp_requests_count = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->cp_requests_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RegionLoad)
  return target;
}

size_t RegionLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RegionLoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionSpecifier region_specifier = 1;
  if (has_region_specifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_specifier_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.StoreSequenceId store_complete_sequence_id = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->store_complete_sequence_id_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->store_complete_sequence_id(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional uint32 stores = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stores());
    }

    // optional uint32 storefiles = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->storefiles());
    }

    // optional uint32 store_uncompressed_size_MB = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->store_uncompressed_size_mb());
    }

    // optional uint32 storefile_size_MB = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->storefile_size_mb());
    }

    // optional uint64 storefile_index_size_KB = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->storefile_index_size_kb());
    }

    // optional uint64 read_requests_count = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->read_requests_count());
    }

    // optional uint64 write_requests_count = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->write_requests_count());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 memstore_size_MB = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->memstore_size_mb());
    }

    // optional uint32 root_index_size_KB = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->root_index_size_kb());
    }

    // optional uint64 total_compacting_KVs = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->total_compacting_kvs());
    }

    // optional uint64 current_compacted_KVs = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->current_compacted_kvs());
    }

    // optional uint32 total_static_index_size_KB = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->total_static_index_size_kb());
    }

    // optional uint32 total_static_bloom_size_KB = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->total_static_bloom_size_kb());
    }

    // optional uint64 complete_sequence_id = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->complete_sequence_id());
    }

    // optional uint64 last_major_compaction_ts = 17 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->last_major_compaction_ts());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint64 filtered_read_requests_count = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->filtered_read_requests_count());
    }

    // optional uint64 cp_requests_count = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->cp_requests_count());
    }

    // optional float data_locality = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RegionLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RegionLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RegionLoad)
    MergeFrom(*source);
  }
}

void RegionLoad::MergeFrom(const RegionLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RegionLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_complete_sequence_id_.MergeFrom(from.store_complete_sequence_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region_specifier()->::hbase::pb::RegionSpecifier::MergeFrom(from.region_specifier());
    }
    if (cached_has_bits & 0x00000002u) {
      stores_ = from.stores_;
    }
    if (cached_has_bits & 0x00000004u) {
      storefiles_ = from.storefiles_;
    }
    if (cached_has_bits & 0x00000008u) {
      store_uncompressed_size_mb_ = from.store_uncompressed_size_mb_;
    }
    if (cached_has_bits & 0x00000010u) {
      storefile_size_mb_ = from.storefile_size_mb_;
    }
    if (cached_has_bits & 0x00000020u) {
      storefile_index_size_kb_ = from.storefile_index_size_kb_;
    }
    if (cached_has_bits & 0x00000040u) {
      read_requests_count_ = from.read_requests_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      write_requests_count_ = from.write_requests_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      memstore_size_mb_ = from.memstore_size_mb_;
    }
    if (cached_has_bits & 0x00000200u) {
      root_index_size_kb_ = from.root_index_size_kb_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_compacting_kvs_ = from.total_compacting_kvs_;
    }
    if (cached_has_bits & 0x00000800u) {
      current_compacted_kvs_ = from.current_compacted_kvs_;
    }
    if (cached_has_bits & 0x00001000u) {
      total_static_index_size_kb_ = from.total_static_index_size_kb_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_static_bloom_size_kb_ = from.total_static_bloom_size_kb_;
    }
    if (cached_has_bits & 0x00004000u) {
      complete_sequence_id_ = from.complete_sequence_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      last_major_compaction_ts_ = from.last_major_compaction_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      filtered_read_requests_count_ = from.filtered_read_requests_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      cp_requests_count_ = from.cp_requests_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      data_locality_ = from.data_locality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RegionLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLoad::CopyFrom(const RegionLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RegionLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->store_complete_sequence_id())) return false;
  if (has_region_specifier()) {
    if (!this->region_specifier_->IsInitialized()) return false;
  }
  return true;
}

void RegionLoad::InternalSwap(RegionLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&store_complete_sequence_id_)->InternalSwap(CastToBase(&other->store_complete_sequence_id_));
  swap(region_specifier_, other->region_specifier_);
  swap(stores_, other->stores_);
  swap(storefiles_, other->storefiles_);
  swap(store_uncompressed_size_mb_, other->store_uncompressed_size_mb_);
  swap(storefile_size_mb_, other->storefile_size_mb_);
  swap(storefile_index_size_kb_, other->storefile_index_size_kb_);
  swap(read_requests_count_, other->read_requests_count_);
  swap(write_requests_count_, other->write_requests_count_);
  swap(memstore_size_mb_, other->memstore_size_mb_);
  swap(root_index_size_kb_, other->root_index_size_kb_);
  swap(total_compacting_kvs_, other->total_compacting_kvs_);
  swap(current_compacted_kvs_, other->current_compacted_kvs_);
  swap(total_static_index_size_kb_, other->total_static_index_size_kb_);
  swap(total_static_bloom_size_kb_, other->total_static_bloom_size_kb_);
  swap(complete_sequence_id_, other->complete_sequence_id_);
  swap(last_major_compaction_ts_, other->last_major_compaction_ts_);
  swap(filtered_read_requests_count_, other->filtered_read_requests_count_);
  swap(cp_requests_count_, other->cp_requests_count_);
  swap(data_locality_, other->data_locality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicationLoadSink::InitAsDefaultInstance() {
}
class ReplicationLoadSink::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicationLoadSink>()._has_bits_);
  static void set_has_ageoflastappliedop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestampsoflastappliedop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReplicationLoadSink::ReplicationLoadSink()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ReplicationLoadSink)
}
ReplicationLoadSink::ReplicationLoadSink(const ReplicationLoadSink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ageoflastappliedop_, &from.ageoflastappliedop_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestampsoflastappliedop_) -
    reinterpret_cast<char*>(&ageoflastappliedop_)) + sizeof(timestampsoflastappliedop_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ReplicationLoadSink)
}

void ReplicationLoadSink::SharedCtor() {
  ::memset(&ageoflastappliedop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestampsoflastappliedop_) -
      reinterpret_cast<char*>(&ageoflastappliedop_)) + sizeof(timestampsoflastappliedop_));
}

ReplicationLoadSink::~ReplicationLoadSink() {
  // @@protoc_insertion_point(destructor:hbase.pb.ReplicationLoadSink)
  SharedDtor();
}

void ReplicationLoadSink::SharedDtor() {
}

void ReplicationLoadSink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicationLoadSink& ReplicationLoadSink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicationLoadSink_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void ReplicationLoadSink::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ReplicationLoadSink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ageoflastappliedop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestampsoflastappliedop_) -
        reinterpret_cast<char*>(&ageoflastappliedop_)) + sizeof(timestampsoflastappliedop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplicationLoadSink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 ageOfLastAppliedOp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ageoflastappliedop(&has_bits);
          ageoflastappliedop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 timeStampsOfLastAppliedOp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestampsoflastappliedop(&has_bits);
          timestampsoflastappliedop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplicationLoadSink::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ReplicationLoadSink)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ageOfLastAppliedOp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ageoflastappliedop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ageoflastappliedop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timeStampsOfLastAppliedOp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_timestampsoflastappliedop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampsoflastappliedop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ReplicationLoadSink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ReplicationLoadSink)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplicationLoadSink::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ReplicationLoadSink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ageOfLastAppliedOp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->ageoflastappliedop(), output);
  }

  // required uint64 timeStampsOfLastAppliedOp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->timestampsoflastappliedop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ReplicationLoadSink)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicationLoadSink::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ReplicationLoadSink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ageOfLastAppliedOp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->ageoflastappliedop(), target);
  }

  // required uint64 timeStampsOfLastAppliedOp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestampsoflastappliedop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ReplicationLoadSink)
  return target;
}

size_t ReplicationLoadSink::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.ReplicationLoadSink)
  size_t total_size = 0;

  if (has_ageoflastappliedop()) {
    // required uint64 ageOfLastAppliedOp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ageoflastappliedop());
  }

  if (has_timestampsoflastappliedop()) {
    // required uint64 timeStampsOfLastAppliedOp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timestampsoflastappliedop());
  }

  return total_size;
}
size_t ReplicationLoadSink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ReplicationLoadSink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 ageOfLastAppliedOp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ageoflastappliedop());

    // required uint64 timeStampsOfLastAppliedOp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timestampsoflastappliedop());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicationLoadSink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ReplicationLoadSink)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicationLoadSink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicationLoadSink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ReplicationLoadSink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ReplicationLoadSink)
    MergeFrom(*source);
  }
}

void ReplicationLoadSink::MergeFrom(const ReplicationLoadSink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ReplicationLoadSink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ageoflastappliedop_ = from.ageoflastappliedop_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestampsoflastappliedop_ = from.timestampsoflastappliedop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicationLoadSink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ReplicationLoadSink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicationLoadSink::CopyFrom(const ReplicationLoadSink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ReplicationLoadSink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationLoadSink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReplicationLoadSink::InternalSwap(ReplicationLoadSink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ageoflastappliedop_, other->ageoflastappliedop_);
  swap(timestampsoflastappliedop_, other->timestampsoflastappliedop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicationLoadSink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicationLoadSource::InitAsDefaultInstance() {
}
class ReplicationLoadSource::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicationLoadSource>()._has_bits_);
  static void set_has_peerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ageoflastshippedop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sizeoflogqueue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timestampoflastshippedop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_replicationlag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ReplicationLoadSource::ReplicationLoadSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ReplicationLoadSource)
}
ReplicationLoadSource::ReplicationLoadSource(const ReplicationLoadSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_peerid()) {
    peerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peerid_);
  }
  ::memcpy(&ageoflastshippedop_, &from.ageoflastshippedop_,
    static_cast<size_t>(reinterpret_cast<char*>(&sizeoflogqueue_) -
    reinterpret_cast<char*>(&ageoflastshippedop_)) + sizeof(sizeoflogqueue_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ReplicationLoadSource)
}

void ReplicationLoadSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicationLoadSource_ClusterStatus_2eproto.base);
  peerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ageoflastshippedop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sizeoflogqueue_) -
      reinterpret_cast<char*>(&ageoflastshippedop_)) + sizeof(sizeoflogqueue_));
}

ReplicationLoadSource::~ReplicationLoadSource() {
  // @@protoc_insertion_point(destructor:hbase.pb.ReplicationLoadSource)
  SharedDtor();
}

void ReplicationLoadSource::SharedDtor() {
  peerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplicationLoadSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicationLoadSource& ReplicationLoadSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicationLoadSource_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void ReplicationLoadSource::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ReplicationLoadSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    peerid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&ageoflastshippedop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sizeoflogqueue_) -
        reinterpret_cast<char*>(&ageoflastshippedop_)) + sizeof(sizeoflogqueue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplicationLoadSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string peerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_peerid(), ptr, ctx, "hbase.pb.ReplicationLoadSource.peerID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ageOfLastShippedOp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ageoflastshippedop(&has_bits);
          ageoflastshippedop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sizeOfLogQueue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sizeoflogqueue(&has_bits);
          sizeoflogqueue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 timeStampOfLastShippedOp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestampoflastshippedop(&has_bits);
          timestampoflastshippedop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 replicationLag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_replicationlag(&has_bits);
          replicationlag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplicationLoadSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ReplicationLoadSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peerID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_peerid()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peerid().data(), static_cast<int>(this->peerid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ReplicationLoadSource.peerID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ageOfLastShippedOp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ageoflastshippedop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ageoflastshippedop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sizeOfLogQueue = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_sizeoflogqueue(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sizeoflogqueue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timeStampOfLastShippedOp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_timestampoflastshippedop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampoflastshippedop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 replicationLag = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_replicationlag(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replicationlag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ReplicationLoadSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ReplicationLoadSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplicationLoadSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ReplicationLoadSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peerID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peerid().data(), static_cast<int>(this->peerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicationLoadSource.peerID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->peerid(), output);
  }

  // required uint64 ageOfLastShippedOp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->ageoflastshippedop(), output);
  }

  // required uint32 sizeOfLogQueue = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->sizeoflogqueue(), output);
  }

  // required uint64 timeStampOfLastShippedOp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->timestampoflastshippedop(), output);
  }

  // required uint64 replicationLag = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->replicationlag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ReplicationLoadSource)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicationLoadSource::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ReplicationLoadSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string peerID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peerid().data(), static_cast<int>(this->peerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicationLoadSource.peerID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->peerid(), target);
  }

  // required uint64 ageOfLastShippedOp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->ageoflastshippedop(), target);
  }

  // required uint32 sizeOfLogQueue = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->sizeoflogqueue(), target);
  }

  // required uint64 timeStampOfLastShippedOp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestampoflastshippedop(), target);
  }

  // required uint64 replicationLag = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->replicationlag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ReplicationLoadSource)
  return target;
}

size_t ReplicationLoadSource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.ReplicationLoadSource)
  size_t total_size = 0;

  if (has_peerid()) {
    // required string peerID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->peerid());
  }

  if (has_ageoflastshippedop()) {
    // required uint64 ageOfLastShippedOp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ageoflastshippedop());
  }

  if (has_timestampoflastshippedop()) {
    // required uint64 timeStampOfLastShippedOp = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timestampoflastshippedop());
  }

  if (has_replicationlag()) {
    // required uint64 replicationLag = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->replicationlag());
  }

  if (has_sizeoflogqueue()) {
    // required uint32 sizeOfLogQueue = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sizeoflogqueue());
  }

  return total_size;
}
size_t ReplicationLoadSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ReplicationLoadSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string peerID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->peerid());

    // required uint64 ageOfLastShippedOp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ageoflastshippedop());

    // required uint64 timeStampOfLastShippedOp = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timestampoflastshippedop());

    // required uint64 replicationLag = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->replicationlag());

    // required uint32 sizeOfLogQueue = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sizeoflogqueue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicationLoadSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ReplicationLoadSource)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicationLoadSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicationLoadSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ReplicationLoadSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ReplicationLoadSource)
    MergeFrom(*source);
  }
}

void ReplicationLoadSource::MergeFrom(const ReplicationLoadSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ReplicationLoadSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      peerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      ageoflastshippedop_ = from.ageoflastshippedop_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestampoflastshippedop_ = from.timestampoflastshippedop_;
    }
    if (cached_has_bits & 0x00000008u) {
      replicationlag_ = from.replicationlag_;
    }
    if (cached_has_bits & 0x00000010u) {
      sizeoflogqueue_ = from.sizeoflogqueue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicationLoadSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ReplicationLoadSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicationLoadSource::CopyFrom(const ReplicationLoadSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ReplicationLoadSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationLoadSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ReplicationLoadSource::InternalSwap(ReplicationLoadSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  peerid_.Swap(&other->peerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ageoflastshippedop_, other->ageoflastshippedop_);
  swap(timestampoflastshippedop_, other->timestampoflastshippedop_);
  swap(replicationlag_, other->replicationlag_);
  swap(sizeoflogqueue_, other->sizeoflogqueue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicationLoadSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerLoad::InitAsDefaultInstance() {
  ::hbase::pb::_ServerLoad_default_instance_._instance.get_mutable()->replloadsink_ = const_cast< ::hbase::pb::ReplicationLoadSink*>(
      ::hbase::pb::ReplicationLoadSink::internal_default_instance());
}
class ServerLoad::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerLoad>()._has_bits_);
  static void set_has_number_of_requests(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_number_of_requests(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_used_heap_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_heap_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_report_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_report_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_info_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hbase::pb::ReplicationLoadSink& replloadsink(const ServerLoad* msg);
  static void set_has_replloadsink(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::ReplicationLoadSink&
ServerLoad::_Internal::replloadsink(const ServerLoad* msg) {
  return *msg->replloadsink_;
}
void ServerLoad::clear_coprocessors() {
  coprocessors_.Clear();
}
ServerLoad::ServerLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ServerLoad)
}
ServerLoad::ServerLoad(const ServerLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      region_loads_(from.region_loads_),
      coprocessors_(from.coprocessors_),
      replloadsource_(from.replloadsource_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_replloadsink()) {
    replloadsink_ = new ::hbase::pb::ReplicationLoadSink(*from.replloadsink_);
  } else {
    replloadsink_ = nullptr;
  }
  ::memcpy(&number_of_requests_, &from.number_of_requests_,
    static_cast<size_t>(reinterpret_cast<char*>(&info_server_port_) -
    reinterpret_cast<char*>(&number_of_requests_)) + sizeof(info_server_port_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ServerLoad)
}

void ServerLoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerLoad_ClusterStatus_2eproto.base);
  ::memset(&replloadsink_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_server_port_) -
      reinterpret_cast<char*>(&replloadsink_)) + sizeof(info_server_port_));
}

ServerLoad::~ServerLoad() {
  // @@protoc_insertion_point(destructor:hbase.pb.ServerLoad)
  SharedDtor();
}

void ServerLoad::SharedDtor() {
  if (this != internal_default_instance()) delete replloadsink_;
}

void ServerLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerLoad& ServerLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerLoad_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void ServerLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ServerLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_loads_.Clear();
  coprocessors_.Clear();
  replloadsource_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(replloadsink_ != nullptr);
    replloadsink_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&number_of_requests_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&info_server_port_) -
        reinterpret_cast<char*>(&number_of_requests_)) + sizeof(info_server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 number_of_requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number_of_requests(&has_bits);
          number_of_requests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_number_of_requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_number_of_requests(&has_bits);
          total_number_of_requests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 used_heap_MB = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_used_heap_mb(&has_bits);
          used_heap_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_heap_MB = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_heap_mb(&has_bits);
          max_heap_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.RegionLoad region_loads = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_region_loads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.Coprocessor coprocessors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_coprocessors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional uint64 report_start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_report_start_time(&has_bits);
          report_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 report_end_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_report_end_time(&has_bits);
          report_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 info_server_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_info_server_port(&has_bits);
          info_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_replloadsource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_replloadsink(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerLoad::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ServerLoad)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 number_of_requests = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_number_of_requests(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &number_of_requests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_number_of_requests = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_number_of_requests(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_number_of_requests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 used_heap_MB = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_used_heap_mb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_heap_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_heap_MB = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_heap_mb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_heap_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.RegionLoad region_loads = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_region_loads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.Coprocessor coprocessors = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_coprocessors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 report_start_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_report_start_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &report_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 report_end_time = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_report_end_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &report_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 info_server_port = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_info_server_port(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_replloadsource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_replloadsink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ServerLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ServerLoad)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerLoad::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ServerLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 number_of_requests = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->number_of_requests(), output);
  }

  // optional uint64 total_number_of_requests = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->total_number_of_requests(), output);
  }

  // optional uint32 used_heap_MB = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->used_heap_mb(), output);
  }

  // optional uint32 max_heap_MB = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->max_heap_mb(), output);
  }

  // repeated .hbase.pb.RegionLoad region_loads = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_loads_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->region_loads(static_cast<int>(i)),
      output);
  }

  // repeated .hbase.pb.Coprocessor coprocessors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coprocessors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->coprocessors(static_cast<int>(i)),
      output);
  }

  // optional uint64 report_start_time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->report_start_time(), output);
  }

  // optional uint64 report_end_time = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->report_end_time(), output);
  }

  // optional uint32 info_server_port = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->info_server_port(), output);
  }

  // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replloadsource_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->replloadsource(static_cast<int>(i)),
      output);
  }

  // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::replloadsink(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ServerLoad)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ServerLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 number_of_requests = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->number_of_requests(), target);
  }

  // optional uint64 total_number_of_requests = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_number_of_requests(), target);
  }

  // optional uint32 used_heap_MB = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->used_heap_mb(), target);
  }

  // optional uint32 max_heap_MB = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_heap_mb(), target);
  }

  // repeated .hbase.pb.RegionLoad region_loads = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_loads_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->region_loads(static_cast<int>(i)), target);
  }

  // repeated .hbase.pb.Coprocessor coprocessors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coprocessors_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->coprocessors(static_cast<int>(i)), target);
  }

  // optional uint64 report_start_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->report_start_time(), target);
  }

  // optional uint64 report_end_time = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->report_end_time(), target);
  }

  // optional uint32 info_server_port = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->info_server_port(), target);
  }

  // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replloadsource_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->replloadsource(static_cast<int>(i)), target);
  }

  // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::replloadsink(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ServerLoad)
  return target;
}

size_t ServerLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ServerLoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionLoad region_loads = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->region_loads_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->region_loads(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.Coprocessor coprocessors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->coprocessors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->coprocessors(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.ReplicationLoadSource replLoadSource = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->replloadsource_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->replloadsource(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .hbase.pb.ReplicationLoadSink replLoadSink = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replloadsink_);
    }

    // optional uint64 number_of_requests = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->number_of_requests());
    }

    // optional uint64 total_number_of_requests = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->total_number_of_requests());
    }

    // optional uint32 used_heap_MB = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->used_heap_mb());
    }

    // optional uint32 max_heap_MB = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_heap_mb());
    }

    // optional uint64 report_start_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->report_start_time());
    }

    // optional uint64 report_end_time = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->report_end_time());
    }

    // optional uint32 info_server_port = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->info_server_port());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ServerLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ServerLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ServerLoad)
    MergeFrom(*source);
  }
}

void ServerLoad::MergeFrom(const ServerLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ServerLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_loads_.MergeFrom(from.region_loads_);
  coprocessors_.MergeFrom(from.coprocessors_);
  replloadsource_.MergeFrom(from.replloadsource_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_replloadsink()->::hbase::pb::ReplicationLoadSink::MergeFrom(from.replloadsink());
    }
    if (cached_has_bits & 0x00000002u) {
      number_of_requests_ = from.number_of_requests_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_number_of_requests_ = from.total_number_of_requests_;
    }
    if (cached_has_bits & 0x00000008u) {
      used_heap_mb_ = from.used_heap_mb_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_heap_mb_ = from.max_heap_mb_;
    }
    if (cached_has_bits & 0x00000020u) {
      report_start_time_ = from.report_start_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      report_end_time_ = from.report_end_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      info_server_port_ = from.info_server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ServerLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerLoad::CopyFrom(const ServerLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ServerLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLoad::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->region_loads())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->coprocessors())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->replloadsource())) return false;
  if (has_replloadsink()) {
    if (!this->replloadsink_->IsInitialized()) return false;
  }
  return true;
}

void ServerLoad::InternalSwap(ServerLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&region_loads_)->InternalSwap(CastToBase(&other->region_loads_));
  CastToBase(&coprocessors_)->InternalSwap(CastToBase(&other->coprocessors_));
  CastToBase(&replloadsource_)->InternalSwap(CastToBase(&other->replloadsource_));
  swap(replloadsink_, other->replloadsink_);
  swap(number_of_requests_, other->number_of_requests_);
  swap(total_number_of_requests_, other->total_number_of_requests_);
  swap(used_heap_mb_, other->used_heap_mb_);
  swap(max_heap_mb_, other->max_heap_mb_);
  swap(report_start_time_, other->report_start_time_);
  swap(report_end_time_, other->report_end_time_);
  swap(info_server_port_, other->info_server_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LiveServerInfo::InitAsDefaultInstance() {
  ::hbase::pb::_LiveServerInfo_default_instance_._instance.get_mutable()->server_ = const_cast< ::hbase::pb::ServerName*>(
      ::hbase::pb::ServerName::internal_default_instance());
  ::hbase::pb::_LiveServerInfo_default_instance_._instance.get_mutable()->server_load_ = const_cast< ::hbase::pb::ServerLoad*>(
      ::hbase::pb::ServerLoad::internal_default_instance());
}
class LiveServerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveServerInfo>()._has_bits_);
  static const ::hbase::pb::ServerName& server(const LiveServerInfo* msg);
  static void set_has_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::ServerLoad& server_load(const LiveServerInfo* msg);
  static void set_has_server_load(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::ServerName&
LiveServerInfo::_Internal::server(const LiveServerInfo* msg) {
  return *msg->server_;
}
const ::hbase::pb::ServerLoad&
LiveServerInfo::_Internal::server_load(const LiveServerInfo* msg) {
  return *msg->server_load_;
}
void LiveServerInfo::clear_server() {
  if (server_ != nullptr) server_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LiveServerInfo::LiveServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.LiveServerInfo)
}
LiveServerInfo::LiveServerInfo(const LiveServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::hbase::pb::ServerName(*from.server_);
  } else {
    server_ = nullptr;
  }
  if (from.has_server_load()) {
    server_load_ = new ::hbase::pb::ServerLoad(*from.server_load_);
  } else {
    server_load_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.LiveServerInfo)
}

void LiveServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiveServerInfo_ClusterStatus_2eproto.base);
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_load_) -
      reinterpret_cast<char*>(&server_)) + sizeof(server_load_));
}

LiveServerInfo::~LiveServerInfo() {
  // @@protoc_insertion_point(destructor:hbase.pb.LiveServerInfo)
  SharedDtor();
}

void LiveServerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete server_load_;
}

void LiveServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiveServerInfo& LiveServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiveServerInfo_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void LiveServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.LiveServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_ != nullptr);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_load_ != nullptr);
      server_load_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiveServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ServerName server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.ServerLoad server_load = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_server_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiveServerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.LiveServerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.ServerLoad server_load = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.LiveServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.LiveServerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiveServerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.LiveServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerName server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::server(this), output);
  }

  // required .hbase.pb.ServerLoad server_load = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::server_load(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.LiveServerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* LiveServerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.LiveServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerName server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::server(this), target);
  }

  // required .hbase.pb.ServerLoad server_load = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::server_load(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.LiveServerInfo)
  return target;
}

size_t LiveServerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.LiveServerInfo)
  size_t total_size = 0;

  if (has_server()) {
    // required .hbase.pb.ServerName server = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  if (has_server_load()) {
    // required .hbase.pb.ServerLoad server_load = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_load_);
  }

  return total_size;
}
size_t LiveServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.LiveServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .hbase.pb.ServerName server = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);

    // required .hbase.pb.ServerLoad server_load = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_load_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiveServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.LiveServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LiveServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiveServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.LiveServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.LiveServerInfo)
    MergeFrom(*source);
  }
}

void LiveServerInfo::MergeFrom(const LiveServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.LiveServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::hbase::pb::ServerName::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_server_load()->::hbase::pb::ServerLoad::MergeFrom(from.server_load());
    }
  }
}

void LiveServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.LiveServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveServerInfo::CopyFrom(const LiveServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.LiveServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_server_load()) {
    if (!this->server_load_->IsInitialized()) return false;
  }
  return true;
}

void LiveServerInfo::InternalSwap(LiveServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_, other->server_);
  swap(server_load_, other->server_load_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClusterStatus::InitAsDefaultInstance() {
  ::hbase::pb::_ClusterStatus_default_instance_._instance.get_mutable()->hbase_version_ = const_cast< ::hbase::pb::HBaseVersionFileContent*>(
      ::hbase::pb::HBaseVersionFileContent::internal_default_instance());
  ::hbase::pb::_ClusterStatus_default_instance_._instance.get_mutable()->cluster_id_ = const_cast< ::hbase::pb::ClusterId*>(
      ::hbase::pb::ClusterId::internal_default_instance());
  ::hbase::pb::_ClusterStatus_default_instance_._instance.get_mutable()->master_ = const_cast< ::hbase::pb::ServerName*>(
      ::hbase::pb::ServerName::internal_default_instance());
}
class ClusterStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ClusterStatus>()._has_bits_);
  static const ::hbase::pb::HBaseVersionFileContent& hbase_version(const ClusterStatus* msg);
  static void set_has_hbase_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::ClusterId& cluster_id(const ClusterStatus* msg);
  static void set_has_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::ServerName& master(const ClusterStatus* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_balancer_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hbase::pb::HBaseVersionFileContent&
ClusterStatus::_Internal::hbase_version(const ClusterStatus* msg) {
  return *msg->hbase_version_;
}
const ::hbase::pb::ClusterId&
ClusterStatus::_Internal::cluster_id(const ClusterStatus* msg) {
  return *msg->cluster_id_;
}
const ::hbase::pb::ServerName&
ClusterStatus::_Internal::master(const ClusterStatus* msg) {
  return *msg->master_;
}
void ClusterStatus::clear_hbase_version() {
  if (hbase_version_ != nullptr) hbase_version_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ClusterStatus::clear_dead_servers() {
  dead_servers_.Clear();
}
void ClusterStatus::clear_cluster_id() {
  if (cluster_id_ != nullptr) cluster_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ClusterStatus::clear_master_coprocessors() {
  master_coprocessors_.Clear();
}
void ClusterStatus::clear_master() {
  if (master_ != nullptr) master_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ClusterStatus::clear_backup_masters() {
  backup_masters_.Clear();
}
ClusterStatus::ClusterStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ClusterStatus)
}
ClusterStatus::ClusterStatus(const ClusterStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      live_servers_(from.live_servers_),
      dead_servers_(from.dead_servers_),
      regions_in_transition_(from.regions_in_transition_),
      master_coprocessors_(from.master_coprocessors_),
      backup_masters_(from.backup_masters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hbase_version()) {
    hbase_version_ = new ::hbase::pb::HBaseVersionFileContent(*from.hbase_version_);
  } else {
    hbase_version_ = nullptr;
  }
  if (from.has_cluster_id()) {
    cluster_id_ = new ::hbase::pb::ClusterId(*from.cluster_id_);
  } else {
    cluster_id_ = nullptr;
  }
  if (from.has_master()) {
    master_ = new ::hbase::pb::ServerName(*from.master_);
  } else {
    master_ = nullptr;
  }
  balancer_on_ = from.balancer_on_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ClusterStatus)
}

void ClusterStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterStatus_ClusterStatus_2eproto.base);
  ::memset(&hbase_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balancer_on_) -
      reinterpret_cast<char*>(&hbase_version_)) + sizeof(balancer_on_));
}

ClusterStatus::~ClusterStatus() {
  // @@protoc_insertion_point(destructor:hbase.pb.ClusterStatus)
  SharedDtor();
}

void ClusterStatus::SharedDtor() {
  if (this != internal_default_instance()) delete hbase_version_;
  if (this != internal_default_instance()) delete cluster_id_;
  if (this != internal_default_instance()) delete master_;
}

void ClusterStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterStatus& ClusterStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterStatus_ClusterStatus_2eproto.base);
  return *internal_default_instance();
}


void ClusterStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ClusterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  live_servers_.Clear();
  dead_servers_.Clear();
  regions_in_transition_.Clear();
  master_coprocessors_.Clear();
  backup_masters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hbase_version_ != nullptr);
      hbase_version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cluster_id_ != nullptr);
      cluster_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(master_ != nullptr);
      master_->Clear();
    }
  }
  balancer_on_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClusterStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_hbase_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.LiveServerInfo live_servers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_live_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.ServerName dead_servers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dead_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_regions_in_transition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.ClusterId cluster_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cluster_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_master_coprocessors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.ServerName master = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.ServerName backup_masters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_backup_masters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional bool balancer_on = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_balancer_on(&has_bits);
          balancer_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClusterStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ClusterStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hbase_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.LiveServerInfo live_servers = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_live_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.ServerName dead_servers = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dead_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_regions_in_transition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.ClusterId cluster_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_master_coprocessors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.ServerName master = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_master()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.ServerName backup_masters = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_backup_masters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool balancer_on = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_balancer_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &balancer_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ClusterStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ClusterStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClusterStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ClusterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::hbase_version(this), output);
  }

  // repeated .hbase.pb.LiveServerInfo live_servers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->live_servers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->live_servers(static_cast<int>(i)),
      output);
  }

  // repeated .hbase.pb.ServerName dead_servers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dead_servers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->dead_servers(static_cast<int>(i)),
      output);
  }

  // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_in_transition_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->regions_in_transition(static_cast<int>(i)),
      output);
  }

  // optional .hbase.pb.ClusterId cluster_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::cluster_id(this), output);
  }

  // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->master_coprocessors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->master_coprocessors(static_cast<int>(i)),
      output);
  }

  // optional .hbase.pb.ServerName master = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::master(this), output);
  }

  // repeated .hbase.pb.ServerName backup_masters = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backup_masters_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->backup_masters(static_cast<int>(i)),
      output);
  }

  // optional bool balancer_on = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->balancer_on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ClusterStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ClusterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::hbase_version(this), target);
  }

  // repeated .hbase.pb.LiveServerInfo live_servers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->live_servers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->live_servers(static_cast<int>(i)), target);
  }

  // repeated .hbase.pb.ServerName dead_servers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dead_servers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->dead_servers(static_cast<int>(i)), target);
  }

  // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_in_transition_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->regions_in_transition(static_cast<int>(i)), target);
  }

  // optional .hbase.pb.ClusterId cluster_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::cluster_id(this), target);
  }

  // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->master_coprocessors_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->master_coprocessors(static_cast<int>(i)), target);
  }

  // optional .hbase.pb.ServerName master = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::master(this), target);
  }

  // repeated .hbase.pb.ServerName backup_masters = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backup_masters_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->backup_masters(static_cast<int>(i)), target);
  }

  // optional bool balancer_on = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->balancer_on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ClusterStatus)
  return target;
}

size_t ClusterStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ClusterStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.LiveServerInfo live_servers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->live_servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->live_servers(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.ServerName dead_servers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dead_servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dead_servers(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.RegionInTransition regions_in_transition = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_in_transition_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->regions_in_transition(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.Coprocessor master_coprocessors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->master_coprocessors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->master_coprocessors(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.ServerName backup_masters = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->backup_masters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->backup_masters(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .hbase.pb.HBaseVersionFileContent hbase_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hbase_version_);
    }

    // optional .hbase.pb.ClusterId cluster_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cluster_id_);
    }

    // optional .hbase.pb.ServerName master = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *master_);
    }

    // optional bool balancer_on = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ClusterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ClusterStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ClusterStatus)
    MergeFrom(*source);
  }
}

void ClusterStatus::MergeFrom(const ClusterStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ClusterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  live_servers_.MergeFrom(from.live_servers_);
  dead_servers_.MergeFrom(from.dead_servers_);
  regions_in_transition_.MergeFrom(from.regions_in_transition_);
  master_coprocessors_.MergeFrom(from.master_coprocessors_);
  backup_masters_.MergeFrom(from.backup_masters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hbase_version()->::hbase::pb::HBaseVersionFileContent::MergeFrom(from.hbase_version());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cluster_id()->::hbase::pb::ClusterId::MergeFrom(from.cluster_id());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_master()->::hbase::pb::ServerName::MergeFrom(from.master());
    }
    if (cached_has_bits & 0x00000008u) {
      balancer_on_ = from.balancer_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClusterStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ClusterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterStatus::CopyFrom(const ClusterStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ClusterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterStatus::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->live_servers())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->dead_servers())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->regions_in_transition())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->master_coprocessors())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->backup_masters())) return false;
  if (has_hbase_version()) {
    if (!this->hbase_version_->IsInitialized()) return false;
  }
  if (has_cluster_id()) {
    if (!this->cluster_id_->IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master_->IsInitialized()) return false;
  }
  return true;
}

void ClusterStatus::InternalSwap(ClusterStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&live_servers_)->InternalSwap(CastToBase(&other->live_servers_));
  CastToBase(&dead_servers_)->InternalSwap(CastToBase(&other->dead_servers_));
  CastToBase(&regions_in_transition_)->InternalSwap(CastToBase(&other->regions_in_transition_));
  CastToBase(&master_coprocessors_)->InternalSwap(CastToBase(&other->master_coprocessors_));
  CastToBase(&backup_masters_)->InternalSwap(CastToBase(&other->backup_masters_));
  swap(hbase_version_, other->hbase_version_);
  swap(cluster_id_, other->cluster_id_);
  swap(master_, other->master_);
  swap(balancer_on_, other->balancer_on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::RegionState* Arena::CreateMaybeMessage< ::hbase::pb::RegionState >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RegionState >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RegionInTransition* Arena::CreateMaybeMessage< ::hbase::pb::RegionInTransition >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RegionInTransition >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::StoreSequenceId* Arena::CreateMaybeMessage< ::hbase::pb::StoreSequenceId >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::StoreSequenceId >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RegionStoreSequenceIds* Arena::CreateMaybeMessage< ::hbase::pb::RegionStoreSequenceIds >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RegionStoreSequenceIds >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RegionLoad* Arena::CreateMaybeMessage< ::hbase::pb::RegionLoad >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RegionLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ReplicationLoadSink* Arena::CreateMaybeMessage< ::hbase::pb::ReplicationLoadSink >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ReplicationLoadSink >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ReplicationLoadSource* Arena::CreateMaybeMessage< ::hbase::pb::ReplicationLoadSource >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ReplicationLoadSource >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ServerLoad* Arena::CreateMaybeMessage< ::hbase::pb::ServerLoad >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ServerLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::LiveServerInfo* Arena::CreateMaybeMessage< ::hbase::pb::LiveServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::LiveServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ClusterStatus* Arena::CreateMaybeMessage< ::hbase::pb::ClusterStatus >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ClusterStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
