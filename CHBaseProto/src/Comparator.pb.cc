// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Comparator.proto

#include "Comparator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Comparator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ByteArrayComparable_Comparator_2eproto;
namespace hbase {
namespace pb {
class ComparatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Comparator> _instance;
} _Comparator_default_instance_;
class ByteArrayComparableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ByteArrayComparable> _instance;
} _ByteArrayComparable_default_instance_;
class BinaryComparatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryComparator> _instance;
} _BinaryComparator_default_instance_;
class LongComparatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongComparator> _instance;
} _LongComparator_default_instance_;
class BinaryPrefixComparatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryPrefixComparator> _instance;
} _BinaryPrefixComparator_default_instance_;
class BitComparatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitComparator> _instance;
} _BitComparator_default_instance_;
class NullComparatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NullComparator> _instance;
} _NullComparator_default_instance_;
class RegexStringComparatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegexStringComparator> _instance;
} _RegexStringComparator_default_instance_;
class SubstringComparatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstringComparator> _instance;
} _SubstringComparator_default_instance_;
class BigDecimalComparatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigDecimalComparator> _instance;
} _BigDecimalComparator_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_BigDecimalComparator_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_BigDecimalComparator_default_instance_;
    new (ptr) ::hbase::pb::BigDecimalComparator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::BigDecimalComparator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BigDecimalComparator_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BigDecimalComparator_Comparator_2eproto}, {
      &scc_info_ByteArrayComparable_Comparator_2eproto.base,}};

static void InitDefaultsscc_info_BinaryComparator_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_BinaryComparator_default_instance_;
    new (ptr) ::hbase::pb::BinaryComparator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::BinaryComparator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinaryComparator_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BinaryComparator_Comparator_2eproto}, {
      &scc_info_ByteArrayComparable_Comparator_2eproto.base,}};

static void InitDefaultsscc_info_BinaryPrefixComparator_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_BinaryPrefixComparator_default_instance_;
    new (ptr) ::hbase::pb::BinaryPrefixComparator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::BinaryPrefixComparator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinaryPrefixComparator_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BinaryPrefixComparator_Comparator_2eproto}, {
      &scc_info_ByteArrayComparable_Comparator_2eproto.base,}};

static void InitDefaultsscc_info_BitComparator_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_BitComparator_default_instance_;
    new (ptr) ::hbase::pb::BitComparator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::BitComparator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BitComparator_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BitComparator_Comparator_2eproto}, {
      &scc_info_ByteArrayComparable_Comparator_2eproto.base,}};

static void InitDefaultsscc_info_ByteArrayComparable_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ByteArrayComparable_default_instance_;
    new (ptr) ::hbase::pb::ByteArrayComparable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ByteArrayComparable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ByteArrayComparable_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ByteArrayComparable_Comparator_2eproto}, {}};

static void InitDefaultsscc_info_Comparator_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Comparator_default_instance_;
    new (ptr) ::hbase::pb::Comparator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Comparator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Comparator_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Comparator_Comparator_2eproto}, {}};

static void InitDefaultsscc_info_LongComparator_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_LongComparator_default_instance_;
    new (ptr) ::hbase::pb::LongComparator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::LongComparator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LongComparator_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LongComparator_Comparator_2eproto}, {
      &scc_info_ByteArrayComparable_Comparator_2eproto.base,}};

static void InitDefaultsscc_info_NullComparator_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_NullComparator_default_instance_;
    new (ptr) ::hbase::pb::NullComparator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::NullComparator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NullComparator_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NullComparator_Comparator_2eproto}, {}};

static void InitDefaultsscc_info_RegexStringComparator_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RegexStringComparator_default_instance_;
    new (ptr) ::hbase::pb::RegexStringComparator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RegexStringComparator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegexStringComparator_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RegexStringComparator_Comparator_2eproto}, {}};

static void InitDefaultsscc_info_SubstringComparator_Comparator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SubstringComparator_default_instance_;
    new (ptr) ::hbase::pb::SubstringComparator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SubstringComparator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstringComparator_Comparator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubstringComparator_Comparator_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Comparator_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Comparator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Comparator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Comparator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Comparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Comparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Comparator, name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Comparator, serialized_comparator_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ByteArrayComparable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ByteArrayComparable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ByteArrayComparable, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BinaryComparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BinaryComparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BinaryComparator, comparable_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::LongComparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::LongComparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::LongComparator, comparable_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BinaryPrefixComparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BinaryPrefixComparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BinaryPrefixComparator, comparable_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BitComparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BitComparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BitComparator, comparable_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BitComparator, bitwise_op_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::NullComparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::NullComparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegexStringComparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegexStringComparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegexStringComparator, pattern_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegexStringComparator, pattern_flags_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegexStringComparator, charset_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegexStringComparator, engine_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SubstringComparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SubstringComparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SubstringComparator, substr_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BigDecimalComparator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BigDecimalComparator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BigDecimalComparator, comparable_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hbase::pb::Comparator)},
  { 9, 15, sizeof(::hbase::pb::ByteArrayComparable)},
  { 16, 22, sizeof(::hbase::pb::BinaryComparator)},
  { 23, 29, sizeof(::hbase::pb::LongComparator)},
  { 30, 36, sizeof(::hbase::pb::BinaryPrefixComparator)},
  { 37, 44, sizeof(::hbase::pb::BitComparator)},
  { 46, 51, sizeof(::hbase::pb::NullComparator)},
  { 51, 60, sizeof(::hbase::pb::RegexStringComparator)},
  { 64, 70, sizeof(::hbase::pb::SubstringComparator)},
  { 71, 77, sizeof(::hbase::pb::BigDecimalComparator)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Comparator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ByteArrayComparable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_BinaryComparator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_LongComparator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_BinaryPrefixComparator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_BitComparator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_NullComparator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RegexStringComparator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SubstringComparator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_BigDecimalComparator_default_instance_),
};

const char descriptor_table_protodef_Comparator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Comparator.proto\022\010hbase.pb\"9\n\nComparat"
  "or\022\014\n\004name\030\001 \002(\t\022\035\n\025serialized_comparato"
  "r\030\002 \001(\014\"$\n\023ByteArrayComparable\022\r\n\005value\030"
  "\001 \001(\014\"E\n\020BinaryComparator\0221\n\ncomparable\030"
  "\001 \002(\0132\035.hbase.pb.ByteArrayComparable\"C\n\016"
  "LongComparator\0221\n\ncomparable\030\001 \002(\0132\035.hba"
  "se.pb.ByteArrayComparable\"K\n\026BinaryPrefi"
  "xComparator\0221\n\ncomparable\030\001 \002(\0132\035.hbase."
  "pb.ByteArrayComparable\"\240\001\n\rBitComparator"
  "\0221\n\ncomparable\030\001 \002(\0132\035.hbase.pb.ByteArra"
  "yComparable\0225\n\nbitwise_op\030\002 \002(\0162!.hbase."
  "pb.BitComparator.BitwiseOp\"%\n\tBitwiseOp\022"
  "\007\n\003AND\020\001\022\006\n\002OR\020\002\022\007\n\003XOR\020\003\"\020\n\016NullCompara"
  "tor\"`\n\025RegexStringComparator\022\017\n\007pattern\030"
  "\001 \002(\t\022\025\n\rpattern_flags\030\002 \002(\005\022\017\n\007charset\030"
  "\003 \002(\t\022\016\n\006engine\030\004 \001(\t\"%\n\023SubstringCompar"
  "ator\022\016\n\006substr\030\001 \002(\t\"I\n\024BigDecimalCompar"
  "ator\0221\n\ncomparable\030\001 \002(\0132\035.hbase.pb.Byte"
  "ArrayComparableBF\n*org.apache.hadoop.hba"
  "se.protobuf.generatedB\020ComparatorProtosH"
  "\001\210\001\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Comparator_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Comparator_2eproto_sccs[10] = {
  &scc_info_BigDecimalComparator_Comparator_2eproto.base,
  &scc_info_BinaryComparator_Comparator_2eproto.base,
  &scc_info_BinaryPrefixComparator_Comparator_2eproto.base,
  &scc_info_BitComparator_Comparator_2eproto.base,
  &scc_info_ByteArrayComparable_Comparator_2eproto.base,
  &scc_info_Comparator_Comparator_2eproto.base,
  &scc_info_LongComparator_Comparator_2eproto.base,
  &scc_info_NullComparator_Comparator_2eproto.base,
  &scc_info_RegexStringComparator_Comparator_2eproto.base,
  &scc_info_SubstringComparator_Comparator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Comparator_2eproto_once;
static bool descriptor_table_Comparator_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Comparator_2eproto = {
  &descriptor_table_Comparator_2eproto_initialized, descriptor_table_protodef_Comparator_2eproto, "Comparator.proto", 807,
  &descriptor_table_Comparator_2eproto_once, descriptor_table_Comparator_2eproto_sccs, descriptor_table_Comparator_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_Comparator_2eproto::offsets,
  file_level_metadata_Comparator_2eproto, 10, file_level_enum_descriptors_Comparator_2eproto, file_level_service_descriptors_Comparator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Comparator_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Comparator_2eproto), true);
namespace hbase {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BitComparator_BitwiseOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Comparator_2eproto);
  return file_level_enum_descriptors_Comparator_2eproto[0];
}
bool BitComparator_BitwiseOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BitComparator_BitwiseOp BitComparator::AND;
constexpr BitComparator_BitwiseOp BitComparator::OR;
constexpr BitComparator_BitwiseOp BitComparator::XOR;
constexpr BitComparator_BitwiseOp BitComparator::BitwiseOp_MIN;
constexpr BitComparator_BitwiseOp BitComparator::BitwiseOp_MAX;
constexpr int BitComparator::BitwiseOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Comparator::InitAsDefaultInstance() {
}
class Comparator::_Internal {
 public:
  using HasBits = decltype(std::declval<Comparator>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialized_comparator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Comparator::Comparator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Comparator)
}
Comparator::Comparator(const Comparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  serialized_comparator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_comparator()) {
    serialized_comparator_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_comparator_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Comparator)
}

void Comparator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Comparator_Comparator_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_comparator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Comparator::~Comparator() {
  // @@protoc_insertion_point(destructor:hbase.pb.Comparator)
  SharedDtor();
}

void Comparator::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_comparator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Comparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Comparator& Comparator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Comparator_Comparator_2eproto.base);
  return *internal_default_instance();
}


void Comparator::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Comparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_comparator_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Comparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "hbase.pb.Comparator.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes serialized_comparator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serialized_comparator(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Comparator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Comparator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.Comparator.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes serialized_comparator = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_comparator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Comparator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Comparator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Comparator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Comparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.Comparator.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes serialized_comparator = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->serialized_comparator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Comparator)
}

::PROTOBUF_NAMESPACE_ID::uint8* Comparator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Comparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.Comparator.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes serialized_comparator = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_comparator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Comparator)
  return target;
}

size_t Comparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Comparator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes serialized_comparator = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->serialized_comparator());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Comparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Comparator)
  GOOGLE_DCHECK_NE(&from, this);
  const Comparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Comparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Comparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Comparator)
    MergeFrom(*source);
  }
}

void Comparator::MergeFrom(const Comparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Comparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_comparator_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_comparator_);
    }
  }
}

void Comparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Comparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Comparator::CopyFrom(const Comparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Comparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Comparator::InternalSwap(Comparator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_comparator_.Swap(&other->serialized_comparator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Comparator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ByteArrayComparable::InitAsDefaultInstance() {
}
class ByteArrayComparable::_Internal {
 public:
  using HasBits = decltype(std::declval<ByteArrayComparable>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ByteArrayComparable::ByteArrayComparable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ByteArrayComparable)
}
ByteArrayComparable::ByteArrayComparable(const ByteArrayComparable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ByteArrayComparable)
}

void ByteArrayComparable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ByteArrayComparable_Comparator_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ByteArrayComparable::~ByteArrayComparable() {
  // @@protoc_insertion_point(destructor:hbase.pb.ByteArrayComparable)
  SharedDtor();
}

void ByteArrayComparable::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ByteArrayComparable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ByteArrayComparable& ByteArrayComparable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ByteArrayComparable_Comparator_2eproto.base);
  return *internal_default_instance();
}


void ByteArrayComparable::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ByteArrayComparable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ByteArrayComparable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ByteArrayComparable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ByteArrayComparable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ByteArrayComparable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ByteArrayComparable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ByteArrayComparable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ByteArrayComparable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ByteArrayComparable)
}

::PROTOBUF_NAMESPACE_ID::uint8* ByteArrayComparable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ByteArrayComparable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ByteArrayComparable)
  return target;
}

size_t ByteArrayComparable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ByteArrayComparable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ByteArrayComparable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ByteArrayComparable)
  GOOGLE_DCHECK_NE(&from, this);
  const ByteArrayComparable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ByteArrayComparable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ByteArrayComparable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ByteArrayComparable)
    MergeFrom(*source);
  }
}

void ByteArrayComparable::MergeFrom(const ByteArrayComparable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ByteArrayComparable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _has_bits_[0] |= 0x00000001u;
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void ByteArrayComparable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ByteArrayComparable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ByteArrayComparable::CopyFrom(const ByteArrayComparable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ByteArrayComparable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ByteArrayComparable::IsInitialized() const {
  return true;
}

void ByteArrayComparable::InternalSwap(ByteArrayComparable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ByteArrayComparable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinaryComparator::InitAsDefaultInstance() {
  ::hbase::pb::_BinaryComparator_default_instance_._instance.get_mutable()->comparable_ = const_cast< ::hbase::pb::ByteArrayComparable*>(
      ::hbase::pb::ByteArrayComparable::internal_default_instance());
}
class BinaryComparator::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryComparator>()._has_bits_);
  static const ::hbase::pb::ByteArrayComparable& comparable(const BinaryComparator* msg);
  static void set_has_comparable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::ByteArrayComparable&
BinaryComparator::_Internal::comparable(const BinaryComparator* msg) {
  return *msg->comparable_;
}
BinaryComparator::BinaryComparator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.BinaryComparator)
}
BinaryComparator::BinaryComparator(const BinaryComparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparable()) {
    comparable_ = new ::hbase::pb::ByteArrayComparable(*from.comparable_);
  } else {
    comparable_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.BinaryComparator)
}

void BinaryComparator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryComparator_Comparator_2eproto.base);
  comparable_ = nullptr;
}

BinaryComparator::~BinaryComparator() {
  // @@protoc_insertion_point(destructor:hbase.pb.BinaryComparator)
  SharedDtor();
}

void BinaryComparator::SharedDtor() {
  if (this != internal_default_instance()) delete comparable_;
}

void BinaryComparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryComparator& BinaryComparator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryComparator_Comparator_2eproto.base);
  return *internal_default_instance();
}


void BinaryComparator::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.BinaryComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(comparable_ != nullptr);
    comparable_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryComparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_comparable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryComparator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.BinaryComparator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_comparable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.BinaryComparator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.BinaryComparator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryComparator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.BinaryComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::comparable(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.BinaryComparator)
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryComparator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.BinaryComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::comparable(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.BinaryComparator)
  return target;
}

size_t BinaryComparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.BinaryComparator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparable_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryComparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.BinaryComparator)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryComparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryComparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.BinaryComparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.BinaryComparator)
    MergeFrom(*source);
  }
}

void BinaryComparator::MergeFrom(const BinaryComparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.BinaryComparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparable()) {
    mutable_comparable()->::hbase::pb::ByteArrayComparable::MergeFrom(from.comparable());
  }
}

void BinaryComparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.BinaryComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryComparator::CopyFrom(const BinaryComparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.BinaryComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BinaryComparator::InternalSwap(BinaryComparator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(comparable_, other->comparable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryComparator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LongComparator::InitAsDefaultInstance() {
  ::hbase::pb::_LongComparator_default_instance_._instance.get_mutable()->comparable_ = const_cast< ::hbase::pb::ByteArrayComparable*>(
      ::hbase::pb::ByteArrayComparable::internal_default_instance());
}
class LongComparator::_Internal {
 public:
  using HasBits = decltype(std::declval<LongComparator>()._has_bits_);
  static const ::hbase::pb::ByteArrayComparable& comparable(const LongComparator* msg);
  static void set_has_comparable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::ByteArrayComparable&
LongComparator::_Internal::comparable(const LongComparator* msg) {
  return *msg->comparable_;
}
LongComparator::LongComparator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.LongComparator)
}
LongComparator::LongComparator(const LongComparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparable()) {
    comparable_ = new ::hbase::pb::ByteArrayComparable(*from.comparable_);
  } else {
    comparable_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.LongComparator)
}

void LongComparator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LongComparator_Comparator_2eproto.base);
  comparable_ = nullptr;
}

LongComparator::~LongComparator() {
  // @@protoc_insertion_point(destructor:hbase.pb.LongComparator)
  SharedDtor();
}

void LongComparator::SharedDtor() {
  if (this != internal_default_instance()) delete comparable_;
}

void LongComparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongComparator& LongComparator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongComparator_Comparator_2eproto.base);
  return *internal_default_instance();
}


void LongComparator::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.LongComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(comparable_ != nullptr);
    comparable_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LongComparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_comparable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LongComparator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.LongComparator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_comparable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.LongComparator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.LongComparator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LongComparator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.LongComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::comparable(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.LongComparator)
}

::PROTOBUF_NAMESPACE_ID::uint8* LongComparator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.LongComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::comparable(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.LongComparator)
  return target;
}

size_t LongComparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.LongComparator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparable_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongComparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.LongComparator)
  GOOGLE_DCHECK_NE(&from, this);
  const LongComparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongComparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.LongComparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.LongComparator)
    MergeFrom(*source);
  }
}

void LongComparator::MergeFrom(const LongComparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.LongComparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparable()) {
    mutable_comparable()->::hbase::pb::ByteArrayComparable::MergeFrom(from.comparable());
  }
}

void LongComparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.LongComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongComparator::CopyFrom(const LongComparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.LongComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LongComparator::InternalSwap(LongComparator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(comparable_, other->comparable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongComparator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinaryPrefixComparator::InitAsDefaultInstance() {
  ::hbase::pb::_BinaryPrefixComparator_default_instance_._instance.get_mutable()->comparable_ = const_cast< ::hbase::pb::ByteArrayComparable*>(
      ::hbase::pb::ByteArrayComparable::internal_default_instance());
}
class BinaryPrefixComparator::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryPrefixComparator>()._has_bits_);
  static const ::hbase::pb::ByteArrayComparable& comparable(const BinaryPrefixComparator* msg);
  static void set_has_comparable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::ByteArrayComparable&
BinaryPrefixComparator::_Internal::comparable(const BinaryPrefixComparator* msg) {
  return *msg->comparable_;
}
BinaryPrefixComparator::BinaryPrefixComparator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.BinaryPrefixComparator)
}
BinaryPrefixComparator::BinaryPrefixComparator(const BinaryPrefixComparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparable()) {
    comparable_ = new ::hbase::pb::ByteArrayComparable(*from.comparable_);
  } else {
    comparable_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.BinaryPrefixComparator)
}

void BinaryPrefixComparator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryPrefixComparator_Comparator_2eproto.base);
  comparable_ = nullptr;
}

BinaryPrefixComparator::~BinaryPrefixComparator() {
  // @@protoc_insertion_point(destructor:hbase.pb.BinaryPrefixComparator)
  SharedDtor();
}

void BinaryPrefixComparator::SharedDtor() {
  if (this != internal_default_instance()) delete comparable_;
}

void BinaryPrefixComparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryPrefixComparator& BinaryPrefixComparator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryPrefixComparator_Comparator_2eproto.base);
  return *internal_default_instance();
}


void BinaryPrefixComparator::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.BinaryPrefixComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(comparable_ != nullptr);
    comparable_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryPrefixComparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_comparable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryPrefixComparator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.BinaryPrefixComparator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_comparable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.BinaryPrefixComparator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.BinaryPrefixComparator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryPrefixComparator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.BinaryPrefixComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::comparable(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.BinaryPrefixComparator)
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryPrefixComparator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.BinaryPrefixComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::comparable(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.BinaryPrefixComparator)
  return target;
}

size_t BinaryPrefixComparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.BinaryPrefixComparator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparable_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryPrefixComparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.BinaryPrefixComparator)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryPrefixComparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryPrefixComparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.BinaryPrefixComparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.BinaryPrefixComparator)
    MergeFrom(*source);
  }
}

void BinaryPrefixComparator::MergeFrom(const BinaryPrefixComparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.BinaryPrefixComparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparable()) {
    mutable_comparable()->::hbase::pb::ByteArrayComparable::MergeFrom(from.comparable());
  }
}

void BinaryPrefixComparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.BinaryPrefixComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryPrefixComparator::CopyFrom(const BinaryPrefixComparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.BinaryPrefixComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryPrefixComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BinaryPrefixComparator::InternalSwap(BinaryPrefixComparator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(comparable_, other->comparable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryPrefixComparator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BitComparator::InitAsDefaultInstance() {
  ::hbase::pb::_BitComparator_default_instance_._instance.get_mutable()->comparable_ = const_cast< ::hbase::pb::ByteArrayComparable*>(
      ::hbase::pb::ByteArrayComparable::internal_default_instance());
}
class BitComparator::_Internal {
 public:
  using HasBits = decltype(std::declval<BitComparator>()._has_bits_);
  static const ::hbase::pb::ByteArrayComparable& comparable(const BitComparator* msg);
  static void set_has_comparable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bitwise_op(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::ByteArrayComparable&
BitComparator::_Internal::comparable(const BitComparator* msg) {
  return *msg->comparable_;
}
BitComparator::BitComparator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.BitComparator)
}
BitComparator::BitComparator(const BitComparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparable()) {
    comparable_ = new ::hbase::pb::ByteArrayComparable(*from.comparable_);
  } else {
    comparable_ = nullptr;
  }
  bitwise_op_ = from.bitwise_op_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.BitComparator)
}

void BitComparator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BitComparator_Comparator_2eproto.base);
  comparable_ = nullptr;
  bitwise_op_ = 1;
}

BitComparator::~BitComparator() {
  // @@protoc_insertion_point(destructor:hbase.pb.BitComparator)
  SharedDtor();
}

void BitComparator::SharedDtor() {
  if (this != internal_default_instance()) delete comparable_;
}

void BitComparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitComparator& BitComparator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitComparator_Comparator_2eproto.base);
  return *internal_default_instance();
}


void BitComparator::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.BitComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(comparable_ != nullptr);
      comparable_->Clear();
    }
    bitwise_op_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BitComparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_comparable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::BitComparator_BitwiseOp_IsValid(val))) {
            set_bitwise_op(static_cast<::hbase::pb::BitComparator_BitwiseOp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BitComparator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.BitComparator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_comparable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::BitComparator_BitwiseOp_IsValid(value)) {
            set_bitwise_op(static_cast< ::hbase::pb::BitComparator_BitwiseOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.BitComparator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.BitComparator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BitComparator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.BitComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::comparable(this), output);
  }

  // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->bitwise_op(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.BitComparator)
}

::PROTOBUF_NAMESPACE_ID::uint8* BitComparator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.BitComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::comparable(this), target);
  }

  // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->bitwise_op(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.BitComparator)
  return target;
}

size_t BitComparator::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.BitComparator)
  size_t total_size = 0;

  if (has_comparable()) {
    // required .hbase.pb.ByteArrayComparable comparable = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparable_);
  }

  if (has_bitwise_op()) {
    // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->bitwise_op());
  }

  return total_size;
}
size_t BitComparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.BitComparator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .hbase.pb.ByteArrayComparable comparable = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparable_);

    // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->bitwise_op());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitComparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.BitComparator)
  GOOGLE_DCHECK_NE(&from, this);
  const BitComparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BitComparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.BitComparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.BitComparator)
    MergeFrom(*source);
  }
}

void BitComparator::MergeFrom(const BitComparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.BitComparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_comparable()->::hbase::pb::ByteArrayComparable::MergeFrom(from.comparable());
    }
    if (cached_has_bits & 0x00000002u) {
      bitwise_op_ = from.bitwise_op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BitComparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.BitComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitComparator::CopyFrom(const BitComparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.BitComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BitComparator::InternalSwap(BitComparator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(comparable_, other->comparable_);
  swap(bitwise_op_, other->bitwise_op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BitComparator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NullComparator::InitAsDefaultInstance() {
}
class NullComparator::_Internal {
 public:
  using HasBits = decltype(std::declval<NullComparator>()._has_bits_);
};

NullComparator::NullComparator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.NullComparator)
}
NullComparator::NullComparator(const NullComparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.NullComparator)
}

void NullComparator::SharedCtor() {
}

NullComparator::~NullComparator() {
  // @@protoc_insertion_point(destructor:hbase.pb.NullComparator)
  SharedDtor();
}

void NullComparator::SharedDtor() {
}

void NullComparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NullComparator& NullComparator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NullComparator_Comparator_2eproto.base);
  return *internal_default_instance();
}


void NullComparator::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.NullComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NullComparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NullComparator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.NullComparator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.NullComparator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.NullComparator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NullComparator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.NullComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.NullComparator)
}

::PROTOBUF_NAMESPACE_ID::uint8* NullComparator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.NullComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.NullComparator)
  return target;
}

size_t NullComparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.NullComparator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NullComparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.NullComparator)
  GOOGLE_DCHECK_NE(&from, this);
  const NullComparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NullComparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.NullComparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.NullComparator)
    MergeFrom(*source);
  }
}

void NullComparator::MergeFrom(const NullComparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.NullComparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NullComparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.NullComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullComparator::CopyFrom(const NullComparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.NullComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullComparator::IsInitialized() const {
  return true;
}

void NullComparator::InternalSwap(NullComparator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NullComparator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegexStringComparator::InitAsDefaultInstance() {
}
class RegexStringComparator::_Internal {
 public:
  using HasBits = decltype(std::declval<RegexStringComparator>()._has_bits_);
  static void set_has_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pattern_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_charset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RegexStringComparator::RegexStringComparator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RegexStringComparator)
}
RegexStringComparator::RegexStringComparator(const RegexStringComparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_pattern()) {
    pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  charset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_charset()) {
    charset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charset_);
  }
  engine_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_engine()) {
    engine_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.engine_);
  }
  pattern_flags_ = from.pattern_flags_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RegexStringComparator)
}

void RegexStringComparator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegexStringComparator_Comparator_2eproto.base);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  charset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  engine_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pattern_flags_ = 0;
}

RegexStringComparator::~RegexStringComparator() {
  // @@protoc_insertion_point(destructor:hbase.pb.RegexStringComparator)
  SharedDtor();
}

void RegexStringComparator::SharedDtor() {
  pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  charset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  engine_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegexStringComparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegexStringComparator& RegexStringComparator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegexStringComparator_Comparator_2eproto.base);
  return *internal_default_instance();
}


void RegexStringComparator::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RegexStringComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pattern_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      charset_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      engine_.ClearNonDefaultToEmptyNoArena();
    }
  }
  pattern_flags_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegexStringComparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_pattern(), ptr, ctx, "hbase.pb.RegexStringComparator.pattern");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 pattern_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pattern_flags(&has_bits);
          pattern_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string charset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_charset(), ptr, ctx, "hbase.pb.RegexStringComparator.charset");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string engine = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_engine(), ptr, ctx, "hbase.pb.RegexStringComparator.engine");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegexStringComparator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RegexStringComparator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pattern = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pattern().data(), static_cast<int>(this->pattern().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.RegexStringComparator.pattern");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pattern_flags = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_pattern_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pattern_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string charset = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), static_cast<int>(this->charset().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.RegexStringComparator.charset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string engine = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_engine()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->engine().data(), static_cast<int>(this->engine().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.RegexStringComparator.engine");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RegexStringComparator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RegexStringComparator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegexStringComparator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RegexStringComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.RegexStringComparator.pattern");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // required int32 pattern_flags = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->pattern_flags(), output);
  }

  // required string charset = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), static_cast<int>(this->charset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.RegexStringComparator.charset");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->charset(), output);
  }

  // optional string engine = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engine().data(), static_cast<int>(this->engine().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.RegexStringComparator.engine");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RegexStringComparator)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegexStringComparator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RegexStringComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.RegexStringComparator.pattern");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // required int32 pattern_flags = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->pattern_flags(), target);
  }

  // required string charset = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), static_cast<int>(this->charset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.RegexStringComparator.charset");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->charset(), target);
  }

  // optional string engine = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engine().data(), static_cast<int>(this->engine().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.RegexStringComparator.engine");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RegexStringComparator)
  return target;
}

size_t RegexStringComparator::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.RegexStringComparator)
  size_t total_size = 0;

  if (has_pattern()) {
    // required string pattern = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  if (has_charset()) {
    // required string charset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->charset());
  }

  if (has_pattern_flags()) {
    // required int32 pattern_flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pattern_flags());
  }

  return total_size;
}
size_t RegexStringComparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RegexStringComparator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string pattern = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->pattern());

    // required string charset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->charset());

    // required int32 pattern_flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pattern_flags());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string engine = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->engine());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegexStringComparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RegexStringComparator)
  GOOGLE_DCHECK_NE(&from, this);
  const RegexStringComparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegexStringComparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RegexStringComparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RegexStringComparator)
    MergeFrom(*source);
  }
}

void RegexStringComparator::MergeFrom(const RegexStringComparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RegexStringComparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pattern_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      charset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charset_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      engine_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.engine_);
    }
    if (cached_has_bits & 0x00000008u) {
      pattern_flags_ = from.pattern_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegexStringComparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RegexStringComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegexStringComparator::CopyFrom(const RegexStringComparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RegexStringComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegexStringComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void RegexStringComparator::InternalSwap(RegexStringComparator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pattern_.Swap(&other->pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  charset_.Swap(&other->charset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  engine_.Swap(&other->engine_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pattern_flags_, other->pattern_flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegexStringComparator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubstringComparator::InitAsDefaultInstance() {
}
class SubstringComparator::_Internal {
 public:
  using HasBits = decltype(std::declval<SubstringComparator>()._has_bits_);
  static void set_has_substr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SubstringComparator::SubstringComparator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SubstringComparator)
}
SubstringComparator::SubstringComparator(const SubstringComparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  substr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_substr()) {
    substr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.substr_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SubstringComparator)
}

void SubstringComparator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstringComparator_Comparator_2eproto.base);
  substr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubstringComparator::~SubstringComparator() {
  // @@protoc_insertion_point(destructor:hbase.pb.SubstringComparator)
  SharedDtor();
}

void SubstringComparator::SharedDtor() {
  substr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubstringComparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstringComparator& SubstringComparator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstringComparator_Comparator_2eproto.base);
  return *internal_default_instance();
}


void SubstringComparator::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SubstringComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    substr_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubstringComparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string substr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_substr(), ptr, ctx, "hbase.pb.SubstringComparator.substr");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubstringComparator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SubstringComparator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string substr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_substr()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->substr().data(), static_cast<int>(this->substr().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.SubstringComparator.substr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SubstringComparator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SubstringComparator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubstringComparator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SubstringComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string substr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->substr().data(), static_cast<int>(this->substr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SubstringComparator.substr");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->substr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SubstringComparator)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstringComparator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SubstringComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string substr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->substr().data(), static_cast<int>(this->substr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SubstringComparator.substr");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->substr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SubstringComparator)
  return target;
}

size_t SubstringComparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SubstringComparator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string substr = 1;
  if (has_substr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->substr());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstringComparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SubstringComparator)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstringComparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstringComparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SubstringComparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SubstringComparator)
    MergeFrom(*source);
  }
}

void SubstringComparator::MergeFrom(const SubstringComparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SubstringComparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_substr()) {
    _has_bits_[0] |= 0x00000001u;
    substr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.substr_);
  }
}

void SubstringComparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SubstringComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstringComparator::CopyFrom(const SubstringComparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SubstringComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstringComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubstringComparator::InternalSwap(SubstringComparator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  substr_.Swap(&other->substr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstringComparator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BigDecimalComparator::InitAsDefaultInstance() {
  ::hbase::pb::_BigDecimalComparator_default_instance_._instance.get_mutable()->comparable_ = const_cast< ::hbase::pb::ByteArrayComparable*>(
      ::hbase::pb::ByteArrayComparable::internal_default_instance());
}
class BigDecimalComparator::_Internal {
 public:
  using HasBits = decltype(std::declval<BigDecimalComparator>()._has_bits_);
  static const ::hbase::pb::ByteArrayComparable& comparable(const BigDecimalComparator* msg);
  static void set_has_comparable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::ByteArrayComparable&
BigDecimalComparator::_Internal::comparable(const BigDecimalComparator* msg) {
  return *msg->comparable_;
}
BigDecimalComparator::BigDecimalComparator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.BigDecimalComparator)
}
BigDecimalComparator::BigDecimalComparator(const BigDecimalComparator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparable()) {
    comparable_ = new ::hbase::pb::ByteArrayComparable(*from.comparable_);
  } else {
    comparable_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.BigDecimalComparator)
}

void BigDecimalComparator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BigDecimalComparator_Comparator_2eproto.base);
  comparable_ = nullptr;
}

BigDecimalComparator::~BigDecimalComparator() {
  // @@protoc_insertion_point(destructor:hbase.pb.BigDecimalComparator)
  SharedDtor();
}

void BigDecimalComparator::SharedDtor() {
  if (this != internal_default_instance()) delete comparable_;
}

void BigDecimalComparator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigDecimalComparator& BigDecimalComparator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigDecimalComparator_Comparator_2eproto.base);
  return *internal_default_instance();
}


void BigDecimalComparator::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.BigDecimalComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(comparable_ != nullptr);
    comparable_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BigDecimalComparator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_comparable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BigDecimalComparator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.BigDecimalComparator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ByteArrayComparable comparable = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_comparable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.BigDecimalComparator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.BigDecimalComparator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BigDecimalComparator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.BigDecimalComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::comparable(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.BigDecimalComparator)
}

::PROTOBUF_NAMESPACE_ID::uint8* BigDecimalComparator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.BigDecimalComparator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::comparable(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.BigDecimalComparator)
  return target;
}

size_t BigDecimalComparator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.BigDecimalComparator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  if (has_comparable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparable_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigDecimalComparator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.BigDecimalComparator)
  GOOGLE_DCHECK_NE(&from, this);
  const BigDecimalComparator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigDecimalComparator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.BigDecimalComparator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.BigDecimalComparator)
    MergeFrom(*source);
  }
}

void BigDecimalComparator::MergeFrom(const BigDecimalComparator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.BigDecimalComparator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparable()) {
    mutable_comparable()->::hbase::pb::ByteArrayComparable::MergeFrom(from.comparable());
  }
}

void BigDecimalComparator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.BigDecimalComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigDecimalComparator::CopyFrom(const BigDecimalComparator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.BigDecimalComparator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigDecimalComparator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BigDecimalComparator::InternalSwap(BigDecimalComparator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(comparable_, other->comparable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigDecimalComparator::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::Comparator* Arena::CreateMaybeMessage< ::hbase::pb::Comparator >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Comparator >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ByteArrayComparable* Arena::CreateMaybeMessage< ::hbase::pb::ByteArrayComparable >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ByteArrayComparable >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::BinaryComparator* Arena::CreateMaybeMessage< ::hbase::pb::BinaryComparator >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::BinaryComparator >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::LongComparator* Arena::CreateMaybeMessage< ::hbase::pb::LongComparator >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::LongComparator >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::BinaryPrefixComparator* Arena::CreateMaybeMessage< ::hbase::pb::BinaryPrefixComparator >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::BinaryPrefixComparator >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::BitComparator* Arena::CreateMaybeMessage< ::hbase::pb::BitComparator >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::BitComparator >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::NullComparator* Arena::CreateMaybeMessage< ::hbase::pb::NullComparator >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::NullComparator >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RegexStringComparator* Arena::CreateMaybeMessage< ::hbase::pb::RegexStringComparator >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RegexStringComparator >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SubstringComparator* Arena::CreateMaybeMessage< ::hbase::pb::SubstringComparator >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SubstringComparator >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::BigDecimalComparator* Arena::CreateMaybeMessage< ::hbase::pb::BigDecimalComparator >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::BigDecimalComparator >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
