// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Comparator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Comparator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Comparator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Comparator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Comparator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Comparator_2eproto;
namespace hbase {
namespace pb {
class BigDecimalComparator;
class BigDecimalComparatorDefaultTypeInternal;
extern BigDecimalComparatorDefaultTypeInternal _BigDecimalComparator_default_instance_;
class BinaryComparator;
class BinaryComparatorDefaultTypeInternal;
extern BinaryComparatorDefaultTypeInternal _BinaryComparator_default_instance_;
class BinaryPrefixComparator;
class BinaryPrefixComparatorDefaultTypeInternal;
extern BinaryPrefixComparatorDefaultTypeInternal _BinaryPrefixComparator_default_instance_;
class BitComparator;
class BitComparatorDefaultTypeInternal;
extern BitComparatorDefaultTypeInternal _BitComparator_default_instance_;
class ByteArrayComparable;
class ByteArrayComparableDefaultTypeInternal;
extern ByteArrayComparableDefaultTypeInternal _ByteArrayComparable_default_instance_;
class Comparator;
class ComparatorDefaultTypeInternal;
extern ComparatorDefaultTypeInternal _Comparator_default_instance_;
class LongComparator;
class LongComparatorDefaultTypeInternal;
extern LongComparatorDefaultTypeInternal _LongComparator_default_instance_;
class NullComparator;
class NullComparatorDefaultTypeInternal;
extern NullComparatorDefaultTypeInternal _NullComparator_default_instance_;
class RegexStringComparator;
class RegexStringComparatorDefaultTypeInternal;
extern RegexStringComparatorDefaultTypeInternal _RegexStringComparator_default_instance_;
class SubstringComparator;
class SubstringComparatorDefaultTypeInternal;
extern SubstringComparatorDefaultTypeInternal _SubstringComparator_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::BigDecimalComparator* Arena::CreateMaybeMessage<::hbase::pb::BigDecimalComparator>(Arena*);
template<> ::hbase::pb::BinaryComparator* Arena::CreateMaybeMessage<::hbase::pb::BinaryComparator>(Arena*);
template<> ::hbase::pb::BinaryPrefixComparator* Arena::CreateMaybeMessage<::hbase::pb::BinaryPrefixComparator>(Arena*);
template<> ::hbase::pb::BitComparator* Arena::CreateMaybeMessage<::hbase::pb::BitComparator>(Arena*);
template<> ::hbase::pb::ByteArrayComparable* Arena::CreateMaybeMessage<::hbase::pb::ByteArrayComparable>(Arena*);
template<> ::hbase::pb::Comparator* Arena::CreateMaybeMessage<::hbase::pb::Comparator>(Arena*);
template<> ::hbase::pb::LongComparator* Arena::CreateMaybeMessage<::hbase::pb::LongComparator>(Arena*);
template<> ::hbase::pb::NullComparator* Arena::CreateMaybeMessage<::hbase::pb::NullComparator>(Arena*);
template<> ::hbase::pb::RegexStringComparator* Arena::CreateMaybeMessage<::hbase::pb::RegexStringComparator>(Arena*);
template<> ::hbase::pb::SubstringComparator* Arena::CreateMaybeMessage<::hbase::pb::SubstringComparator>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

enum BitComparator_BitwiseOp : int {
  BitComparator_BitwiseOp_AND = 1,
  BitComparator_BitwiseOp_OR = 2,
  BitComparator_BitwiseOp_XOR = 3
};
bool BitComparator_BitwiseOp_IsValid(int value);
constexpr BitComparator_BitwiseOp BitComparator_BitwiseOp_BitwiseOp_MIN = BitComparator_BitwiseOp_AND;
constexpr BitComparator_BitwiseOp BitComparator_BitwiseOp_BitwiseOp_MAX = BitComparator_BitwiseOp_XOR;
constexpr int BitComparator_BitwiseOp_BitwiseOp_ARRAYSIZE = BitComparator_BitwiseOp_BitwiseOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BitComparator_BitwiseOp_descriptor();
template<typename T>
inline const std::string& BitComparator_BitwiseOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BitComparator_BitwiseOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BitComparator_BitwiseOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BitComparator_BitwiseOp_descriptor(), enum_t_value);
}
inline bool BitComparator_BitwiseOp_Parse(
    const std::string& name, BitComparator_BitwiseOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BitComparator_BitwiseOp>(
    BitComparator_BitwiseOp_descriptor(), name, value);
}
// ===================================================================

class Comparator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.Comparator) */ {
 public:
  Comparator();
  virtual ~Comparator();

  Comparator(const Comparator& from);
  Comparator(Comparator&& from) noexcept
    : Comparator() {
    *this = ::std::move(from);
  }

  inline Comparator& operator=(const Comparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Comparator& operator=(Comparator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Comparator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Comparator* internal_default_instance() {
    return reinterpret_cast<const Comparator*>(
               &_Comparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Comparator& a, Comparator& b) {
    a.Swap(&b);
  }
  inline void Swap(Comparator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Comparator* New() const final {
    return CreateMaybeMessage<Comparator>(nullptr);
  }

  Comparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Comparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Comparator& from);
  void MergeFrom(const Comparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Comparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.Comparator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSerializedComparatorFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional bytes serialized_comparator = 2;
  bool has_serialized_comparator() const;
  void clear_serialized_comparator();
  const std::string& serialized_comparator() const;
  void set_serialized_comparator(const std::string& value);
  void set_serialized_comparator(std::string&& value);
  void set_serialized_comparator(const char* value);
  void set_serialized_comparator(const void* value, size_t size);
  std::string* mutable_serialized_comparator();
  std::string* release_serialized_comparator();
  void set_allocated_serialized_comparator(std::string* serialized_comparator);

  // @@protoc_insertion_point(class_scope:hbase.pb.Comparator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_comparator_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// -------------------------------------------------------------------

class ByteArrayComparable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ByteArrayComparable) */ {
 public:
  ByteArrayComparable();
  virtual ~ByteArrayComparable();

  ByteArrayComparable(const ByteArrayComparable& from);
  ByteArrayComparable(ByteArrayComparable&& from) noexcept
    : ByteArrayComparable() {
    *this = ::std::move(from);
  }

  inline ByteArrayComparable& operator=(const ByteArrayComparable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ByteArrayComparable& operator=(ByteArrayComparable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ByteArrayComparable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ByteArrayComparable* internal_default_instance() {
    return reinterpret_cast<const ByteArrayComparable*>(
               &_ByteArrayComparable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ByteArrayComparable& a, ByteArrayComparable& b) {
    a.Swap(&b);
  }
  inline void Swap(ByteArrayComparable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ByteArrayComparable* New() const final {
    return CreateMaybeMessage<ByteArrayComparable>(nullptr);
  }

  ByteArrayComparable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ByteArrayComparable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ByteArrayComparable& from);
  void MergeFrom(const ByteArrayComparable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ByteArrayComparable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ByteArrayComparable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional bytes value = 1;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ByteArrayComparable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// -------------------------------------------------------------------

class BinaryComparator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.BinaryComparator) */ {
 public:
  BinaryComparator();
  virtual ~BinaryComparator();

  BinaryComparator(const BinaryComparator& from);
  BinaryComparator(BinaryComparator&& from) noexcept
    : BinaryComparator() {
    *this = ::std::move(from);
  }

  inline BinaryComparator& operator=(const BinaryComparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryComparator& operator=(BinaryComparator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinaryComparator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryComparator* internal_default_instance() {
    return reinterpret_cast<const BinaryComparator*>(
               &_BinaryComparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BinaryComparator& a, BinaryComparator& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryComparator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryComparator* New() const final {
    return CreateMaybeMessage<BinaryComparator>(nullptr);
  }

  BinaryComparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryComparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryComparator& from);
  void MergeFrom(const BinaryComparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryComparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.BinaryComparator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComparableFieldNumber = 1,
  };
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  bool has_comparable() const;
  void clear_comparable();
  const ::hbase::pb::ByteArrayComparable& comparable() const;
  ::hbase::pb::ByteArrayComparable* release_comparable();
  ::hbase::pb::ByteArrayComparable* mutable_comparable();
  void set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable);

  // @@protoc_insertion_point(class_scope:hbase.pb.BinaryComparator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::ByteArrayComparable* comparable_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// -------------------------------------------------------------------

class LongComparator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.LongComparator) */ {
 public:
  LongComparator();
  virtual ~LongComparator();

  LongComparator(const LongComparator& from);
  LongComparator(LongComparator&& from) noexcept
    : LongComparator() {
    *this = ::std::move(from);
  }

  inline LongComparator& operator=(const LongComparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongComparator& operator=(LongComparator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongComparator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongComparator* internal_default_instance() {
    return reinterpret_cast<const LongComparator*>(
               &_LongComparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LongComparator& a, LongComparator& b) {
    a.Swap(&b);
  }
  inline void Swap(LongComparator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongComparator* New() const final {
    return CreateMaybeMessage<LongComparator>(nullptr);
  }

  LongComparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongComparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongComparator& from);
  void MergeFrom(const LongComparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongComparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.LongComparator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComparableFieldNumber = 1,
  };
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  bool has_comparable() const;
  void clear_comparable();
  const ::hbase::pb::ByteArrayComparable& comparable() const;
  ::hbase::pb::ByteArrayComparable* release_comparable();
  ::hbase::pb::ByteArrayComparable* mutable_comparable();
  void set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable);

  // @@protoc_insertion_point(class_scope:hbase.pb.LongComparator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::ByteArrayComparable* comparable_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// -------------------------------------------------------------------

class BinaryPrefixComparator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.BinaryPrefixComparator) */ {
 public:
  BinaryPrefixComparator();
  virtual ~BinaryPrefixComparator();

  BinaryPrefixComparator(const BinaryPrefixComparator& from);
  BinaryPrefixComparator(BinaryPrefixComparator&& from) noexcept
    : BinaryPrefixComparator() {
    *this = ::std::move(from);
  }

  inline BinaryPrefixComparator& operator=(const BinaryPrefixComparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryPrefixComparator& operator=(BinaryPrefixComparator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BinaryPrefixComparator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryPrefixComparator* internal_default_instance() {
    return reinterpret_cast<const BinaryPrefixComparator*>(
               &_BinaryPrefixComparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BinaryPrefixComparator& a, BinaryPrefixComparator& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryPrefixComparator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryPrefixComparator* New() const final {
    return CreateMaybeMessage<BinaryPrefixComparator>(nullptr);
  }

  BinaryPrefixComparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryPrefixComparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BinaryPrefixComparator& from);
  void MergeFrom(const BinaryPrefixComparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryPrefixComparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.BinaryPrefixComparator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComparableFieldNumber = 1,
  };
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  bool has_comparable() const;
  void clear_comparable();
  const ::hbase::pb::ByteArrayComparable& comparable() const;
  ::hbase::pb::ByteArrayComparable* release_comparable();
  ::hbase::pb::ByteArrayComparable* mutable_comparable();
  void set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable);

  // @@protoc_insertion_point(class_scope:hbase.pb.BinaryPrefixComparator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::ByteArrayComparable* comparable_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// -------------------------------------------------------------------

class BitComparator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.BitComparator) */ {
 public:
  BitComparator();
  virtual ~BitComparator();

  BitComparator(const BitComparator& from);
  BitComparator(BitComparator&& from) noexcept
    : BitComparator() {
    *this = ::std::move(from);
  }

  inline BitComparator& operator=(const BitComparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitComparator& operator=(BitComparator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BitComparator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitComparator* internal_default_instance() {
    return reinterpret_cast<const BitComparator*>(
               &_BitComparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BitComparator& a, BitComparator& b) {
    a.Swap(&b);
  }
  inline void Swap(BitComparator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitComparator* New() const final {
    return CreateMaybeMessage<BitComparator>(nullptr);
  }

  BitComparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitComparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BitComparator& from);
  void MergeFrom(const BitComparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitComparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.BitComparator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BitComparator_BitwiseOp BitwiseOp;
  static constexpr BitwiseOp AND =
    BitComparator_BitwiseOp_AND;
  static constexpr BitwiseOp OR =
    BitComparator_BitwiseOp_OR;
  static constexpr BitwiseOp XOR =
    BitComparator_BitwiseOp_XOR;
  static inline bool BitwiseOp_IsValid(int value) {
    return BitComparator_BitwiseOp_IsValid(value);
  }
  static constexpr BitwiseOp BitwiseOp_MIN =
    BitComparator_BitwiseOp_BitwiseOp_MIN;
  static constexpr BitwiseOp BitwiseOp_MAX =
    BitComparator_BitwiseOp_BitwiseOp_MAX;
  static constexpr int BitwiseOp_ARRAYSIZE =
    BitComparator_BitwiseOp_BitwiseOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BitwiseOp_descriptor() {
    return BitComparator_BitwiseOp_descriptor();
  }
  template<typename T>
  static inline const std::string& BitwiseOp_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BitwiseOp>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BitwiseOp_Name.");
    return BitComparator_BitwiseOp_Name(enum_t_value);
  }
  static inline bool BitwiseOp_Parse(const std::string& name,
      BitwiseOp* value) {
    return BitComparator_BitwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComparableFieldNumber = 1,
    kBitwiseOpFieldNumber = 2,
  };
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  bool has_comparable() const;
  void clear_comparable();
  const ::hbase::pb::ByteArrayComparable& comparable() const;
  ::hbase::pb::ByteArrayComparable* release_comparable();
  ::hbase::pb::ByteArrayComparable* mutable_comparable();
  void set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable);

  // required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
  bool has_bitwise_op() const;
  void clear_bitwise_op();
  ::hbase::pb::BitComparator_BitwiseOp bitwise_op() const;
  void set_bitwise_op(::hbase::pb::BitComparator_BitwiseOp value);

  // @@protoc_insertion_point(class_scope:hbase.pb.BitComparator)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::ByteArrayComparable* comparable_;
  int bitwise_op_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// -------------------------------------------------------------------

class NullComparator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.NullComparator) */ {
 public:
  NullComparator();
  virtual ~NullComparator();

  NullComparator(const NullComparator& from);
  NullComparator(NullComparator&& from) noexcept
    : NullComparator() {
    *this = ::std::move(from);
  }

  inline NullComparator& operator=(const NullComparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullComparator& operator=(NullComparator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NullComparator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NullComparator* internal_default_instance() {
    return reinterpret_cast<const NullComparator*>(
               &_NullComparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NullComparator& a, NullComparator& b) {
    a.Swap(&b);
  }
  inline void Swap(NullComparator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NullComparator* New() const final {
    return CreateMaybeMessage<NullComparator>(nullptr);
  }

  NullComparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NullComparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NullComparator& from);
  void MergeFrom(const NullComparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullComparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.NullComparator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hbase.pb.NullComparator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// -------------------------------------------------------------------

class RegexStringComparator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.RegexStringComparator) */ {
 public:
  RegexStringComparator();
  virtual ~RegexStringComparator();

  RegexStringComparator(const RegexStringComparator& from);
  RegexStringComparator(RegexStringComparator&& from) noexcept
    : RegexStringComparator() {
    *this = ::std::move(from);
  }

  inline RegexStringComparator& operator=(const RegexStringComparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegexStringComparator& operator=(RegexStringComparator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegexStringComparator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegexStringComparator* internal_default_instance() {
    return reinterpret_cast<const RegexStringComparator*>(
               &_RegexStringComparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RegexStringComparator& a, RegexStringComparator& b) {
    a.Swap(&b);
  }
  inline void Swap(RegexStringComparator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegexStringComparator* New() const final {
    return CreateMaybeMessage<RegexStringComparator>(nullptr);
  }

  RegexStringComparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegexStringComparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegexStringComparator& from);
  void MergeFrom(const RegexStringComparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegexStringComparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.RegexStringComparator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 1,
    kCharsetFieldNumber = 3,
    kEngineFieldNumber = 4,
    kPatternFlagsFieldNumber = 2,
  };
  // required string pattern = 1;
  bool has_pattern() const;
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);

  // required string charset = 3;
  bool has_charset() const;
  void clear_charset();
  const std::string& charset() const;
  void set_charset(const std::string& value);
  void set_charset(std::string&& value);
  void set_charset(const char* value);
  void set_charset(const char* value, size_t size);
  std::string* mutable_charset();
  std::string* release_charset();
  void set_allocated_charset(std::string* charset);

  // optional string engine = 4;
  bool has_engine() const;
  void clear_engine();
  const std::string& engine() const;
  void set_engine(const std::string& value);
  void set_engine(std::string&& value);
  void set_engine(const char* value);
  void set_engine(const char* value, size_t size);
  std::string* mutable_engine();
  std::string* release_engine();
  void set_allocated_engine(std::string* engine);

  // required int32 pattern_flags = 2;
  bool has_pattern_flags() const;
  void clear_pattern_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 pattern_flags() const;
  void set_pattern_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.RegexStringComparator)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engine_;
  ::PROTOBUF_NAMESPACE_ID::int32 pattern_flags_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// -------------------------------------------------------------------

class SubstringComparator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.SubstringComparator) */ {
 public:
  SubstringComparator();
  virtual ~SubstringComparator();

  SubstringComparator(const SubstringComparator& from);
  SubstringComparator(SubstringComparator&& from) noexcept
    : SubstringComparator() {
    *this = ::std::move(from);
  }

  inline SubstringComparator& operator=(const SubstringComparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstringComparator& operator=(SubstringComparator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstringComparator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubstringComparator* internal_default_instance() {
    return reinterpret_cast<const SubstringComparator*>(
               &_SubstringComparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubstringComparator& a, SubstringComparator& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstringComparator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstringComparator* New() const final {
    return CreateMaybeMessage<SubstringComparator>(nullptr);
  }

  SubstringComparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstringComparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstringComparator& from);
  void MergeFrom(const SubstringComparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstringComparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.SubstringComparator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstrFieldNumber = 1,
  };
  // required string substr = 1;
  bool has_substr() const;
  void clear_substr();
  const std::string& substr() const;
  void set_substr(const std::string& value);
  void set_substr(std::string&& value);
  void set_substr(const char* value);
  void set_substr(const char* value, size_t size);
  std::string* mutable_substr();
  std::string* release_substr();
  void set_allocated_substr(std::string* substr);

  // @@protoc_insertion_point(class_scope:hbase.pb.SubstringComparator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr substr_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// -------------------------------------------------------------------

class BigDecimalComparator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.BigDecimalComparator) */ {
 public:
  BigDecimalComparator();
  virtual ~BigDecimalComparator();

  BigDecimalComparator(const BigDecimalComparator& from);
  BigDecimalComparator(BigDecimalComparator&& from) noexcept
    : BigDecimalComparator() {
    *this = ::std::move(from);
  }

  inline BigDecimalComparator& operator=(const BigDecimalComparator& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigDecimalComparator& operator=(BigDecimalComparator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BigDecimalComparator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigDecimalComparator* internal_default_instance() {
    return reinterpret_cast<const BigDecimalComparator*>(
               &_BigDecimalComparator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BigDecimalComparator& a, BigDecimalComparator& b) {
    a.Swap(&b);
  }
  inline void Swap(BigDecimalComparator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BigDecimalComparator* New() const final {
    return CreateMaybeMessage<BigDecimalComparator>(nullptr);
  }

  BigDecimalComparator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BigDecimalComparator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BigDecimalComparator& from);
  void MergeFrom(const BigDecimalComparator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigDecimalComparator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.BigDecimalComparator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Comparator_2eproto);
    return ::descriptor_table_Comparator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComparableFieldNumber = 1,
  };
  // required .hbase.pb.ByteArrayComparable comparable = 1;
  bool has_comparable() const;
  void clear_comparable();
  const ::hbase::pb::ByteArrayComparable& comparable() const;
  ::hbase::pb::ByteArrayComparable* release_comparable();
  ::hbase::pb::ByteArrayComparable* mutable_comparable();
  void set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable);

  // @@protoc_insertion_point(class_scope:hbase.pb.BigDecimalComparator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::ByteArrayComparable* comparable_;
  friend struct ::TableStruct_Comparator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Comparator

// required string name = 1;
inline bool Comparator::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Comparator::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Comparator::name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Comparator.name)
  return name_.GetNoArena();
}
inline void Comparator::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Comparator.name)
}
inline void Comparator::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Comparator.name)
}
inline void Comparator::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Comparator.name)
}
inline void Comparator::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Comparator.name)
}
inline std::string* Comparator::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Comparator.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Comparator::release_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.Comparator.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Comparator::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Comparator.name)
}

// optional bytes serialized_comparator = 2;
inline bool Comparator::has_serialized_comparator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Comparator::clear_serialized_comparator() {
  serialized_comparator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Comparator::serialized_comparator() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Comparator.serialized_comparator)
  return serialized_comparator_.GetNoArena();
}
inline void Comparator::set_serialized_comparator(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_comparator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Comparator.serialized_comparator)
}
inline void Comparator::set_serialized_comparator(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_comparator_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Comparator.serialized_comparator)
}
inline void Comparator::set_serialized_comparator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  serialized_comparator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Comparator.serialized_comparator)
}
inline void Comparator::set_serialized_comparator(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  serialized_comparator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Comparator.serialized_comparator)
}
inline std::string* Comparator::mutable_serialized_comparator() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Comparator.serialized_comparator)
  return serialized_comparator_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Comparator::release_serialized_comparator() {
  // @@protoc_insertion_point(field_release:hbase.pb.Comparator.serialized_comparator)
  if (!has_serialized_comparator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return serialized_comparator_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Comparator::set_allocated_serialized_comparator(std::string* serialized_comparator) {
  if (serialized_comparator != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_comparator_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_comparator);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Comparator.serialized_comparator)
}

// -------------------------------------------------------------------

// ByteArrayComparable

// optional bytes value = 1;
inline bool ByteArrayComparable::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ByteArrayComparable::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ByteArrayComparable::value() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ByteArrayComparable.value)
  return value_.GetNoArena();
}
inline void ByteArrayComparable::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ByteArrayComparable.value)
}
inline void ByteArrayComparable::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ByteArrayComparable.value)
}
inline void ByteArrayComparable::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ByteArrayComparable.value)
}
inline void ByteArrayComparable::set_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ByteArrayComparable.value)
}
inline std::string* ByteArrayComparable::mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ByteArrayComparable.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ByteArrayComparable::release_value() {
  // @@protoc_insertion_point(field_release:hbase.pb.ByteArrayComparable.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ByteArrayComparable::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ByteArrayComparable.value)
}

// -------------------------------------------------------------------

// BinaryComparator

// required .hbase.pb.ByteArrayComparable comparable = 1;
inline bool BinaryComparator::has_comparable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinaryComparator::clear_comparable() {
  if (comparable_ != nullptr) comparable_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hbase::pb::ByteArrayComparable& BinaryComparator::comparable() const {
  const ::hbase::pb::ByteArrayComparable* p = comparable_;
  // @@protoc_insertion_point(field_get:hbase.pb.BinaryComparator.comparable)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::ByteArrayComparable*>(
      &::hbase::pb::_ByteArrayComparable_default_instance_);
}
inline ::hbase::pb::ByteArrayComparable* BinaryComparator::release_comparable() {
  // @@protoc_insertion_point(field_release:hbase.pb.BinaryComparator.comparable)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::ByteArrayComparable* temp = comparable_;
  comparable_ = nullptr;
  return temp;
}
inline ::hbase::pb::ByteArrayComparable* BinaryComparator::mutable_comparable() {
  _has_bits_[0] |= 0x00000001u;
  if (comparable_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::ByteArrayComparable>(GetArenaNoVirtual());
    comparable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.BinaryComparator.comparable)
  return comparable_;
}
inline void BinaryComparator::set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete comparable_;
  }
  if (comparable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      comparable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comparable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comparable_ = comparable;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.BinaryComparator.comparable)
}

// -------------------------------------------------------------------

// LongComparator

// required .hbase.pb.ByteArrayComparable comparable = 1;
inline bool LongComparator::has_comparable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LongComparator::clear_comparable() {
  if (comparable_ != nullptr) comparable_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hbase::pb::ByteArrayComparable& LongComparator::comparable() const {
  const ::hbase::pb::ByteArrayComparable* p = comparable_;
  // @@protoc_insertion_point(field_get:hbase.pb.LongComparator.comparable)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::ByteArrayComparable*>(
      &::hbase::pb::_ByteArrayComparable_default_instance_);
}
inline ::hbase::pb::ByteArrayComparable* LongComparator::release_comparable() {
  // @@protoc_insertion_point(field_release:hbase.pb.LongComparator.comparable)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::ByteArrayComparable* temp = comparable_;
  comparable_ = nullptr;
  return temp;
}
inline ::hbase::pb::ByteArrayComparable* LongComparator::mutable_comparable() {
  _has_bits_[0] |= 0x00000001u;
  if (comparable_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::ByteArrayComparable>(GetArenaNoVirtual());
    comparable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.LongComparator.comparable)
  return comparable_;
}
inline void LongComparator::set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete comparable_;
  }
  if (comparable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      comparable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comparable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comparable_ = comparable;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.LongComparator.comparable)
}

// -------------------------------------------------------------------

// BinaryPrefixComparator

// required .hbase.pb.ByteArrayComparable comparable = 1;
inline bool BinaryPrefixComparator::has_comparable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinaryPrefixComparator::clear_comparable() {
  if (comparable_ != nullptr) comparable_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hbase::pb::ByteArrayComparable& BinaryPrefixComparator::comparable() const {
  const ::hbase::pb::ByteArrayComparable* p = comparable_;
  // @@protoc_insertion_point(field_get:hbase.pb.BinaryPrefixComparator.comparable)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::ByteArrayComparable*>(
      &::hbase::pb::_ByteArrayComparable_default_instance_);
}
inline ::hbase::pb::ByteArrayComparable* BinaryPrefixComparator::release_comparable() {
  // @@protoc_insertion_point(field_release:hbase.pb.BinaryPrefixComparator.comparable)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::ByteArrayComparable* temp = comparable_;
  comparable_ = nullptr;
  return temp;
}
inline ::hbase::pb::ByteArrayComparable* BinaryPrefixComparator::mutable_comparable() {
  _has_bits_[0] |= 0x00000001u;
  if (comparable_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::ByteArrayComparable>(GetArenaNoVirtual());
    comparable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.BinaryPrefixComparator.comparable)
  return comparable_;
}
inline void BinaryPrefixComparator::set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete comparable_;
  }
  if (comparable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      comparable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comparable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comparable_ = comparable;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.BinaryPrefixComparator.comparable)
}

// -------------------------------------------------------------------

// BitComparator

// required .hbase.pb.ByteArrayComparable comparable = 1;
inline bool BitComparator::has_comparable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitComparator::clear_comparable() {
  if (comparable_ != nullptr) comparable_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hbase::pb::ByteArrayComparable& BitComparator::comparable() const {
  const ::hbase::pb::ByteArrayComparable* p = comparable_;
  // @@protoc_insertion_point(field_get:hbase.pb.BitComparator.comparable)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::ByteArrayComparable*>(
      &::hbase::pb::_ByteArrayComparable_default_instance_);
}
inline ::hbase::pb::ByteArrayComparable* BitComparator::release_comparable() {
  // @@protoc_insertion_point(field_release:hbase.pb.BitComparator.comparable)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::ByteArrayComparable* temp = comparable_;
  comparable_ = nullptr;
  return temp;
}
inline ::hbase::pb::ByteArrayComparable* BitComparator::mutable_comparable() {
  _has_bits_[0] |= 0x00000001u;
  if (comparable_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::ByteArrayComparable>(GetArenaNoVirtual());
    comparable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.BitComparator.comparable)
  return comparable_;
}
inline void BitComparator::set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete comparable_;
  }
  if (comparable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      comparable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comparable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comparable_ = comparable;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.BitComparator.comparable)
}

// required .hbase.pb.BitComparator.BitwiseOp bitwise_op = 2;
inline bool BitComparator::has_bitwise_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitComparator::clear_bitwise_op() {
  bitwise_op_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hbase::pb::BitComparator_BitwiseOp BitComparator::bitwise_op() const {
  // @@protoc_insertion_point(field_get:hbase.pb.BitComparator.bitwise_op)
  return static_cast< ::hbase::pb::BitComparator_BitwiseOp >(bitwise_op_);
}
inline void BitComparator::set_bitwise_op(::hbase::pb::BitComparator_BitwiseOp value) {
  assert(::hbase::pb::BitComparator_BitwiseOp_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  bitwise_op_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.BitComparator.bitwise_op)
}

// -------------------------------------------------------------------

// NullComparator

// -------------------------------------------------------------------

// RegexStringComparator

// required string pattern = 1;
inline bool RegexStringComparator::has_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegexStringComparator::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegexStringComparator::pattern() const {
  // @@protoc_insertion_point(field_get:hbase.pb.RegexStringComparator.pattern)
  return pattern_.GetNoArena();
}
inline void RegexStringComparator::set_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.RegexStringComparator.pattern)
}
inline void RegexStringComparator::set_pattern(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.RegexStringComparator.pattern)
}
inline void RegexStringComparator::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.RegexStringComparator.pattern)
}
inline void RegexStringComparator::set_pattern(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.RegexStringComparator.pattern)
}
inline std::string* RegexStringComparator::mutable_pattern() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.RegexStringComparator.pattern)
  return pattern_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegexStringComparator::release_pattern() {
  // @@protoc_insertion_point(field_release:hbase.pb.RegexStringComparator.pattern)
  if (!has_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pattern_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegexStringComparator::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pattern_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.RegexStringComparator.pattern)
}

// required int32 pattern_flags = 2;
inline bool RegexStringComparator::has_pattern_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegexStringComparator::clear_pattern_flags() {
  pattern_flags_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegexStringComparator::pattern_flags() const {
  // @@protoc_insertion_point(field_get:hbase.pb.RegexStringComparator.pattern_flags)
  return pattern_flags_;
}
inline void RegexStringComparator::set_pattern_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pattern_flags_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.RegexStringComparator.pattern_flags)
}

// required string charset = 3;
inline bool RegexStringComparator::has_charset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegexStringComparator::clear_charset() {
  charset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RegexStringComparator::charset() const {
  // @@protoc_insertion_point(field_get:hbase.pb.RegexStringComparator.charset)
  return charset_.GetNoArena();
}
inline void RegexStringComparator::set_charset(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  charset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.RegexStringComparator.charset)
}
inline void RegexStringComparator::set_charset(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  charset_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.RegexStringComparator.charset)
}
inline void RegexStringComparator::set_charset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  charset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.RegexStringComparator.charset)
}
inline void RegexStringComparator::set_charset(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  charset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.RegexStringComparator.charset)
}
inline std::string* RegexStringComparator::mutable_charset() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.RegexStringComparator.charset)
  return charset_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegexStringComparator::release_charset() {
  // @@protoc_insertion_point(field_release:hbase.pb.RegexStringComparator.charset)
  if (!has_charset()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return charset_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegexStringComparator::set_allocated_charset(std::string* charset) {
  if (charset != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  charset_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charset);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.RegexStringComparator.charset)
}

// optional string engine = 4;
inline bool RegexStringComparator::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegexStringComparator::clear_engine() {
  engine_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RegexStringComparator::engine() const {
  // @@protoc_insertion_point(field_get:hbase.pb.RegexStringComparator.engine)
  return engine_.GetNoArena();
}
inline void RegexStringComparator::set_engine(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  engine_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.RegexStringComparator.engine)
}
inline void RegexStringComparator::set_engine(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  engine_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.RegexStringComparator.engine)
}
inline void RegexStringComparator::set_engine(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  engine_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.RegexStringComparator.engine)
}
inline void RegexStringComparator::set_engine(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  engine_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.RegexStringComparator.engine)
}
inline std::string* RegexStringComparator::mutable_engine() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.RegexStringComparator.engine)
  return engine_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegexStringComparator::release_engine() {
  // @@protoc_insertion_point(field_release:hbase.pb.RegexStringComparator.engine)
  if (!has_engine()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return engine_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegexStringComparator::set_allocated_engine(std::string* engine) {
  if (engine != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  engine_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), engine);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.RegexStringComparator.engine)
}

// -------------------------------------------------------------------

// SubstringComparator

// required string substr = 1;
inline bool SubstringComparator::has_substr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubstringComparator::clear_substr() {
  substr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubstringComparator::substr() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SubstringComparator.substr)
  return substr_.GetNoArena();
}
inline void SubstringComparator::set_substr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  substr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.SubstringComparator.substr)
}
inline void SubstringComparator::set_substr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  substr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.SubstringComparator.substr)
}
inline void SubstringComparator::set_substr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  substr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.SubstringComparator.substr)
}
inline void SubstringComparator::set_substr(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  substr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.SubstringComparator.substr)
}
inline std::string* SubstringComparator::mutable_substr() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.SubstringComparator.substr)
  return substr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubstringComparator::release_substr() {
  // @@protoc_insertion_point(field_release:hbase.pb.SubstringComparator.substr)
  if (!has_substr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return substr_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubstringComparator::set_allocated_substr(std::string* substr) {
  if (substr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  substr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), substr);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SubstringComparator.substr)
}

// -------------------------------------------------------------------

// BigDecimalComparator

// required .hbase.pb.ByteArrayComparable comparable = 1;
inline bool BigDecimalComparator::has_comparable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BigDecimalComparator::clear_comparable() {
  if (comparable_ != nullptr) comparable_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hbase::pb::ByteArrayComparable& BigDecimalComparator::comparable() const {
  const ::hbase::pb::ByteArrayComparable* p = comparable_;
  // @@protoc_insertion_point(field_get:hbase.pb.BigDecimalComparator.comparable)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::ByteArrayComparable*>(
      &::hbase::pb::_ByteArrayComparable_default_instance_);
}
inline ::hbase::pb::ByteArrayComparable* BigDecimalComparator::release_comparable() {
  // @@protoc_insertion_point(field_release:hbase.pb.BigDecimalComparator.comparable)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::ByteArrayComparable* temp = comparable_;
  comparable_ = nullptr;
  return temp;
}
inline ::hbase::pb::ByteArrayComparable* BigDecimalComparator::mutable_comparable() {
  _has_bits_[0] |= 0x00000001u;
  if (comparable_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::ByteArrayComparable>(GetArenaNoVirtual());
    comparable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.BigDecimalComparator.comparable)
  return comparable_;
}
inline void BigDecimalComparator::set_allocated_comparable(::hbase::pb::ByteArrayComparable* comparable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete comparable_;
  }
  if (comparable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      comparable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comparable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comparable_ = comparable;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.BigDecimalComparator.comparable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hbase::pb::BitComparator_BitwiseOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::BitComparator_BitwiseOp>() {
  return ::hbase::pb::BitComparator_BitwiseOp_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Comparator_2eproto
