// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErrorHandling.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ErrorHandling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ErrorHandling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ErrorHandling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ErrorHandling_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ErrorHandling_2eproto;
namespace hbase {
namespace pb {
class ForeignExceptionMessage;
class ForeignExceptionMessageDefaultTypeInternal;
extern ForeignExceptionMessageDefaultTypeInternal _ForeignExceptionMessage_default_instance_;
class GenericExceptionMessage;
class GenericExceptionMessageDefaultTypeInternal;
extern GenericExceptionMessageDefaultTypeInternal _GenericExceptionMessage_default_instance_;
class StackTraceElementMessage;
class StackTraceElementMessageDefaultTypeInternal;
extern StackTraceElementMessageDefaultTypeInternal _StackTraceElementMessage_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::ForeignExceptionMessage* Arena::CreateMaybeMessage<::hbase::pb::ForeignExceptionMessage>(Arena*);
template<> ::hbase::pb::GenericExceptionMessage* Arena::CreateMaybeMessage<::hbase::pb::GenericExceptionMessage>(Arena*);
template<> ::hbase::pb::StackTraceElementMessage* Arena::CreateMaybeMessage<::hbase::pb::StackTraceElementMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

// ===================================================================

class StackTraceElementMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.StackTraceElementMessage) */ {
 public:
  StackTraceElementMessage();
  virtual ~StackTraceElementMessage();

  StackTraceElementMessage(const StackTraceElementMessage& from);
  StackTraceElementMessage(StackTraceElementMessage&& from) noexcept
    : StackTraceElementMessage() {
    *this = ::std::move(from);
  }

  inline StackTraceElementMessage& operator=(const StackTraceElementMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackTraceElementMessage& operator=(StackTraceElementMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StackTraceElementMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackTraceElementMessage* internal_default_instance() {
    return reinterpret_cast<const StackTraceElementMessage*>(
               &_StackTraceElementMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StackTraceElementMessage& a, StackTraceElementMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StackTraceElementMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StackTraceElementMessage* New() const final {
    return CreateMaybeMessage<StackTraceElementMessage>(nullptr);
  }

  StackTraceElementMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StackTraceElementMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StackTraceElementMessage& from);
  void MergeFrom(const StackTraceElementMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTraceElementMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.StackTraceElementMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ErrorHandling_2eproto);
    return ::descriptor_table_ErrorHandling_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeclaringClassFieldNumber = 1,
    kMethodNameFieldNumber = 2,
    kFileNameFieldNumber = 3,
    kLineNumberFieldNumber = 4,
  };
  // optional string declaring_class = 1;
  bool has_declaring_class() const;
  void clear_declaring_class();
  const std::string& declaring_class() const;
  void set_declaring_class(const std::string& value);
  void set_declaring_class(std::string&& value);
  void set_declaring_class(const char* value);
  void set_declaring_class(const char* value, size_t size);
  std::string* mutable_declaring_class();
  std::string* release_declaring_class();
  void set_allocated_declaring_class(std::string* declaring_class);

  // optional string method_name = 2;
  bool has_method_name() const;
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);

  // optional string file_name = 3;
  bool has_file_name() const;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // optional int32 line_number = 4;
  bool has_line_number() const;
  void clear_line_number();
  ::PROTOBUF_NAMESPACE_ID::int32 line_number() const;
  void set_line_number(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.StackTraceElementMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr declaring_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_number_;
  friend struct ::TableStruct_ErrorHandling_2eproto;
};
// -------------------------------------------------------------------

class GenericExceptionMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GenericExceptionMessage) */ {
 public:
  GenericExceptionMessage();
  virtual ~GenericExceptionMessage();

  GenericExceptionMessage(const GenericExceptionMessage& from);
  GenericExceptionMessage(GenericExceptionMessage&& from) noexcept
    : GenericExceptionMessage() {
    *this = ::std::move(from);
  }

  inline GenericExceptionMessage& operator=(const GenericExceptionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericExceptionMessage& operator=(GenericExceptionMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericExceptionMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericExceptionMessage* internal_default_instance() {
    return reinterpret_cast<const GenericExceptionMessage*>(
               &_GenericExceptionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenericExceptionMessage& a, GenericExceptionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericExceptionMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericExceptionMessage* New() const final {
    return CreateMaybeMessage<GenericExceptionMessage>(nullptr);
  }

  GenericExceptionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericExceptionMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericExceptionMessage& from);
  void MergeFrom(const GenericExceptionMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericExceptionMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GenericExceptionMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ErrorHandling_2eproto);
    return ::descriptor_table_ErrorHandling_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceFieldNumber = 4,
    kClassNameFieldNumber = 1,
    kMessageFieldNumber = 2,
    kErrorInfoFieldNumber = 3,
  };
  // repeated .hbase.pb.StackTraceElementMessage trace = 4;
  int trace_size() const;
  void clear_trace();
  ::hbase::pb::StackTraceElementMessage* mutable_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage >*
      mutable_trace();
  const ::hbase::pb::StackTraceElementMessage& trace(int index) const;
  ::hbase::pb::StackTraceElementMessage* add_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage >&
      trace() const;

  // optional string class_name = 1;
  bool has_class_name() const;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // optional bytes error_info = 3;
  bool has_error_info() const;
  void clear_error_info();
  const std::string& error_info() const;
  void set_error_info(const std::string& value);
  void set_error_info(std::string&& value);
  void set_error_info(const char* value);
  void set_error_info(const void* value, size_t size);
  std::string* mutable_error_info();
  std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);

  // @@protoc_insertion_point(class_scope:hbase.pb.GenericExceptionMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage > trace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
  friend struct ::TableStruct_ErrorHandling_2eproto;
};
// -------------------------------------------------------------------

class ForeignExceptionMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ForeignExceptionMessage) */ {
 public:
  ForeignExceptionMessage();
  virtual ~ForeignExceptionMessage();

  ForeignExceptionMessage(const ForeignExceptionMessage& from);
  ForeignExceptionMessage(ForeignExceptionMessage&& from) noexcept
    : ForeignExceptionMessage() {
    *this = ::std::move(from);
  }

  inline ForeignExceptionMessage& operator=(const ForeignExceptionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForeignExceptionMessage& operator=(ForeignExceptionMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForeignExceptionMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForeignExceptionMessage* internal_default_instance() {
    return reinterpret_cast<const ForeignExceptionMessage*>(
               &_ForeignExceptionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ForeignExceptionMessage& a, ForeignExceptionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ForeignExceptionMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForeignExceptionMessage* New() const final {
    return CreateMaybeMessage<ForeignExceptionMessage>(nullptr);
  }

  ForeignExceptionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForeignExceptionMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForeignExceptionMessage& from);
  void MergeFrom(const ForeignExceptionMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForeignExceptionMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ForeignExceptionMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ErrorHandling_2eproto);
    return ::descriptor_table_ErrorHandling_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kGenericExceptionFieldNumber = 2,
  };
  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);

  // optional .hbase.pb.GenericExceptionMessage generic_exception = 2;
  bool has_generic_exception() const;
  void clear_generic_exception();
  const ::hbase::pb::GenericExceptionMessage& generic_exception() const;
  ::hbase::pb::GenericExceptionMessage* release_generic_exception();
  ::hbase::pb::GenericExceptionMessage* mutable_generic_exception();
  void set_allocated_generic_exception(::hbase::pb::GenericExceptionMessage* generic_exception);

  // @@protoc_insertion_point(class_scope:hbase.pb.ForeignExceptionMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::hbase::pb::GenericExceptionMessage* generic_exception_;
  friend struct ::TableStruct_ErrorHandling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StackTraceElementMessage

// optional string declaring_class = 1;
inline bool StackTraceElementMessage::has_declaring_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StackTraceElementMessage::clear_declaring_class() {
  declaring_class_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StackTraceElementMessage::declaring_class() const {
  // @@protoc_insertion_point(field_get:hbase.pb.StackTraceElementMessage.declaring_class)
  return declaring_class_.GetNoArena();
}
inline void StackTraceElementMessage::set_declaring_class(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  declaring_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.StackTraceElementMessage.declaring_class)
}
inline void StackTraceElementMessage::set_declaring_class(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  declaring_class_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.StackTraceElementMessage.declaring_class)
}
inline void StackTraceElementMessage::set_declaring_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  declaring_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.StackTraceElementMessage.declaring_class)
}
inline void StackTraceElementMessage::set_declaring_class(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  declaring_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.StackTraceElementMessage.declaring_class)
}
inline std::string* StackTraceElementMessage::mutable_declaring_class() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.StackTraceElementMessage.declaring_class)
  return declaring_class_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StackTraceElementMessage::release_declaring_class() {
  // @@protoc_insertion_point(field_release:hbase.pb.StackTraceElementMessage.declaring_class)
  if (!has_declaring_class()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return declaring_class_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StackTraceElementMessage::set_allocated_declaring_class(std::string* declaring_class) {
  if (declaring_class != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  declaring_class_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), declaring_class);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.StackTraceElementMessage.declaring_class)
}

// optional string method_name = 2;
inline bool StackTraceElementMessage::has_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StackTraceElementMessage::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StackTraceElementMessage::method_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.StackTraceElementMessage.method_name)
  return method_name_.GetNoArena();
}
inline void StackTraceElementMessage::set_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.StackTraceElementMessage.method_name)
}
inline void StackTraceElementMessage::set_method_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.StackTraceElementMessage.method_name)
}
inline void StackTraceElementMessage::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.StackTraceElementMessage.method_name)
}
inline void StackTraceElementMessage::set_method_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.StackTraceElementMessage.method_name)
}
inline std::string* StackTraceElementMessage::mutable_method_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.StackTraceElementMessage.method_name)
  return method_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StackTraceElementMessage::release_method_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.StackTraceElementMessage.method_name)
  if (!has_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return method_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StackTraceElementMessage::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.StackTraceElementMessage.method_name)
}

// optional string file_name = 3;
inline bool StackTraceElementMessage::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StackTraceElementMessage::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StackTraceElementMessage::file_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.StackTraceElementMessage.file_name)
  return file_name_.GetNoArena();
}
inline void StackTraceElementMessage::set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.StackTraceElementMessage.file_name)
}
inline void StackTraceElementMessage::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.StackTraceElementMessage.file_name)
}
inline void StackTraceElementMessage::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.StackTraceElementMessage.file_name)
}
inline void StackTraceElementMessage::set_file_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.StackTraceElementMessage.file_name)
}
inline std::string* StackTraceElementMessage::mutable_file_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.StackTraceElementMessage.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StackTraceElementMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.StackTraceElementMessage.file_name)
  if (!has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return file_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StackTraceElementMessage::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.StackTraceElementMessage.file_name)
}

// optional int32 line_number = 4;
inline bool StackTraceElementMessage::has_line_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StackTraceElementMessage::clear_line_number() {
  line_number_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StackTraceElementMessage::line_number() const {
  // @@protoc_insertion_point(field_get:hbase.pb.StackTraceElementMessage.line_number)
  return line_number_;
}
inline void StackTraceElementMessage::set_line_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  line_number_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.StackTraceElementMessage.line_number)
}

// -------------------------------------------------------------------

// GenericExceptionMessage

// optional string class_name = 1;
inline bool GenericExceptionMessage::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenericExceptionMessage::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenericExceptionMessage::class_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.GenericExceptionMessage.class_name)
  return class_name_.GetNoArena();
}
inline void GenericExceptionMessage::set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.GenericExceptionMessage.class_name)
}
inline void GenericExceptionMessage::set_class_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.GenericExceptionMessage.class_name)
}
inline void GenericExceptionMessage::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.GenericExceptionMessage.class_name)
}
inline void GenericExceptionMessage::set_class_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.GenericExceptionMessage.class_name)
}
inline std::string* GenericExceptionMessage::mutable_class_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.GenericExceptionMessage.class_name)
  return class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericExceptionMessage::release_class_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.GenericExceptionMessage.class_name)
  if (!has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return class_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericExceptionMessage::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GenericExceptionMessage.class_name)
}

// optional string message = 2;
inline bool GenericExceptionMessage::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericExceptionMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GenericExceptionMessage::message() const {
  // @@protoc_insertion_point(field_get:hbase.pb.GenericExceptionMessage.message)
  return message_.GetNoArena();
}
inline void GenericExceptionMessage::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.GenericExceptionMessage.message)
}
inline void GenericExceptionMessage::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.GenericExceptionMessage.message)
}
inline void GenericExceptionMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.GenericExceptionMessage.message)
}
inline void GenericExceptionMessage::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.GenericExceptionMessage.message)
}
inline std::string* GenericExceptionMessage::mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.GenericExceptionMessage.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericExceptionMessage::release_message() {
  // @@protoc_insertion_point(field_release:hbase.pb.GenericExceptionMessage.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericExceptionMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GenericExceptionMessage.message)
}

// optional bytes error_info = 3;
inline bool GenericExceptionMessage::has_error_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericExceptionMessage::clear_error_info() {
  error_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GenericExceptionMessage::error_info() const {
  // @@protoc_insertion_point(field_get:hbase.pb.GenericExceptionMessage.error_info)
  return error_info_.GetNoArena();
}
inline void GenericExceptionMessage::set_error_info(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  error_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.GenericExceptionMessage.error_info)
}
inline void GenericExceptionMessage::set_error_info(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  error_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.GenericExceptionMessage.error_info)
}
inline void GenericExceptionMessage::set_error_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  error_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.GenericExceptionMessage.error_info)
}
inline void GenericExceptionMessage::set_error_info(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  error_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.GenericExceptionMessage.error_info)
}
inline std::string* GenericExceptionMessage::mutable_error_info() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.GenericExceptionMessage.error_info)
  return error_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenericExceptionMessage::release_error_info() {
  // @@protoc_insertion_point(field_release:hbase.pb.GenericExceptionMessage.error_info)
  if (!has_error_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return error_info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenericExceptionMessage::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_info);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GenericExceptionMessage.error_info)
}

// repeated .hbase.pb.StackTraceElementMessage trace = 4;
inline int GenericExceptionMessage::trace_size() const {
  return trace_.size();
}
inline void GenericExceptionMessage::clear_trace() {
  trace_.Clear();
}
inline ::hbase::pb::StackTraceElementMessage* GenericExceptionMessage::mutable_trace(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.GenericExceptionMessage.trace)
  return trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage >*
GenericExceptionMessage::mutable_trace() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.GenericExceptionMessage.trace)
  return &trace_;
}
inline const ::hbase::pb::StackTraceElementMessage& GenericExceptionMessage::trace(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.GenericExceptionMessage.trace)
  return trace_.Get(index);
}
inline ::hbase::pb::StackTraceElementMessage* GenericExceptionMessage::add_trace() {
  // @@protoc_insertion_point(field_add:hbase.pb.GenericExceptionMessage.trace)
  return trace_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::StackTraceElementMessage >&
GenericExceptionMessage::trace() const {
  // @@protoc_insertion_point(field_list:hbase.pb.GenericExceptionMessage.trace)
  return trace_;
}

// -------------------------------------------------------------------

// ForeignExceptionMessage

// optional string source = 1;
inline bool ForeignExceptionMessage::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForeignExceptionMessage::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ForeignExceptionMessage::source() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ForeignExceptionMessage.source)
  return source_.GetNoArena();
}
inline void ForeignExceptionMessage::set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ForeignExceptionMessage.source)
}
inline void ForeignExceptionMessage::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ForeignExceptionMessage.source)
}
inline void ForeignExceptionMessage::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ForeignExceptionMessage.source)
}
inline void ForeignExceptionMessage::set_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ForeignExceptionMessage.source)
}
inline std::string* ForeignExceptionMessage::mutable_source() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ForeignExceptionMessage.source)
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ForeignExceptionMessage::release_source() {
  // @@protoc_insertion_point(field_release:hbase.pb.ForeignExceptionMessage.source)
  if (!has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ForeignExceptionMessage::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ForeignExceptionMessage.source)
}

// optional .hbase.pb.GenericExceptionMessage generic_exception = 2;
inline bool ForeignExceptionMessage::has_generic_exception() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForeignExceptionMessage::clear_generic_exception() {
  if (generic_exception_ != nullptr) generic_exception_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hbase::pb::GenericExceptionMessage& ForeignExceptionMessage::generic_exception() const {
  const ::hbase::pb::GenericExceptionMessage* p = generic_exception_;
  // @@protoc_insertion_point(field_get:hbase.pb.ForeignExceptionMessage.generic_exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::GenericExceptionMessage*>(
      &::hbase::pb::_GenericExceptionMessage_default_instance_);
}
inline ::hbase::pb::GenericExceptionMessage* ForeignExceptionMessage::release_generic_exception() {
  // @@protoc_insertion_point(field_release:hbase.pb.ForeignExceptionMessage.generic_exception)
  _has_bits_[0] &= ~0x00000002u;
  ::hbase::pb::GenericExceptionMessage* temp = generic_exception_;
  generic_exception_ = nullptr;
  return temp;
}
inline ::hbase::pb::GenericExceptionMessage* ForeignExceptionMessage::mutable_generic_exception() {
  _has_bits_[0] |= 0x00000002u;
  if (generic_exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::GenericExceptionMessage>(GetArenaNoVirtual());
    generic_exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.ForeignExceptionMessage.generic_exception)
  return generic_exception_;
}
inline void ForeignExceptionMessage::set_allocated_generic_exception(::hbase::pb::GenericExceptionMessage* generic_exception) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete generic_exception_;
  }
  if (generic_exception) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generic_exception = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic_exception, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  generic_exception_ = generic_exception;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ForeignExceptionMessage.generic_exception)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ErrorHandling_2eproto
