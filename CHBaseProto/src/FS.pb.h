// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FS_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FS_2eproto;
namespace hbase {
namespace pb {
class HBaseVersionFileContent;
class HBaseVersionFileContentDefaultTypeInternal;
extern HBaseVersionFileContentDefaultTypeInternal _HBaseVersionFileContent_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::HBaseVersionFileContent* Arena::CreateMaybeMessage<::hbase::pb::HBaseVersionFileContent>(Arena*);
template<> ::hbase::pb::Reference* Arena::CreateMaybeMessage<::hbase::pb::Reference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

enum Reference_Range : int {
  Reference_Range_TOP = 0,
  Reference_Range_BOTTOM = 1
};
bool Reference_Range_IsValid(int value);
constexpr Reference_Range Reference_Range_Range_MIN = Reference_Range_TOP;
constexpr Reference_Range Reference_Range_Range_MAX = Reference_Range_BOTTOM;
constexpr int Reference_Range_Range_ARRAYSIZE = Reference_Range_Range_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reference_Range_descriptor();
template<typename T>
inline const std::string& Reference_Range_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reference_Range>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reference_Range_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reference_Range_descriptor(), enum_t_value);
}
inline bool Reference_Range_Parse(
    const std::string& name, Reference_Range* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reference_Range>(
    Reference_Range_descriptor(), name, value);
}
// ===================================================================

class HBaseVersionFileContent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.HBaseVersionFileContent) */ {
 public:
  HBaseVersionFileContent();
  virtual ~HBaseVersionFileContent();

  HBaseVersionFileContent(const HBaseVersionFileContent& from);
  HBaseVersionFileContent(HBaseVersionFileContent&& from) noexcept
    : HBaseVersionFileContent() {
    *this = ::std::move(from);
  }

  inline HBaseVersionFileContent& operator=(const HBaseVersionFileContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBaseVersionFileContent& operator=(HBaseVersionFileContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBaseVersionFileContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBaseVersionFileContent* internal_default_instance() {
    return reinterpret_cast<const HBaseVersionFileContent*>(
               &_HBaseVersionFileContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HBaseVersionFileContent& a, HBaseVersionFileContent& b) {
    a.Swap(&b);
  }
  inline void Swap(HBaseVersionFileContent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HBaseVersionFileContent* New() const final {
    return CreateMaybeMessage<HBaseVersionFileContent>(nullptr);
  }

  HBaseVersionFileContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBaseVersionFileContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBaseVersionFileContent& from);
  void MergeFrom(const HBaseVersionFileContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBaseVersionFileContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.HBaseVersionFileContent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FS_2eproto);
    return ::descriptor_table_FS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // required string version = 1;
  bool has_version() const;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // @@protoc_insertion_point(class_scope:hbase.pb.HBaseVersionFileContent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_FS_2eproto;
};
// -------------------------------------------------------------------

class Reference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.Reference) */ {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reference& operator=(Reference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }
  inline void Swap(Reference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reference* New() const final {
    return CreateMaybeMessage<Reference>(nullptr);
  }

  Reference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.Reference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FS_2eproto);
    return ::descriptor_table_FS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reference_Range Range;
  static constexpr Range TOP =
    Reference_Range_TOP;
  static constexpr Range BOTTOM =
    Reference_Range_BOTTOM;
  static inline bool Range_IsValid(int value) {
    return Reference_Range_IsValid(value);
  }
  static constexpr Range Range_MIN =
    Reference_Range_Range_MIN;
  static constexpr Range Range_MAX =
    Reference_Range_Range_MAX;
  static constexpr int Range_ARRAYSIZE =
    Reference_Range_Range_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Range_descriptor() {
    return Reference_Range_descriptor();
  }
  template<typename T>
  static inline const std::string& Range_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Range>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Range_Name.");
    return Reference_Range_Name(enum_t_value);
  }
  static inline bool Range_Parse(const std::string& name,
      Range* value) {
    return Reference_Range_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSplitkeyFieldNumber = 1,
    kRangeFieldNumber = 2,
  };
  // required bytes splitkey = 1;
  bool has_splitkey() const;
  void clear_splitkey();
  const std::string& splitkey() const;
  void set_splitkey(const std::string& value);
  void set_splitkey(std::string&& value);
  void set_splitkey(const char* value);
  void set_splitkey(const void* value, size_t size);
  std::string* mutable_splitkey();
  std::string* release_splitkey();
  void set_allocated_splitkey(std::string* splitkey);

  // required .hbase.pb.Reference.Range range = 2;
  bool has_range() const;
  void clear_range();
  ::hbase::pb::Reference_Range range() const;
  void set_range(::hbase::pb::Reference_Range value);

  // @@protoc_insertion_point(class_scope:hbase.pb.Reference)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr splitkey_;
  int range_;
  friend struct ::TableStruct_FS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HBaseVersionFileContent

// required string version = 1;
inline bool HBaseVersionFileContent::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HBaseVersionFileContent::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HBaseVersionFileContent::version() const {
  // @@protoc_insertion_point(field_get:hbase.pb.HBaseVersionFileContent.version)
  return version_.GetNoArena();
}
inline void HBaseVersionFileContent::set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.HBaseVersionFileContent.version)
}
inline void HBaseVersionFileContent::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.HBaseVersionFileContent.version)
}
inline void HBaseVersionFileContent::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.HBaseVersionFileContent.version)
}
inline void HBaseVersionFileContent::set_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.HBaseVersionFileContent.version)
}
inline std::string* HBaseVersionFileContent::mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.HBaseVersionFileContent.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBaseVersionFileContent::release_version() {
  // @@protoc_insertion_point(field_release:hbase.pb.HBaseVersionFileContent.version)
  if (!has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseVersionFileContent::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.HBaseVersionFileContent.version)
}

// -------------------------------------------------------------------

// Reference

// required bytes splitkey = 1;
inline bool Reference::has_splitkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reference::clear_splitkey() {
  splitkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Reference::splitkey() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Reference.splitkey)
  return splitkey_.GetNoArena();
}
inline void Reference::set_splitkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  splitkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.Reference.splitkey)
}
inline void Reference::set_splitkey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  splitkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.Reference.splitkey)
}
inline void Reference::set_splitkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  splitkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.Reference.splitkey)
}
inline void Reference::set_splitkey(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  splitkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.Reference.splitkey)
}
inline std::string* Reference::mutable_splitkey() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.Reference.splitkey)
  return splitkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Reference::release_splitkey() {
  // @@protoc_insertion_point(field_release:hbase.pb.Reference.splitkey)
  if (!has_splitkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return splitkey_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Reference::set_allocated_splitkey(std::string* splitkey) {
  if (splitkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  splitkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), splitkey);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.Reference.splitkey)
}

// required .hbase.pb.Reference.Range range = 2;
inline bool Reference::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reference::clear_range() {
  range_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hbase::pb::Reference_Range Reference::range() const {
  // @@protoc_insertion_point(field_get:hbase.pb.Reference.range)
  return static_cast< ::hbase::pb::Reference_Range >(range_);
}
inline void Reference::set_range(::hbase::pb::Reference_Range value) {
  assert(::hbase::pb::Reference_Range_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  range_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.Reference.range)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hbase::pb::Reference_Range> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::Reference_Range>() {
  return ::hbase::pb::Reference_Range_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FS_2eproto
