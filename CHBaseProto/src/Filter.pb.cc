// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Filter.proto

#include "Filter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BytesBytesPair_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Comparator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Comparator_Comparator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Filter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompareFilter_Filter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Filter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Filter_Filter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Filter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RowRange_Filter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Filter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleColumnValueFilter_Filter_2eproto;
namespace hbase {
namespace pb {
class FilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Filter> _instance;
} _Filter_default_instance_;
class ColumnCountGetFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnCountGetFilter> _instance;
} _ColumnCountGetFilter_default_instance_;
class ColumnPaginationFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnPaginationFilter> _instance;
} _ColumnPaginationFilter_default_instance_;
class ColumnPrefixFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnPrefixFilter> _instance;
} _ColumnPrefixFilter_default_instance_;
class ColumnRangeFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnRangeFilter> _instance;
} _ColumnRangeFilter_default_instance_;
class CompareFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompareFilter> _instance;
} _CompareFilter_default_instance_;
class DependentColumnFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DependentColumnFilter> _instance;
} _DependentColumnFilter_default_instance_;
class FamilyFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FamilyFilter> _instance;
} _FamilyFilter_default_instance_;
class FilterListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterList> _instance;
} _FilterList_default_instance_;
class FilterWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterWrapper> _instance;
} _FilterWrapper_default_instance_;
class FirstKeyOnlyFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirstKeyOnlyFilter> _instance;
} _FirstKeyOnlyFilter_default_instance_;
class FirstKeyValueMatchingQualifiersFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirstKeyValueMatchingQualifiersFilter> _instance;
} _FirstKeyValueMatchingQualifiersFilter_default_instance_;
class FuzzyRowFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FuzzyRowFilter> _instance;
} _FuzzyRowFilter_default_instance_;
class InclusiveStopFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InclusiveStopFilter> _instance;
} _InclusiveStopFilter_default_instance_;
class KeyOnlyFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyOnlyFilter> _instance;
} _KeyOnlyFilter_default_instance_;
class MultipleColumnPrefixFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultipleColumnPrefixFilter> _instance;
} _MultipleColumnPrefixFilter_default_instance_;
class PageFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PageFilter> _instance;
} _PageFilter_default_instance_;
class PrefixFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrefixFilter> _instance;
} _PrefixFilter_default_instance_;
class QualifierFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QualifierFilter> _instance;
} _QualifierFilter_default_instance_;
class RandomRowFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RandomRowFilter> _instance;
} _RandomRowFilter_default_instance_;
class RowFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RowFilter> _instance;
} _RowFilter_default_instance_;
class SingleColumnValueExcludeFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleColumnValueExcludeFilter> _instance;
} _SingleColumnValueExcludeFilter_default_instance_;
class SingleColumnValueFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleColumnValueFilter> _instance;
} _SingleColumnValueFilter_default_instance_;
class SkipFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SkipFilter> _instance;
} _SkipFilter_default_instance_;
class TimestampsFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimestampsFilter> _instance;
} _TimestampsFilter_default_instance_;
class ValueFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValueFilter> _instance;
} _ValueFilter_default_instance_;
class WhileMatchFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WhileMatchFilter> _instance;
} _WhileMatchFilter_default_instance_;
class FilterAllFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterAllFilter> _instance;
} _FilterAllFilter_default_instance_;
class RowRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RowRange> _instance;
} _RowRange_default_instance_;
class MultiRowRangeFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRowRangeFilter> _instance;
} _MultiRowRangeFilter_default_instance_;
class ColumnValueFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnValueFilter> _instance;
} _ColumnValueFilter_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_ColumnCountGetFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ColumnCountGetFilter_default_instance_;
    new (ptr) ::hbase::pb::ColumnCountGetFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ColumnCountGetFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColumnCountGetFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ColumnCountGetFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_ColumnPaginationFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ColumnPaginationFilter_default_instance_;
    new (ptr) ::hbase::pb::ColumnPaginationFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ColumnPaginationFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColumnPaginationFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ColumnPaginationFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_ColumnPrefixFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ColumnPrefixFilter_default_instance_;
    new (ptr) ::hbase::pb::ColumnPrefixFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ColumnPrefixFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColumnPrefixFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ColumnPrefixFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_ColumnRangeFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ColumnRangeFilter_default_instance_;
    new (ptr) ::hbase::pb::ColumnRangeFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ColumnRangeFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColumnRangeFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ColumnRangeFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_ColumnValueFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ColumnValueFilter_default_instance_;
    new (ptr) ::hbase::pb::ColumnValueFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ColumnValueFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColumnValueFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ColumnValueFilter_Filter_2eproto}, {
      &scc_info_Comparator_Comparator_2eproto.base,}};

static void InitDefaultsscc_info_CompareFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CompareFilter_default_instance_;
    new (ptr) ::hbase::pb::CompareFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CompareFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompareFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CompareFilter_Filter_2eproto}, {
      &scc_info_Comparator_Comparator_2eproto.base,}};

static void InitDefaultsscc_info_DependentColumnFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_DependentColumnFilter_default_instance_;
    new (ptr) ::hbase::pb::DependentColumnFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::DependentColumnFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DependentColumnFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DependentColumnFilter_Filter_2eproto}, {
      &scc_info_CompareFilter_Filter_2eproto.base,}};

static void InitDefaultsscc_info_FamilyFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FamilyFilter_default_instance_;
    new (ptr) ::hbase::pb::FamilyFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FamilyFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FamilyFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FamilyFilter_Filter_2eproto}, {
      &scc_info_CompareFilter_Filter_2eproto.base,}};

static void InitDefaultsscc_info_Filter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Filter_default_instance_;
    new (ptr) ::hbase::pb::Filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Filter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Filter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_FilterAllFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FilterAllFilter_default_instance_;
    new (ptr) ::hbase::pb::FilterAllFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FilterAllFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterAllFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FilterAllFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_FilterList_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FilterList_default_instance_;
    new (ptr) ::hbase::pb::FilterList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FilterList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FilterList_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FilterList_Filter_2eproto}, {
      &scc_info_Filter_Filter_2eproto.base,}};

static void InitDefaultsscc_info_FilterWrapper_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FilterWrapper_default_instance_;
    new (ptr) ::hbase::pb::FilterWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FilterWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FilterWrapper_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FilterWrapper_Filter_2eproto}, {
      &scc_info_Filter_Filter_2eproto.base,}};

static void InitDefaultsscc_info_FirstKeyOnlyFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FirstKeyOnlyFilter_default_instance_;
    new (ptr) ::hbase::pb::FirstKeyOnlyFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FirstKeyOnlyFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirstKeyOnlyFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FirstKeyOnlyFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_FirstKeyValueMatchingQualifiersFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FirstKeyValueMatchingQualifiersFilter_default_instance_;
    new (ptr) ::hbase::pb::FirstKeyValueMatchingQualifiersFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FirstKeyValueMatchingQualifiersFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirstKeyValueMatchingQualifiersFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FirstKeyValueMatchingQualifiersFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_FuzzyRowFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FuzzyRowFilter_default_instance_;
    new (ptr) ::hbase::pb::FuzzyRowFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FuzzyRowFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FuzzyRowFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FuzzyRowFilter_Filter_2eproto}, {
      &scc_info_BytesBytesPair_HBase_2eproto.base,}};

static void InitDefaultsscc_info_InclusiveStopFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_InclusiveStopFilter_default_instance_;
    new (ptr) ::hbase::pb::InclusiveStopFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::InclusiveStopFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InclusiveStopFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InclusiveStopFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_KeyOnlyFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_KeyOnlyFilter_default_instance_;
    new (ptr) ::hbase::pb::KeyOnlyFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::KeyOnlyFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyOnlyFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_KeyOnlyFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_MultiRowRangeFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MultiRowRangeFilter_default_instance_;
    new (ptr) ::hbase::pb::MultiRowRangeFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MultiRowRangeFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiRowRangeFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MultiRowRangeFilter_Filter_2eproto}, {
      &scc_info_RowRange_Filter_2eproto.base,}};

static void InitDefaultsscc_info_MultipleColumnPrefixFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MultipleColumnPrefixFilter_default_instance_;
    new (ptr) ::hbase::pb::MultipleColumnPrefixFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MultipleColumnPrefixFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultipleColumnPrefixFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MultipleColumnPrefixFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_PageFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_PageFilter_default_instance_;
    new (ptr) ::hbase::pb::PageFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::PageFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PageFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PageFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_PrefixFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_PrefixFilter_default_instance_;
    new (ptr) ::hbase::pb::PrefixFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::PrefixFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrefixFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PrefixFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_QualifierFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_QualifierFilter_default_instance_;
    new (ptr) ::hbase::pb::QualifierFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::QualifierFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QualifierFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QualifierFilter_Filter_2eproto}, {
      &scc_info_CompareFilter_Filter_2eproto.base,}};

static void InitDefaultsscc_info_RandomRowFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RandomRowFilter_default_instance_;
    new (ptr) ::hbase::pb::RandomRowFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RandomRowFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RandomRowFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RandomRowFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_RowFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RowFilter_default_instance_;
    new (ptr) ::hbase::pb::RowFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RowFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RowFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RowFilter_Filter_2eproto}, {
      &scc_info_CompareFilter_Filter_2eproto.base,}};

static void InitDefaultsscc_info_RowRange_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RowRange_default_instance_;
    new (ptr) ::hbase::pb::RowRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RowRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RowRange_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RowRange_Filter_2eproto}, {}};

static void InitDefaultsscc_info_SingleColumnValueExcludeFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SingleColumnValueExcludeFilter_default_instance_;
    new (ptr) ::hbase::pb::SingleColumnValueExcludeFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SingleColumnValueExcludeFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleColumnValueExcludeFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SingleColumnValueExcludeFilter_Filter_2eproto}, {
      &scc_info_SingleColumnValueFilter_Filter_2eproto.base,}};

static void InitDefaultsscc_info_SingleColumnValueFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SingleColumnValueFilter_default_instance_;
    new (ptr) ::hbase::pb::SingleColumnValueFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SingleColumnValueFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleColumnValueFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SingleColumnValueFilter_Filter_2eproto}, {
      &scc_info_Comparator_Comparator_2eproto.base,}};

static void InitDefaultsscc_info_SkipFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SkipFilter_default_instance_;
    new (ptr) ::hbase::pb::SkipFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SkipFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SkipFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SkipFilter_Filter_2eproto}, {
      &scc_info_Filter_Filter_2eproto.base,}};

static void InitDefaultsscc_info_TimestampsFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_TimestampsFilter_default_instance_;
    new (ptr) ::hbase::pb::TimestampsFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::TimestampsFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimestampsFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TimestampsFilter_Filter_2eproto}, {}};

static void InitDefaultsscc_info_ValueFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ValueFilter_default_instance_;
    new (ptr) ::hbase::pb::ValueFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ValueFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValueFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ValueFilter_Filter_2eproto}, {
      &scc_info_CompareFilter_Filter_2eproto.base,}};

static void InitDefaultsscc_info_WhileMatchFilter_Filter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_WhileMatchFilter_default_instance_;
    new (ptr) ::hbase::pb::WhileMatchFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::WhileMatchFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WhileMatchFilter_Filter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WhileMatchFilter_Filter_2eproto}, {
      &scc_info_Filter_Filter_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Filter_2eproto[31];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Filter_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Filter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Filter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Filter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Filter, name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Filter, serialized_filter_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnCountGetFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnCountGetFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnCountGetFilter, limit_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnPaginationFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnPaginationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnPaginationFilter, limit_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnPaginationFilter, offset_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnPaginationFilter, column_offset_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnPrefixFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnPrefixFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnPrefixFilter, prefix_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnRangeFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnRangeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnRangeFilter, min_column_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnRangeFilter, min_column_inclusive_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnRangeFilter, max_column_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnRangeFilter, max_column_inclusive_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompareFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompareFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompareFilter, compare_op_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompareFilter, comparator_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DependentColumnFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DependentColumnFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DependentColumnFilter, compare_filter_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DependentColumnFilter, column_family_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DependentColumnFilter, column_qualifier_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DependentColumnFilter, drop_dependent_column_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FamilyFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FamilyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FamilyFilter, compare_filter_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FilterList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FilterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FilterList, operator__),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FilterList, filters_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FilterWrapper, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FilterWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FilterWrapper, filter_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FirstKeyOnlyFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FirstKeyOnlyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FirstKeyValueMatchingQualifiersFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FirstKeyValueMatchingQualifiersFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FirstKeyValueMatchingQualifiersFilter, qualifiers_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FuzzyRowFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FuzzyRowFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FuzzyRowFilter, fuzzy_keys_data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::InclusiveStopFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::InclusiveStopFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::InclusiveStopFilter, stop_row_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::KeyOnlyFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::KeyOnlyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::KeyOnlyFilter, len_as_val_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultipleColumnPrefixFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultipleColumnPrefixFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultipleColumnPrefixFilter, sorted_prefixes_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PageFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PageFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PageFilter, page_size_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrefixFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrefixFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::PrefixFilter, prefix_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::QualifierFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::QualifierFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::QualifierFilter, compare_filter_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RandomRowFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RandomRowFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RandomRowFilter, chance_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RowFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RowFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RowFilter, compare_filter_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueExcludeFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueExcludeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueExcludeFilter, single_column_value_filter_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueFilter, column_family_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueFilter, column_qualifier_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueFilter, compare_op_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueFilter, comparator_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueFilter, filter_if_missing_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SingleColumnValueFilter, latest_version_only_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SkipFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SkipFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SkipFilter, filter_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TimestampsFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TimestampsFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TimestampsFilter, timestamps_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TimestampsFilter, can_hint_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ValueFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ValueFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ValueFilter, compare_filter_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WhileMatchFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WhileMatchFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WhileMatchFilter, filter_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FilterAllFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FilterAllFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RowRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RowRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RowRange, start_row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RowRange, start_row_inclusive_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RowRange, stop_row_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RowRange, stop_row_inclusive_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRowRangeFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRowRangeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRowRangeFilter, row_range_list_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnValueFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnValueFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnValueFilter, family_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnValueFilter, qualifier_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnValueFilter, compare_op_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ColumnValueFilter, comparator_),
  0,
  1,
  3,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hbase::pb::Filter)},
  { 9, 15, sizeof(::hbase::pb::ColumnCountGetFilter)},
  { 16, 24, sizeof(::hbase::pb::ColumnPaginationFilter)},
  { 27, 33, sizeof(::hbase::pb::ColumnPrefixFilter)},
  { 34, 43, sizeof(::hbase::pb::ColumnRangeFilter)},
  { 47, 54, sizeof(::hbase::pb::CompareFilter)},
  { 56, 65, sizeof(::hbase::pb::DependentColumnFilter)},
  { 69, 75, sizeof(::hbase::pb::FamilyFilter)},
  { 76, 83, sizeof(::hbase::pb::FilterList)},
  { 85, 91, sizeof(::hbase::pb::FilterWrapper)},
  { 92, 97, sizeof(::hbase::pb::FirstKeyOnlyFilter)},
  { 97, 103, sizeof(::hbase::pb::FirstKeyValueMatchingQualifiersFilter)},
  { 104, 110, sizeof(::hbase::pb::FuzzyRowFilter)},
  { 111, 117, sizeof(::hbase::pb::InclusiveStopFilter)},
  { 118, 124, sizeof(::hbase::pb::KeyOnlyFilter)},
  { 125, 131, sizeof(::hbase::pb::MultipleColumnPrefixFilter)},
  { 132, 138, sizeof(::hbase::pb::PageFilter)},
  { 139, 145, sizeof(::hbase::pb::PrefixFilter)},
  { 146, 152, sizeof(::hbase::pb::QualifierFilter)},
  { 153, 159, sizeof(::hbase::pb::RandomRowFilter)},
  { 160, 166, sizeof(::hbase::pb::RowFilter)},
  { 167, 173, sizeof(::hbase::pb::SingleColumnValueExcludeFilter)},
  { 174, 185, sizeof(::hbase::pb::SingleColumnValueFilter)},
  { 191, 197, sizeof(::hbase::pb::SkipFilter)},
  { 198, 205, sizeof(::hbase::pb::TimestampsFilter)},
  { 207, 213, sizeof(::hbase::pb::ValueFilter)},
  { 214, 220, sizeof(::hbase::pb::WhileMatchFilter)},
  { 221, 226, sizeof(::hbase::pb::FilterAllFilter)},
  { 226, 235, sizeof(::hbase::pb::RowRange)},
  { 239, 245, sizeof(::hbase::pb::MultiRowRangeFilter)},
  { 246, 255, sizeof(::hbase::pb::ColumnValueFilter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ColumnCountGetFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ColumnPaginationFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ColumnPrefixFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ColumnRangeFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CompareFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_DependentColumnFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FamilyFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FilterList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FilterWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FirstKeyOnlyFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FirstKeyValueMatchingQualifiersFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FuzzyRowFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_InclusiveStopFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_KeyOnlyFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MultipleColumnPrefixFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_PageFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_PrefixFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_QualifierFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RandomRowFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RowFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SingleColumnValueExcludeFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SingleColumnValueFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SkipFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_TimestampsFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ValueFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_WhileMatchFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FilterAllFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RowRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MultiRowRangeFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ColumnValueFilter_default_instance_),
};

const char descriptor_table_protodef_Filter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Filter.proto\022\010hbase.pb\032\013HBase.proto\032\020C"
  "omparator.proto\"1\n\006Filter\022\014\n\004name\030\001 \002(\t\022"
  "\031\n\021serialized_filter\030\002 \001(\014\"%\n\024ColumnCoun"
  "tGetFilter\022\r\n\005limit\030\001 \002(\005\"N\n\026ColumnPagin"
  "ationFilter\022\r\n\005limit\030\001 \002(\005\022\016\n\006offset\030\002 \001"
  "(\005\022\025\n\rcolumn_offset\030\003 \001(\014\"$\n\022ColumnPrefi"
  "xFilter\022\016\n\006prefix\030\001 \002(\014\"w\n\021ColumnRangeFi"
  "lter\022\022\n\nmin_column\030\001 \001(\014\022\034\n\024min_column_i"
  "nclusive\030\002 \001(\010\022\022\n\nmax_column\030\003 \001(\014\022\034\n\024ma"
  "x_column_inclusive\030\004 \001(\010\"d\n\rCompareFilte"
  "r\022)\n\ncompare_op\030\001 \002(\0162\025.hbase.pb.Compare"
  "Type\022(\n\ncomparator\030\002 \001(\0132\024.hbase.pb.Comp"
  "arator\"\230\001\n\025DependentColumnFilter\022/\n\016comp"
  "are_filter\030\001 \002(\0132\027.hbase.pb.CompareFilte"
  "r\022\025\n\rcolumn_family\030\002 \001(\014\022\030\n\020column_quali"
  "fier\030\003 \001(\014\022\035\n\025drop_dependent_column\030\004 \001("
  "\010\"\?\n\014FamilyFilter\022/\n\016compare_filter\030\001 \002("
  "\0132\027.hbase.pb.CompareFilter\"\222\001\n\nFilterLis"
  "t\022/\n\010operator\030\001 \002(\0162\035.hbase.pb.FilterLis"
  "t.Operator\022!\n\007filters\030\002 \003(\0132\020.hbase.pb.F"
  "ilter\"0\n\010Operator\022\021\n\rMUST_PASS_ALL\020\001\022\021\n\r"
  "MUST_PASS_ONE\020\002\"1\n\rFilterWrapper\022 \n\006filt"
  "er\030\001 \002(\0132\020.hbase.pb.Filter\"\024\n\022FirstKeyOn"
  "lyFilter\";\n%FirstKeyValueMatchingQualifi"
  "ersFilter\022\022\n\nqualifiers\030\001 \003(\014\"C\n\016FuzzyRo"
  "wFilter\0221\n\017fuzzy_keys_data\030\001 \003(\0132\030.hbase"
  ".pb.BytesBytesPair\"+\n\023InclusiveStopFilte"
  "r\022\024\n\014stop_row_key\030\001 \001(\014\"#\n\rKeyOnlyFilter"
  "\022\022\n\nlen_as_val\030\001 \002(\010\"5\n\032MultipleColumnPr"
  "efixFilter\022\027\n\017sorted_prefixes\030\001 \003(\014\"\037\n\nP"
  "ageFilter\022\021\n\tpage_size\030\001 \002(\003\"\036\n\014PrefixFi"
  "lter\022\016\n\006prefix\030\001 \001(\014\"B\n\017QualifierFilter\022"
  "/\n\016compare_filter\030\001 \002(\0132\027.hbase.pb.Compa"
  "reFilter\"!\n\017RandomRowFilter\022\016\n\006chance\030\001 "
  "\002(\002\"<\n\tRowFilter\022/\n\016compare_filter\030\001 \002(\013"
  "2\027.hbase.pb.CompareFilter\"g\n\036SingleColum"
  "nValueExcludeFilter\022E\n\032single_column_val"
  "ue_filter\030\001 \002(\0132!.hbase.pb.SingleColumnV"
  "alueFilter\"\327\001\n\027SingleColumnValueFilter\022\025"
  "\n\rcolumn_family\030\001 \001(\014\022\030\n\020column_qualifie"
  "r\030\002 \001(\014\022)\n\ncompare_op\030\003 \002(\0162\025.hbase.pb.C"
  "ompareType\022(\n\ncomparator\030\004 \002(\0132\024.hbase.p"
  "b.Comparator\022\031\n\021filter_if_missing\030\005 \001(\010\022"
  "\033\n\023latest_version_only\030\006 \001(\010\".\n\nSkipFilt"
  "er\022 \n\006filter\030\001 \002(\0132\020.hbase.pb.Filter\"<\n\020"
  "TimestampsFilter\022\026\n\ntimestamps\030\001 \003(\003B\002\020\001"
  "\022\020\n\010can_hint\030\002 \001(\010\">\n\013ValueFilter\022/\n\016com"
  "pare_filter\030\001 \002(\0132\027.hbase.pb.CompareFilt"
  "er\"4\n\020WhileMatchFilter\022 \n\006filter\030\001 \002(\0132\020"
  ".hbase.pb.Filter\"\021\n\017FilterAllFilter\"h\n\010R"
  "owRange\022\021\n\tstart_row\030\001 \001(\014\022\033\n\023start_row_"
  "inclusive\030\002 \001(\010\022\020\n\010stop_row\030\003 \001(\014\022\032\n\022sto"
  "p_row_inclusive\030\004 \001(\010\"A\n\023MultiRowRangeFi"
  "lter\022*\n\016row_range_list\030\001 \003(\0132\022.hbase.pb."
  "RowRange\"\213\001\n\021ColumnValueFilter\022\016\n\006family"
  "\030\001 \002(\014\022\021\n\tqualifier\030\002 \002(\014\022)\n\ncompare_op\030"
  "\003 \002(\0162\025.hbase.pb.CompareType\022(\n\ncomparat"
  "or\030\004 \002(\0132\024.hbase.pb.ComparatorBB\n*org.ap"
  "ache.hadoop.hbase.protobuf.generatedB\014Fi"
  "lterProtosH\001\210\001\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Filter_2eproto_deps[2] = {
  &::descriptor_table_Comparator_2eproto,
  &::descriptor_table_HBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Filter_2eproto_sccs[31] = {
  &scc_info_ColumnCountGetFilter_Filter_2eproto.base,
  &scc_info_ColumnPaginationFilter_Filter_2eproto.base,
  &scc_info_ColumnPrefixFilter_Filter_2eproto.base,
  &scc_info_ColumnRangeFilter_Filter_2eproto.base,
  &scc_info_ColumnValueFilter_Filter_2eproto.base,
  &scc_info_CompareFilter_Filter_2eproto.base,
  &scc_info_DependentColumnFilter_Filter_2eproto.base,
  &scc_info_FamilyFilter_Filter_2eproto.base,
  &scc_info_Filter_Filter_2eproto.base,
  &scc_info_FilterAllFilter_Filter_2eproto.base,
  &scc_info_FilterList_Filter_2eproto.base,
  &scc_info_FilterWrapper_Filter_2eproto.base,
  &scc_info_FirstKeyOnlyFilter_Filter_2eproto.base,
  &scc_info_FirstKeyValueMatchingQualifiersFilter_Filter_2eproto.base,
  &scc_info_FuzzyRowFilter_Filter_2eproto.base,
  &scc_info_InclusiveStopFilter_Filter_2eproto.base,
  &scc_info_KeyOnlyFilter_Filter_2eproto.base,
  &scc_info_MultiRowRangeFilter_Filter_2eproto.base,
  &scc_info_MultipleColumnPrefixFilter_Filter_2eproto.base,
  &scc_info_PageFilter_Filter_2eproto.base,
  &scc_info_PrefixFilter_Filter_2eproto.base,
  &scc_info_QualifierFilter_Filter_2eproto.base,
  &scc_info_RandomRowFilter_Filter_2eproto.base,
  &scc_info_RowFilter_Filter_2eproto.base,
  &scc_info_RowRange_Filter_2eproto.base,
  &scc_info_SingleColumnValueExcludeFilter_Filter_2eproto.base,
  &scc_info_SingleColumnValueFilter_Filter_2eproto.base,
  &scc_info_SkipFilter_Filter_2eproto.base,
  &scc_info_TimestampsFilter_Filter_2eproto.base,
  &scc_info_ValueFilter_Filter_2eproto.base,
  &scc_info_WhileMatchFilter_Filter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Filter_2eproto_once;
static bool descriptor_table_Filter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Filter_2eproto = {
  &descriptor_table_Filter_2eproto_initialized, descriptor_table_protodef_Filter_2eproto, "Filter.proto", 2378,
  &descriptor_table_Filter_2eproto_once, descriptor_table_Filter_2eproto_sccs, descriptor_table_Filter_2eproto_deps, 31, 2,
  schemas, file_default_instances, TableStruct_Filter_2eproto::offsets,
  file_level_metadata_Filter_2eproto, 31, file_level_enum_descriptors_Filter_2eproto, file_level_service_descriptors_Filter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Filter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Filter_2eproto), true);
namespace hbase {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterList_Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Filter_2eproto);
  return file_level_enum_descriptors_Filter_2eproto[0];
}
bool FilterList_Operator_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FilterList_Operator FilterList::MUST_PASS_ALL;
constexpr FilterList_Operator FilterList::MUST_PASS_ONE;
constexpr FilterList_Operator FilterList::Operator_MIN;
constexpr FilterList_Operator FilterList::Operator_MAX;
constexpr int FilterList::Operator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Filter::InitAsDefaultInstance() {
}
class Filter::_Internal {
 public:
  using HasBits = decltype(std::declval<Filter>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialized_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Filter::Filter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  serialized_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_filter()) {
    serialized_filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_filter_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Filter)
}

void Filter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Filter_Filter_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:hbase.pb.Filter)
  SharedDtor();
}

void Filter::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter& Filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Filter_Filter_2eproto.base);
  return *internal_default_instance();
}


void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_filter_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "hbase.pb.Filter.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes serialized_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serialized_filter(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Filter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Filter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.Filter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes serialized_filter = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Filter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Filter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.Filter.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes serialized_filter = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->serialized_filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Filter)
}

::PROTOBUF_NAMESPACE_ID::uint8* Filter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.Filter.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes serialized_filter = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_filter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Filter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes serialized_filter = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->serialized_filter());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Filter)
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialized_filter_);
    }
  }
}

void Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_filter_.Swap(&other->serialized_filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnCountGetFilter::InitAsDefaultInstance() {
}
class ColumnCountGetFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnCountGetFilter>()._has_bits_);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ColumnCountGetFilter::ColumnCountGetFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ColumnCountGetFilter)
}
ColumnCountGetFilter::ColumnCountGetFilter(const ColumnCountGetFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ColumnCountGetFilter)
}

void ColumnCountGetFilter::SharedCtor() {
  limit_ = 0;
}

ColumnCountGetFilter::~ColumnCountGetFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.ColumnCountGetFilter)
  SharedDtor();
}

void ColumnCountGetFilter::SharedDtor() {
}

void ColumnCountGetFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnCountGetFilter& ColumnCountGetFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnCountGetFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void ColumnCountGetFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ColumnCountGetFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColumnCountGetFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColumnCountGetFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ColumnCountGetFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 limit = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_limit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ColumnCountGetFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ColumnCountGetFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColumnCountGetFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ColumnCountGetFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 limit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ColumnCountGetFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnCountGetFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ColumnCountGetFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ColumnCountGetFilter)
  return target;
}

size_t ColumnCountGetFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ColumnCountGetFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 limit = 1;
  if (has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->limit());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnCountGetFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ColumnCountGetFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnCountGetFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnCountGetFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ColumnCountGetFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ColumnCountGetFilter)
    MergeFrom(*source);
  }
}

void ColumnCountGetFilter::MergeFrom(const ColumnCountGetFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ColumnCountGetFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_limit()) {
    set_limit(from.limit());
  }
}

void ColumnCountGetFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ColumnCountGetFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnCountGetFilter::CopyFrom(const ColumnCountGetFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ColumnCountGetFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnCountGetFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ColumnCountGetFilter::InternalSwap(ColumnCountGetFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnCountGetFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnPaginationFilter::InitAsDefaultInstance() {
}
class ColumnPaginationFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnPaginationFilter>()._has_bits_);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ColumnPaginationFilter::ColumnPaginationFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ColumnPaginationFilter)
}
ColumnPaginationFilter::ColumnPaginationFilter(const ColumnPaginationFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_offset()) {
    column_offset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_offset_);
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ColumnPaginationFilter)
}

void ColumnPaginationFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnPaginationFilter_Filter_2eproto.base);
  column_offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(offset_));
}

ColumnPaginationFilter::~ColumnPaginationFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.ColumnPaginationFilter)
  SharedDtor();
}

void ColumnPaginationFilter::SharedDtor() {
  column_offset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ColumnPaginationFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnPaginationFilter& ColumnPaginationFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnPaginationFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void ColumnPaginationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ColumnPaginationFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    column_offset_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&limit_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColumnPaginationFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes column_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_column_offset(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColumnPaginationFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ColumnPaginationFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 limit = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_limit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 offset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes column_offset = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ColumnPaginationFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ColumnPaginationFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColumnPaginationFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ColumnPaginationFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 limit = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->limit(), output);
  }

  // optional int32 offset = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // optional bytes column_offset = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->column_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ColumnPaginationFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnPaginationFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ColumnPaginationFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 limit = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->limit(), target);
  }

  // optional int32 offset = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // optional bytes column_offset = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->column_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ColumnPaginationFilter)
  return target;
}

size_t ColumnPaginationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ColumnPaginationFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 limit = 1;
  if (has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->limit());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes column_offset = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->column_offset());
  }

  // optional int32 offset = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->offset());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnPaginationFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ColumnPaginationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnPaginationFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnPaginationFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ColumnPaginationFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ColumnPaginationFilter)
    MergeFrom(*source);
  }
}

void ColumnPaginationFilter::MergeFrom(const ColumnPaginationFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ColumnPaginationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      column_offset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_offset_);
    }
    if (cached_has_bits & 0x00000002u) {
      limit_ = from.limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnPaginationFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ColumnPaginationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnPaginationFilter::CopyFrom(const ColumnPaginationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ColumnPaginationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnPaginationFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ColumnPaginationFilter::InternalSwap(ColumnPaginationFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  column_offset_.Swap(&other->column_offset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnPaginationFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnPrefixFilter::InitAsDefaultInstance() {
}
class ColumnPrefixFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnPrefixFilter>()._has_bits_);
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ColumnPrefixFilter::ColumnPrefixFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ColumnPrefixFilter)
}
ColumnPrefixFilter::ColumnPrefixFilter(const ColumnPrefixFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ColumnPrefixFilter)
}

void ColumnPrefixFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnPrefixFilter_Filter_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ColumnPrefixFilter::~ColumnPrefixFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.ColumnPrefixFilter)
  SharedDtor();
}

void ColumnPrefixFilter::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ColumnPrefixFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnPrefixFilter& ColumnPrefixFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnPrefixFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void ColumnPrefixFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ColumnPrefixFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    prefix_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColumnPrefixFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_prefix(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColumnPrefixFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ColumnPrefixFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes prefix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ColumnPrefixFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ColumnPrefixFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColumnPrefixFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ColumnPrefixFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->prefix(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ColumnPrefixFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnPrefixFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ColumnPrefixFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->prefix(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ColumnPrefixFilter)
  return target;
}

size_t ColumnPrefixFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ColumnPrefixFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes prefix = 1;
  if (has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->prefix());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnPrefixFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ColumnPrefixFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnPrefixFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnPrefixFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ColumnPrefixFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ColumnPrefixFilter)
    MergeFrom(*source);
  }
}

void ColumnPrefixFilter::MergeFrom(const ColumnPrefixFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ColumnPrefixFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prefix()) {
    _has_bits_[0] |= 0x00000001u;
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
}

void ColumnPrefixFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ColumnPrefixFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnPrefixFilter::CopyFrom(const ColumnPrefixFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ColumnPrefixFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnPrefixFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ColumnPrefixFilter::InternalSwap(ColumnPrefixFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnPrefixFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnRangeFilter::InitAsDefaultInstance() {
}
class ColumnRangeFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnRangeFilter>()._has_bits_);
  static void set_has_min_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_column_inclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_column_inclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ColumnRangeFilter::ColumnRangeFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ColumnRangeFilter)
}
ColumnRangeFilter::ColumnRangeFilter(const ColumnRangeFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  min_column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_min_column()) {
    min_column_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.min_column_);
  }
  max_column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_max_column()) {
    max_column_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.max_column_);
  }
  ::memcpy(&min_column_inclusive_, &from.min_column_inclusive_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_column_inclusive_) -
    reinterpret_cast<char*>(&min_column_inclusive_)) + sizeof(max_column_inclusive_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ColumnRangeFilter)
}

void ColumnRangeFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnRangeFilter_Filter_2eproto.base);
  min_column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_column_inclusive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_column_inclusive_) -
      reinterpret_cast<char*>(&min_column_inclusive_)) + sizeof(max_column_inclusive_));
}

ColumnRangeFilter::~ColumnRangeFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.ColumnRangeFilter)
  SharedDtor();
}

void ColumnRangeFilter::SharedDtor() {
  min_column_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_column_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ColumnRangeFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnRangeFilter& ColumnRangeFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnRangeFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void ColumnRangeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ColumnRangeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_column_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      max_column_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&min_column_inclusive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_column_inclusive_) -
      reinterpret_cast<char*>(&min_column_inclusive_)) + sizeof(max_column_inclusive_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColumnRangeFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes min_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_min_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool min_column_inclusive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_column_inclusive(&has_bits);
          min_column_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes max_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_max_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool max_column_inclusive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_column_inclusive(&has_bits);
          max_column_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColumnRangeFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ColumnRangeFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes min_column = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_min_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool min_column_inclusive = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_min_column_inclusive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &min_column_inclusive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes max_column = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_max_column()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool max_column_inclusive = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_column_inclusive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_column_inclusive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ColumnRangeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ColumnRangeFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColumnRangeFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ColumnRangeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes min_column = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->min_column(), output);
  }

  // optional bool min_column_inclusive = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->min_column_inclusive(), output);
  }

  // optional bytes max_column = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->max_column(), output);
  }

  // optional bool max_column_inclusive = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->max_column_inclusive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ColumnRangeFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnRangeFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ColumnRangeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes min_column = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->min_column(), target);
  }

  // optional bool min_column_inclusive = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->min_column_inclusive(), target);
  }

  // optional bytes max_column = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->max_column(), target);
  }

  // optional bool max_column_inclusive = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->max_column_inclusive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ColumnRangeFilter)
  return target;
}

size_t ColumnRangeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ColumnRangeFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes min_column = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->min_column());
    }

    // optional bytes max_column = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->max_column());
    }

    // optional bool min_column_inclusive = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool max_column_inclusive = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnRangeFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ColumnRangeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnRangeFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnRangeFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ColumnRangeFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ColumnRangeFilter)
    MergeFrom(*source);
  }
}

void ColumnRangeFilter::MergeFrom(const ColumnRangeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ColumnRangeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      min_column_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.min_column_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      max_column_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.max_column_);
    }
    if (cached_has_bits & 0x00000004u) {
      min_column_inclusive_ = from.min_column_inclusive_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_column_inclusive_ = from.max_column_inclusive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnRangeFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ColumnRangeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnRangeFilter::CopyFrom(const ColumnRangeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ColumnRangeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRangeFilter::IsInitialized() const {
  return true;
}

void ColumnRangeFilter::InternalSwap(ColumnRangeFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  min_column_.Swap(&other->min_column_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  max_column_.Swap(&other->max_column_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_column_inclusive_, other->min_column_inclusive_);
  swap(max_column_inclusive_, other->max_column_inclusive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRangeFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompareFilter::InitAsDefaultInstance() {
  ::hbase::pb::_CompareFilter_default_instance_._instance.get_mutable()->comparator_ = const_cast< ::hbase::pb::Comparator*>(
      ::hbase::pb::Comparator::internal_default_instance());
}
class CompareFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<CompareFilter>()._has_bits_);
  static void set_has_compare_op(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::Comparator& comparator(const CompareFilter* msg);
  static void set_has_comparator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::Comparator&
CompareFilter::_Internal::comparator(const CompareFilter* msg) {
  return *msg->comparator_;
}
void CompareFilter::clear_comparator() {
  if (comparator_ != nullptr) comparator_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CompareFilter::CompareFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CompareFilter)
}
CompareFilter::CompareFilter(const CompareFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparator()) {
    comparator_ = new ::hbase::pb::Comparator(*from.comparator_);
  } else {
    comparator_ = nullptr;
  }
  compare_op_ = from.compare_op_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CompareFilter)
}

void CompareFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompareFilter_Filter_2eproto.base);
  ::memset(&comparator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_op_) -
      reinterpret_cast<char*>(&comparator_)) + sizeof(compare_op_));
}

CompareFilter::~CompareFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.CompareFilter)
  SharedDtor();
}

void CompareFilter::SharedDtor() {
  if (this != internal_default_instance()) delete comparator_;
}

void CompareFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompareFilter& CompareFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompareFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void CompareFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CompareFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(comparator_ != nullptr);
    comparator_->Clear();
  }
  compare_op_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompareFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.CompareType compare_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::CompareType_IsValid(val))) {
            set_compare_op(static_cast<::hbase::pb::CompareType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Comparator comparator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_comparator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompareFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CompareFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.CompareType compare_op = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::CompareType_IsValid(value)) {
            set_compare_op(static_cast< ::hbase::pb::CompareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Comparator comparator = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_comparator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CompareFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CompareFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompareFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CompareFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareType compare_op = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->compare_op(), output);
  }

  // optional .hbase.pb.Comparator comparator = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::comparator(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CompareFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompareFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CompareFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareType compare_op = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->compare_op(), target);
  }

  // optional .hbase.pb.Comparator comparator = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::comparator(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CompareFilter)
  return target;
}

size_t CompareFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CompareFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.CompareType compare_op = 1;
  if (has_compare_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare_op());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hbase.pb.Comparator comparator = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparator_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompareFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CompareFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const CompareFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompareFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CompareFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CompareFilter)
    MergeFrom(*source);
  }
}

void CompareFilter::MergeFrom(const CompareFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CompareFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_comparator()->::hbase::pb::Comparator::MergeFrom(from.comparator());
    }
    if (cached_has_bits & 0x00000002u) {
      compare_op_ = from.compare_op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CompareFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CompareFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompareFilter::CopyFrom(const CompareFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CompareFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_comparator()) {
    if (!this->comparator_->IsInitialized()) return false;
  }
  return true;
}

void CompareFilter::InternalSwap(CompareFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(comparator_, other->comparator_);
  swap(compare_op_, other->compare_op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompareFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DependentColumnFilter::InitAsDefaultInstance() {
  ::hbase::pb::_DependentColumnFilter_default_instance_._instance.get_mutable()->compare_filter_ = const_cast< ::hbase::pb::CompareFilter*>(
      ::hbase::pb::CompareFilter::internal_default_instance());
}
class DependentColumnFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<DependentColumnFilter>()._has_bits_);
  static const ::hbase::pb::CompareFilter& compare_filter(const DependentColumnFilter* msg);
  static void set_has_compare_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drop_dependent_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hbase::pb::CompareFilter&
DependentColumnFilter::_Internal::compare_filter(const DependentColumnFilter* msg) {
  return *msg->compare_filter_;
}
DependentColumnFilter::DependentColumnFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.DependentColumnFilter)
}
DependentColumnFilter::DependentColumnFilter(const DependentColumnFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_family()) {
    column_family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_family_);
  }
  column_qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_qualifier()) {
    column_qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_qualifier_);
  }
  if (from.has_compare_filter()) {
    compare_filter_ = new ::hbase::pb::CompareFilter(*from.compare_filter_);
  } else {
    compare_filter_ = nullptr;
  }
  drop_dependent_column_ = from.drop_dependent_column_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.DependentColumnFilter)
}

void DependentColumnFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DependentColumnFilter_Filter_2eproto.base);
  column_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&compare_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drop_dependent_column_) -
      reinterpret_cast<char*>(&compare_filter_)) + sizeof(drop_dependent_column_));
}

DependentColumnFilter::~DependentColumnFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.DependentColumnFilter)
  SharedDtor();
}

void DependentColumnFilter::SharedDtor() {
  column_family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete compare_filter_;
}

void DependentColumnFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DependentColumnFilter& DependentColumnFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DependentColumnFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void DependentColumnFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.DependentColumnFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      column_family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      column_qualifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(compare_filter_ != nullptr);
      compare_filter_->Clear();
    }
  }
  drop_dependent_column_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DependentColumnFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_compare_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes column_family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_column_family(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes column_qualifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_column_qualifier(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drop_dependent_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_drop_dependent_column(&has_bits);
          drop_dependent_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DependentColumnFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.DependentColumnFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compare_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes column_family = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes column_qualifier = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_qualifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool drop_dependent_column = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_drop_dependent_column(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_dependent_column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.DependentColumnFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.DependentColumnFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DependentColumnFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.DependentColumnFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::compare_filter(this), output);
  }

  // optional bytes column_family = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->column_family(), output);
  }

  // optional bytes column_qualifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->column_qualifier(), output);
  }

  // optional bool drop_dependent_column = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->drop_dependent_column(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.DependentColumnFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* DependentColumnFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.DependentColumnFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::compare_filter(this), target);
  }

  // optional bytes column_family = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->column_family(), target);
  }

  // optional bytes column_qualifier = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->column_qualifier(), target);
  }

  // optional bool drop_dependent_column = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->drop_dependent_column(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.DependentColumnFilter)
  return target;
}

size_t DependentColumnFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.DependentColumnFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (has_compare_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compare_filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes column_family = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->column_family());
    }

    // optional bytes column_qualifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->column_qualifier());
    }

  }
  // optional bool drop_dependent_column = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DependentColumnFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.DependentColumnFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const DependentColumnFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DependentColumnFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.DependentColumnFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.DependentColumnFilter)
    MergeFrom(*source);
  }
}

void DependentColumnFilter::MergeFrom(const DependentColumnFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.DependentColumnFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      column_family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_family_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      column_qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_qualifier_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_compare_filter()->::hbase::pb::CompareFilter::MergeFrom(from.compare_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      drop_dependent_column_ = from.drop_dependent_column_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DependentColumnFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.DependentColumnFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DependentColumnFilter::CopyFrom(const DependentColumnFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.DependentColumnFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DependentColumnFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_compare_filter()) {
    if (!this->compare_filter_->IsInitialized()) return false;
  }
  return true;
}

void DependentColumnFilter::InternalSwap(DependentColumnFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  column_family_.Swap(&other->column_family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  column_qualifier_.Swap(&other->column_qualifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(compare_filter_, other->compare_filter_);
  swap(drop_dependent_column_, other->drop_dependent_column_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DependentColumnFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FamilyFilter::InitAsDefaultInstance() {
  ::hbase::pb::_FamilyFilter_default_instance_._instance.get_mutable()->compare_filter_ = const_cast< ::hbase::pb::CompareFilter*>(
      ::hbase::pb::CompareFilter::internal_default_instance());
}
class FamilyFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<FamilyFilter>()._has_bits_);
  static const ::hbase::pb::CompareFilter& compare_filter(const FamilyFilter* msg);
  static void set_has_compare_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::CompareFilter&
FamilyFilter::_Internal::compare_filter(const FamilyFilter* msg) {
  return *msg->compare_filter_;
}
FamilyFilter::FamilyFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FamilyFilter)
}
FamilyFilter::FamilyFilter(const FamilyFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compare_filter()) {
    compare_filter_ = new ::hbase::pb::CompareFilter(*from.compare_filter_);
  } else {
    compare_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FamilyFilter)
}

void FamilyFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FamilyFilter_Filter_2eproto.base);
  compare_filter_ = nullptr;
}

FamilyFilter::~FamilyFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.FamilyFilter)
  SharedDtor();
}

void FamilyFilter::SharedDtor() {
  if (this != internal_default_instance()) delete compare_filter_;
}

void FamilyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FamilyFilter& FamilyFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FamilyFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void FamilyFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FamilyFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(compare_filter_ != nullptr);
    compare_filter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FamilyFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_compare_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FamilyFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FamilyFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compare_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FamilyFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FamilyFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FamilyFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FamilyFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::compare_filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FamilyFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* FamilyFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FamilyFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::compare_filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FamilyFilter)
  return target;
}

size_t FamilyFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FamilyFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (has_compare_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compare_filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FamilyFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FamilyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const FamilyFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FamilyFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FamilyFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FamilyFilter)
    MergeFrom(*source);
  }
}

void FamilyFilter::MergeFrom(const FamilyFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FamilyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compare_filter()) {
    mutable_compare_filter()->::hbase::pb::CompareFilter::MergeFrom(from.compare_filter());
  }
}

void FamilyFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FamilyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyFilter::CopyFrom(const FamilyFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FamilyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FamilyFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_compare_filter()) {
    if (!this->compare_filter_->IsInitialized()) return false;
  }
  return true;
}

void FamilyFilter::InternalSwap(FamilyFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compare_filter_, other->compare_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FamilyFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilterList::InitAsDefaultInstance() {
}
class FilterList::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterList>()._has_bits_);
  static void set_has_operator_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FilterList::FilterList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FilterList)
}
FilterList::FilterList(const FilterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FilterList)
}

void FilterList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterList_Filter_2eproto.base);
  operator__ = 1;
}

FilterList::~FilterList() {
  // @@protoc_insertion_point(destructor:hbase.pb.FilterList)
  SharedDtor();
}

void FilterList::SharedDtor() {
}

void FilterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterList& FilterList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterList_Filter_2eproto.base);
  return *internal_default_instance();
}


void FilterList::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FilterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  operator__ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilterList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.FilterList.Operator operator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::FilterList_Operator_IsValid(val))) {
            set_operator_(static_cast<::hbase::pb::FilterList_Operator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.Filter filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilterList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FilterList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.FilterList.Operator operator = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::FilterList_Operator_IsValid(value)) {
            set_operator_(static_cast< ::hbase::pb::FilterList_Operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.Filter filters = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FilterList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FilterList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilterList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FilterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.FilterList.Operator operator = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->operator_(), output);
  }

  // repeated .hbase.pb.Filter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->filters(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FilterList)
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FilterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.FilterList.Operator operator = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->operator_(), target);
  }

  // repeated .hbase.pb.Filter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->filters(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FilterList)
  return target;
}

size_t FilterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FilterList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.FilterList.Operator operator = 1;
  if (has_operator_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operator_());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.Filter filters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FilterList)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FilterList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FilterList)
    MergeFrom(*source);
  }
}

void FilterList::MergeFrom(const FilterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FilterList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (from.has_operator_()) {
    set_operator_(from.operator_());
  }
}

void FilterList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FilterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterList::CopyFrom(const FilterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FilterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->filters())) return false;
  return true;
}

void FilterList::InternalSwap(FilterList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&filters_)->InternalSwap(CastToBase(&other->filters_));
  swap(operator__, other->operator__);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilterWrapper::InitAsDefaultInstance() {
  ::hbase::pb::_FilterWrapper_default_instance_._instance.get_mutable()->filter_ = const_cast< ::hbase::pb::Filter*>(
      ::hbase::pb::Filter::internal_default_instance());
}
class FilterWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterWrapper>()._has_bits_);
  static const ::hbase::pb::Filter& filter(const FilterWrapper* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::Filter&
FilterWrapper::_Internal::filter(const FilterWrapper* msg) {
  return *msg->filter_;
}
FilterWrapper::FilterWrapper()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FilterWrapper)
}
FilterWrapper::FilterWrapper(const FilterWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filter()) {
    filter_ = new ::hbase::pb::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FilterWrapper)
}

void FilterWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterWrapper_Filter_2eproto.base);
  filter_ = nullptr;
}

FilterWrapper::~FilterWrapper() {
  // @@protoc_insertion_point(destructor:hbase.pb.FilterWrapper)
  SharedDtor();
}

void FilterWrapper::SharedDtor() {
  if (this != internal_default_instance()) delete filter_;
}

void FilterWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterWrapper& FilterWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterWrapper_Filter_2eproto.base);
  return *internal_default_instance();
}


void FilterWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FilterWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(filter_ != nullptr);
    filter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilterWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.Filter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilterWrapper::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FilterWrapper)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.Filter filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FilterWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FilterWrapper)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilterWrapper::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FilterWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.Filter filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FilterWrapper)
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterWrapper::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FilterWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.Filter filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FilterWrapper)
  return target;
}

size_t FilterWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FilterWrapper)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.Filter filter = 1;
  if (has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FilterWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FilterWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FilterWrapper)
    MergeFrom(*source);
  }
}

void FilterWrapper::MergeFrom(const FilterWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FilterWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    mutable_filter()->::hbase::pb::Filter::MergeFrom(from.filter());
  }
}

void FilterWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FilterWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterWrapper::CopyFrom(const FilterWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FilterWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterWrapper::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_filter()) {
    if (!this->filter_->IsInitialized()) return false;
  }
  return true;
}

void FilterWrapper::InternalSwap(FilterWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirstKeyOnlyFilter::InitAsDefaultInstance() {
}
class FirstKeyOnlyFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<FirstKeyOnlyFilter>()._has_bits_);
};

FirstKeyOnlyFilter::FirstKeyOnlyFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FirstKeyOnlyFilter)
}
FirstKeyOnlyFilter::FirstKeyOnlyFilter(const FirstKeyOnlyFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FirstKeyOnlyFilter)
}

void FirstKeyOnlyFilter::SharedCtor() {
}

FirstKeyOnlyFilter::~FirstKeyOnlyFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.FirstKeyOnlyFilter)
  SharedDtor();
}

void FirstKeyOnlyFilter::SharedDtor() {
}

void FirstKeyOnlyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirstKeyOnlyFilter& FirstKeyOnlyFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirstKeyOnlyFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void FirstKeyOnlyFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FirstKeyOnlyFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FirstKeyOnlyFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FirstKeyOnlyFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FirstKeyOnlyFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FirstKeyOnlyFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FirstKeyOnlyFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FirstKeyOnlyFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FirstKeyOnlyFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FirstKeyOnlyFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* FirstKeyOnlyFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FirstKeyOnlyFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FirstKeyOnlyFilter)
  return target;
}

size_t FirstKeyOnlyFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FirstKeyOnlyFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirstKeyOnlyFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FirstKeyOnlyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const FirstKeyOnlyFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirstKeyOnlyFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FirstKeyOnlyFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FirstKeyOnlyFilter)
    MergeFrom(*source);
  }
}

void FirstKeyOnlyFilter::MergeFrom(const FirstKeyOnlyFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FirstKeyOnlyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FirstKeyOnlyFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FirstKeyOnlyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstKeyOnlyFilter::CopyFrom(const FirstKeyOnlyFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FirstKeyOnlyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstKeyOnlyFilter::IsInitialized() const {
  return true;
}

void FirstKeyOnlyFilter::InternalSwap(FirstKeyOnlyFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirstKeyOnlyFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirstKeyValueMatchingQualifiersFilter::InitAsDefaultInstance() {
}
class FirstKeyValueMatchingQualifiersFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<FirstKeyValueMatchingQualifiersFilter>()._has_bits_);
};

FirstKeyValueMatchingQualifiersFilter::FirstKeyValueMatchingQualifiersFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
}
FirstKeyValueMatchingQualifiersFilter::FirstKeyValueMatchingQualifiersFilter(const FirstKeyValueMatchingQualifiersFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      qualifiers_(from.qualifiers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
}

void FirstKeyValueMatchingQualifiersFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirstKeyValueMatchingQualifiersFilter_Filter_2eproto.base);
}

FirstKeyValueMatchingQualifiersFilter::~FirstKeyValueMatchingQualifiersFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  SharedDtor();
}

void FirstKeyValueMatchingQualifiersFilter::SharedDtor() {
}

void FirstKeyValueMatchingQualifiersFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirstKeyValueMatchingQualifiersFilter& FirstKeyValueMatchingQualifiersFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirstKeyValueMatchingQualifiersFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void FirstKeyValueMatchingQualifiersFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qualifiers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FirstKeyValueMatchingQualifiersFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes qualifiers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_qualifiers(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FirstKeyValueMatchingQualifiersFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes qualifiers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_qualifiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FirstKeyValueMatchingQualifiersFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes qualifiers = 1;
  for (int i = 0, n = this->qualifiers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->qualifiers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* FirstKeyValueMatchingQualifiersFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes qualifiers = 1;
  for (int i = 0, n = this->qualifiers_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->qualifiers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  return target;
}

size_t FirstKeyValueMatchingQualifiersFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes qualifiers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->qualifiers_size());
  for (int i = 0, n = this->qualifiers_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->qualifiers(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirstKeyValueMatchingQualifiersFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const FirstKeyValueMatchingQualifiersFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirstKeyValueMatchingQualifiersFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
    MergeFrom(*source);
  }
}

void FirstKeyValueMatchingQualifiersFilter::MergeFrom(const FirstKeyValueMatchingQualifiersFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qualifiers_.MergeFrom(from.qualifiers_);
}

void FirstKeyValueMatchingQualifiersFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstKeyValueMatchingQualifiersFilter::CopyFrom(const FirstKeyValueMatchingQualifiersFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FirstKeyValueMatchingQualifiersFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstKeyValueMatchingQualifiersFilter::IsInitialized() const {
  return true;
}

void FirstKeyValueMatchingQualifiersFilter::InternalSwap(FirstKeyValueMatchingQualifiersFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  qualifiers_.InternalSwap(CastToBase(&other->qualifiers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirstKeyValueMatchingQualifiersFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FuzzyRowFilter::InitAsDefaultInstance() {
}
class FuzzyRowFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<FuzzyRowFilter>()._has_bits_);
};

void FuzzyRowFilter::clear_fuzzy_keys_data() {
  fuzzy_keys_data_.Clear();
}
FuzzyRowFilter::FuzzyRowFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FuzzyRowFilter)
}
FuzzyRowFilter::FuzzyRowFilter(const FuzzyRowFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      fuzzy_keys_data_(from.fuzzy_keys_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FuzzyRowFilter)
}

void FuzzyRowFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FuzzyRowFilter_Filter_2eproto.base);
}

FuzzyRowFilter::~FuzzyRowFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.FuzzyRowFilter)
  SharedDtor();
}

void FuzzyRowFilter::SharedDtor() {
}

void FuzzyRowFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FuzzyRowFilter& FuzzyRowFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FuzzyRowFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void FuzzyRowFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FuzzyRowFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fuzzy_keys_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FuzzyRowFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.BytesBytesPair fuzzy_keys_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_fuzzy_keys_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FuzzyRowFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FuzzyRowFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.BytesBytesPair fuzzy_keys_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_fuzzy_keys_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FuzzyRowFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FuzzyRowFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FuzzyRowFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FuzzyRowFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.BytesBytesPair fuzzy_keys_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fuzzy_keys_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->fuzzy_keys_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FuzzyRowFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* FuzzyRowFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FuzzyRowFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.BytesBytesPair fuzzy_keys_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fuzzy_keys_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fuzzy_keys_data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FuzzyRowFilter)
  return target;
}

size_t FuzzyRowFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FuzzyRowFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.BytesBytesPair fuzzy_keys_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fuzzy_keys_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->fuzzy_keys_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuzzyRowFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FuzzyRowFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const FuzzyRowFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FuzzyRowFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FuzzyRowFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FuzzyRowFilter)
    MergeFrom(*source);
  }
}

void FuzzyRowFilter::MergeFrom(const FuzzyRowFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FuzzyRowFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fuzzy_keys_data_.MergeFrom(from.fuzzy_keys_data_);
}

void FuzzyRowFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FuzzyRowFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuzzyRowFilter::CopyFrom(const FuzzyRowFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FuzzyRowFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuzzyRowFilter::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->fuzzy_keys_data())) return false;
  return true;
}

void FuzzyRowFilter::InternalSwap(FuzzyRowFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&fuzzy_keys_data_)->InternalSwap(CastToBase(&other->fuzzy_keys_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FuzzyRowFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InclusiveStopFilter::InitAsDefaultInstance() {
}
class InclusiveStopFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<InclusiveStopFilter>()._has_bits_);
  static void set_has_stop_row_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InclusiveStopFilter::InclusiveStopFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.InclusiveStopFilter)
}
InclusiveStopFilter::InclusiveStopFilter(const InclusiveStopFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stop_row_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_stop_row_key()) {
    stop_row_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_row_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.InclusiveStopFilter)
}

void InclusiveStopFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InclusiveStopFilter_Filter_2eproto.base);
  stop_row_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InclusiveStopFilter::~InclusiveStopFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.InclusiveStopFilter)
  SharedDtor();
}

void InclusiveStopFilter::SharedDtor() {
  stop_row_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InclusiveStopFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InclusiveStopFilter& InclusiveStopFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InclusiveStopFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void InclusiveStopFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.InclusiveStopFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stop_row_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InclusiveStopFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes stop_row_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_stop_row_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InclusiveStopFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.InclusiveStopFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes stop_row_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stop_row_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.InclusiveStopFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.InclusiveStopFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InclusiveStopFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.InclusiveStopFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes stop_row_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->stop_row_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.InclusiveStopFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* InclusiveStopFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.InclusiveStopFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes stop_row_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->stop_row_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.InclusiveStopFilter)
  return target;
}

size_t InclusiveStopFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.InclusiveStopFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes stop_row_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->stop_row_key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InclusiveStopFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.InclusiveStopFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const InclusiveStopFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InclusiveStopFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.InclusiveStopFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.InclusiveStopFilter)
    MergeFrom(*source);
  }
}

void InclusiveStopFilter::MergeFrom(const InclusiveStopFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.InclusiveStopFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stop_row_key()) {
    _has_bits_[0] |= 0x00000001u;
    stop_row_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_row_key_);
  }
}

void InclusiveStopFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.InclusiveStopFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InclusiveStopFilter::CopyFrom(const InclusiveStopFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.InclusiveStopFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InclusiveStopFilter::IsInitialized() const {
  return true;
}

void InclusiveStopFilter::InternalSwap(InclusiveStopFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stop_row_key_.Swap(&other->stop_row_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InclusiveStopFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyOnlyFilter::InitAsDefaultInstance() {
}
class KeyOnlyFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyOnlyFilter>()._has_bits_);
  static void set_has_len_as_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KeyOnlyFilter::KeyOnlyFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.KeyOnlyFilter)
}
KeyOnlyFilter::KeyOnlyFilter(const KeyOnlyFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  len_as_val_ = from.len_as_val_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.KeyOnlyFilter)
}

void KeyOnlyFilter::SharedCtor() {
  len_as_val_ = false;
}

KeyOnlyFilter::~KeyOnlyFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.KeyOnlyFilter)
  SharedDtor();
}

void KeyOnlyFilter::SharedDtor() {
}

void KeyOnlyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyOnlyFilter& KeyOnlyFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyOnlyFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void KeyOnlyFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.KeyOnlyFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  len_as_val_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeyOnlyFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool len_as_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_len_as_val(&has_bits);
          len_as_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeyOnlyFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.KeyOnlyFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool len_as_val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_len_as_val(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &len_as_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.KeyOnlyFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.KeyOnlyFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeyOnlyFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.KeyOnlyFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool len_as_val = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->len_as_val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.KeyOnlyFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyOnlyFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.KeyOnlyFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool len_as_val = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->len_as_val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.KeyOnlyFilter)
  return target;
}

size_t KeyOnlyFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.KeyOnlyFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool len_as_val = 1;
  if (has_len_as_val()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyOnlyFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.KeyOnlyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyOnlyFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyOnlyFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.KeyOnlyFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.KeyOnlyFilter)
    MergeFrom(*source);
  }
}

void KeyOnlyFilter::MergeFrom(const KeyOnlyFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.KeyOnlyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_len_as_val()) {
    set_len_as_val(from.len_as_val());
  }
}

void KeyOnlyFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.KeyOnlyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyOnlyFilter::CopyFrom(const KeyOnlyFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.KeyOnlyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyOnlyFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void KeyOnlyFilter::InternalSwap(KeyOnlyFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(len_as_val_, other->len_as_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyOnlyFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultipleColumnPrefixFilter::InitAsDefaultInstance() {
}
class MultipleColumnPrefixFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<MultipleColumnPrefixFilter>()._has_bits_);
};

MultipleColumnPrefixFilter::MultipleColumnPrefixFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MultipleColumnPrefixFilter)
}
MultipleColumnPrefixFilter::MultipleColumnPrefixFilter(const MultipleColumnPrefixFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sorted_prefixes_(from.sorted_prefixes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MultipleColumnPrefixFilter)
}

void MultipleColumnPrefixFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultipleColumnPrefixFilter_Filter_2eproto.base);
}

MultipleColumnPrefixFilter::~MultipleColumnPrefixFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.MultipleColumnPrefixFilter)
  SharedDtor();
}

void MultipleColumnPrefixFilter::SharedDtor() {
}

void MultipleColumnPrefixFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultipleColumnPrefixFilter& MultipleColumnPrefixFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultipleColumnPrefixFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void MultipleColumnPrefixFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MultipleColumnPrefixFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sorted_prefixes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultipleColumnPrefixFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes sorted_prefixes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_sorted_prefixes(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultipleColumnPrefixFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MultipleColumnPrefixFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes sorted_prefixes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_sorted_prefixes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MultipleColumnPrefixFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MultipleColumnPrefixFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultipleColumnPrefixFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MultipleColumnPrefixFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes sorted_prefixes = 1;
  for (int i = 0, n = this->sorted_prefixes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->sorted_prefixes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MultipleColumnPrefixFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultipleColumnPrefixFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MultipleColumnPrefixFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes sorted_prefixes = 1;
  for (int i = 0, n = this->sorted_prefixes_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->sorted_prefixes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MultipleColumnPrefixFilter)
  return target;
}

size_t MultipleColumnPrefixFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MultipleColumnPrefixFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes sorted_prefixes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->sorted_prefixes_size());
  for (int i = 0, n = this->sorted_prefixes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->sorted_prefixes(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipleColumnPrefixFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MultipleColumnPrefixFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const MultipleColumnPrefixFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultipleColumnPrefixFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MultipleColumnPrefixFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MultipleColumnPrefixFilter)
    MergeFrom(*source);
  }
}

void MultipleColumnPrefixFilter::MergeFrom(const MultipleColumnPrefixFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MultipleColumnPrefixFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sorted_prefixes_.MergeFrom(from.sorted_prefixes_);
}

void MultipleColumnPrefixFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MultipleColumnPrefixFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipleColumnPrefixFilter::CopyFrom(const MultipleColumnPrefixFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MultipleColumnPrefixFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipleColumnPrefixFilter::IsInitialized() const {
  return true;
}

void MultipleColumnPrefixFilter::InternalSwap(MultipleColumnPrefixFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sorted_prefixes_.InternalSwap(CastToBase(&other->sorted_prefixes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultipleColumnPrefixFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PageFilter::InitAsDefaultInstance() {
}
class PageFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<PageFilter>()._has_bits_);
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PageFilter::PageFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.PageFilter)
}
PageFilter::PageFilter(const PageFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.PageFilter)
}

void PageFilter::SharedCtor() {
  page_size_ = PROTOBUF_LONGLONG(0);
}

PageFilter::~PageFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.PageFilter)
  SharedDtor();
}

void PageFilter::SharedDtor() {
}

void PageFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PageFilter& PageFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PageFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void PageFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.PageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PageFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page_size(&has_bits);
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PageFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.PageFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 page_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_page_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.PageFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.PageFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PageFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.PageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 page_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->page_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.PageFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* PageFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.PageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 page_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->page_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.PageFilter)
  return target;
}

size_t PageFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.PageFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 page_size = 1;
  if (has_page_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->page_size());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.PageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const PageFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PageFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.PageFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.PageFilter)
    MergeFrom(*source);
  }
}

void PageFilter::MergeFrom(const PageFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.PageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_page_size()) {
    set_page_size(from.page_size());
  }
}

void PageFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.PageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageFilter::CopyFrom(const PageFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.PageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PageFilter::InternalSwap(PageFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PageFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrefixFilter::InitAsDefaultInstance() {
}
class PrefixFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<PrefixFilter>()._has_bits_);
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PrefixFilter::PrefixFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.PrefixFilter)
}
PrefixFilter::PrefixFilter(const PrefixFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.PrefixFilter)
}

void PrefixFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrefixFilter_Filter_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrefixFilter::~PrefixFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.PrefixFilter)
  SharedDtor();
}

void PrefixFilter::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrefixFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrefixFilter& PrefixFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrefixFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void PrefixFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.PrefixFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    prefix_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrefixFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_prefix(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrefixFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.PrefixFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes prefix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.PrefixFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.PrefixFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrefixFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.PrefixFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->prefix(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.PrefixFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* PrefixFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.PrefixFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->prefix(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.PrefixFilter)
  return target;
}

size_t PrefixFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.PrefixFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes prefix = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->prefix());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrefixFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.PrefixFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const PrefixFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrefixFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.PrefixFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.PrefixFilter)
    MergeFrom(*source);
  }
}

void PrefixFilter::MergeFrom(const PrefixFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.PrefixFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prefix()) {
    _has_bits_[0] |= 0x00000001u;
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
}

void PrefixFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.PrefixFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrefixFilter::CopyFrom(const PrefixFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.PrefixFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefixFilter::IsInitialized() const {
  return true;
}

void PrefixFilter::InternalSwap(PrefixFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefixFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QualifierFilter::InitAsDefaultInstance() {
  ::hbase::pb::_QualifierFilter_default_instance_._instance.get_mutable()->compare_filter_ = const_cast< ::hbase::pb::CompareFilter*>(
      ::hbase::pb::CompareFilter::internal_default_instance());
}
class QualifierFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<QualifierFilter>()._has_bits_);
  static const ::hbase::pb::CompareFilter& compare_filter(const QualifierFilter* msg);
  static void set_has_compare_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::CompareFilter&
QualifierFilter::_Internal::compare_filter(const QualifierFilter* msg) {
  return *msg->compare_filter_;
}
QualifierFilter::QualifierFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.QualifierFilter)
}
QualifierFilter::QualifierFilter(const QualifierFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compare_filter()) {
    compare_filter_ = new ::hbase::pb::CompareFilter(*from.compare_filter_);
  } else {
    compare_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.QualifierFilter)
}

void QualifierFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QualifierFilter_Filter_2eproto.base);
  compare_filter_ = nullptr;
}

QualifierFilter::~QualifierFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.QualifierFilter)
  SharedDtor();
}

void QualifierFilter::SharedDtor() {
  if (this != internal_default_instance()) delete compare_filter_;
}

void QualifierFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QualifierFilter& QualifierFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QualifierFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void QualifierFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.QualifierFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(compare_filter_ != nullptr);
    compare_filter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QualifierFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_compare_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QualifierFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.QualifierFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compare_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.QualifierFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.QualifierFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QualifierFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.QualifierFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::compare_filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.QualifierFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* QualifierFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.QualifierFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::compare_filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.QualifierFilter)
  return target;
}

size_t QualifierFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.QualifierFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (has_compare_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compare_filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QualifierFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.QualifierFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const QualifierFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QualifierFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.QualifierFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.QualifierFilter)
    MergeFrom(*source);
  }
}

void QualifierFilter::MergeFrom(const QualifierFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.QualifierFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compare_filter()) {
    mutable_compare_filter()->::hbase::pb::CompareFilter::MergeFrom(from.compare_filter());
  }
}

void QualifierFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.QualifierFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualifierFilter::CopyFrom(const QualifierFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.QualifierFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualifierFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_compare_filter()) {
    if (!this->compare_filter_->IsInitialized()) return false;
  }
  return true;
}

void QualifierFilter::InternalSwap(QualifierFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compare_filter_, other->compare_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QualifierFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RandomRowFilter::InitAsDefaultInstance() {
}
class RandomRowFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<RandomRowFilter>()._has_bits_);
  static void set_has_chance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RandomRowFilter::RandomRowFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RandomRowFilter)
}
RandomRowFilter::RandomRowFilter(const RandomRowFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chance_ = from.chance_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RandomRowFilter)
}

void RandomRowFilter::SharedCtor() {
  chance_ = 0;
}

RandomRowFilter::~RandomRowFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.RandomRowFilter)
  SharedDtor();
}

void RandomRowFilter::SharedDtor() {
}

void RandomRowFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RandomRowFilter& RandomRowFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RandomRowFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void RandomRowFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RandomRowFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RandomRowFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float chance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_chance(&has_bits);
          chance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RandomRowFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RandomRowFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float chance = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_chance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RandomRowFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RandomRowFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RandomRowFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RandomRowFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float chance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->chance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RandomRowFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* RandomRowFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RandomRowFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float chance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->chance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RandomRowFilter)
  return target;
}

size_t RandomRowFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RandomRowFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float chance = 1;
  if (has_chance()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RandomRowFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RandomRowFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomRowFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RandomRowFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RandomRowFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RandomRowFilter)
    MergeFrom(*source);
  }
}

void RandomRowFilter::MergeFrom(const RandomRowFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RandomRowFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chance()) {
    set_chance(from.chance());
  }
}

void RandomRowFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RandomRowFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomRowFilter::CopyFrom(const RandomRowFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RandomRowFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomRowFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RandomRowFilter::InternalSwap(RandomRowFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chance_, other->chance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomRowFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RowFilter::InitAsDefaultInstance() {
  ::hbase::pb::_RowFilter_default_instance_._instance.get_mutable()->compare_filter_ = const_cast< ::hbase::pb::CompareFilter*>(
      ::hbase::pb::CompareFilter::internal_default_instance());
}
class RowFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<RowFilter>()._has_bits_);
  static const ::hbase::pb::CompareFilter& compare_filter(const RowFilter* msg);
  static void set_has_compare_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::CompareFilter&
RowFilter::_Internal::compare_filter(const RowFilter* msg) {
  return *msg->compare_filter_;
}
RowFilter::RowFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RowFilter)
}
RowFilter::RowFilter(const RowFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compare_filter()) {
    compare_filter_ = new ::hbase::pb::CompareFilter(*from.compare_filter_);
  } else {
    compare_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RowFilter)
}

void RowFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RowFilter_Filter_2eproto.base);
  compare_filter_ = nullptr;
}

RowFilter::~RowFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.RowFilter)
  SharedDtor();
}

void RowFilter::SharedDtor() {
  if (this != internal_default_instance()) delete compare_filter_;
}

void RowFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RowFilter& RowFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RowFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void RowFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RowFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(compare_filter_ != nullptr);
    compare_filter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RowFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_compare_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RowFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RowFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compare_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RowFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RowFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RowFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RowFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::compare_filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RowFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* RowFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RowFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::compare_filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RowFilter)
  return target;
}

size_t RowFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RowFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (has_compare_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compare_filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RowFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RowFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const RowFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RowFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RowFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RowFilter)
    MergeFrom(*source);
  }
}

void RowFilter::MergeFrom(const RowFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RowFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compare_filter()) {
    mutable_compare_filter()->::hbase::pb::CompareFilter::MergeFrom(from.compare_filter());
  }
}

void RowFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RowFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowFilter::CopyFrom(const RowFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RowFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_compare_filter()) {
    if (!this->compare_filter_->IsInitialized()) return false;
  }
  return true;
}

void RowFilter::InternalSwap(RowFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compare_filter_, other->compare_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RowFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleColumnValueExcludeFilter::InitAsDefaultInstance() {
  ::hbase::pb::_SingleColumnValueExcludeFilter_default_instance_._instance.get_mutable()->single_column_value_filter_ = const_cast< ::hbase::pb::SingleColumnValueFilter*>(
      ::hbase::pb::SingleColumnValueFilter::internal_default_instance());
}
class SingleColumnValueExcludeFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleColumnValueExcludeFilter>()._has_bits_);
  static const ::hbase::pb::SingleColumnValueFilter& single_column_value_filter(const SingleColumnValueExcludeFilter* msg);
  static void set_has_single_column_value_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::SingleColumnValueFilter&
SingleColumnValueExcludeFilter::_Internal::single_column_value_filter(const SingleColumnValueExcludeFilter* msg) {
  return *msg->single_column_value_filter_;
}
SingleColumnValueExcludeFilter::SingleColumnValueExcludeFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SingleColumnValueExcludeFilter)
}
SingleColumnValueExcludeFilter::SingleColumnValueExcludeFilter(const SingleColumnValueExcludeFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_single_column_value_filter()) {
    single_column_value_filter_ = new ::hbase::pb::SingleColumnValueFilter(*from.single_column_value_filter_);
  } else {
    single_column_value_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SingleColumnValueExcludeFilter)
}

void SingleColumnValueExcludeFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleColumnValueExcludeFilter_Filter_2eproto.base);
  single_column_value_filter_ = nullptr;
}

SingleColumnValueExcludeFilter::~SingleColumnValueExcludeFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.SingleColumnValueExcludeFilter)
  SharedDtor();
}

void SingleColumnValueExcludeFilter::SharedDtor() {
  if (this != internal_default_instance()) delete single_column_value_filter_;
}

void SingleColumnValueExcludeFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleColumnValueExcludeFilter& SingleColumnValueExcludeFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleColumnValueExcludeFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void SingleColumnValueExcludeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SingleColumnValueExcludeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(single_column_value_filter_ != nullptr);
    single_column_value_filter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SingleColumnValueExcludeFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.SingleColumnValueFilter single_column_value_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_single_column_value_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SingleColumnValueExcludeFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SingleColumnValueExcludeFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.SingleColumnValueFilter single_column_value_filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_single_column_value_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SingleColumnValueExcludeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SingleColumnValueExcludeFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SingleColumnValueExcludeFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SingleColumnValueExcludeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.SingleColumnValueFilter single_column_value_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::single_column_value_filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SingleColumnValueExcludeFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleColumnValueExcludeFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SingleColumnValueExcludeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.SingleColumnValueFilter single_column_value_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::single_column_value_filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SingleColumnValueExcludeFilter)
  return target;
}

size_t SingleColumnValueExcludeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SingleColumnValueExcludeFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.SingleColumnValueFilter single_column_value_filter = 1;
  if (has_single_column_value_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_column_value_filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleColumnValueExcludeFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SingleColumnValueExcludeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleColumnValueExcludeFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleColumnValueExcludeFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SingleColumnValueExcludeFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SingleColumnValueExcludeFilter)
    MergeFrom(*source);
  }
}

void SingleColumnValueExcludeFilter::MergeFrom(const SingleColumnValueExcludeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SingleColumnValueExcludeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_single_column_value_filter()) {
    mutable_single_column_value_filter()->::hbase::pb::SingleColumnValueFilter::MergeFrom(from.single_column_value_filter());
  }
}

void SingleColumnValueExcludeFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SingleColumnValueExcludeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleColumnValueExcludeFilter::CopyFrom(const SingleColumnValueExcludeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SingleColumnValueExcludeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleColumnValueExcludeFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_single_column_value_filter()) {
    if (!this->single_column_value_filter_->IsInitialized()) return false;
  }
  return true;
}

void SingleColumnValueExcludeFilter::InternalSwap(SingleColumnValueExcludeFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(single_column_value_filter_, other->single_column_value_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleColumnValueExcludeFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleColumnValueFilter::InitAsDefaultInstance() {
  ::hbase::pb::_SingleColumnValueFilter_default_instance_._instance.get_mutable()->comparator_ = const_cast< ::hbase::pb::Comparator*>(
      ::hbase::pb::Comparator::internal_default_instance());
}
class SingleColumnValueFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleColumnValueFilter>()._has_bits_);
  static void set_has_column_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compare_op(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hbase::pb::Comparator& comparator(const SingleColumnValueFilter* msg);
  static void set_has_comparator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filter_if_missing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_latest_version_only(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::hbase::pb::Comparator&
SingleColumnValueFilter::_Internal::comparator(const SingleColumnValueFilter* msg) {
  return *msg->comparator_;
}
void SingleColumnValueFilter::clear_comparator() {
  if (comparator_ != nullptr) comparator_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SingleColumnValueFilter::SingleColumnValueFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SingleColumnValueFilter)
}
SingleColumnValueFilter::SingleColumnValueFilter(const SingleColumnValueFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_family()) {
    column_family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_family_);
  }
  column_qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_qualifier()) {
    column_qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_qualifier_);
  }
  if (from.has_comparator()) {
    comparator_ = new ::hbase::pb::Comparator(*from.comparator_);
  } else {
    comparator_ = nullptr;
  }
  ::memcpy(&compare_op_, &from.compare_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_version_only_) -
    reinterpret_cast<char*>(&compare_op_)) + sizeof(latest_version_only_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SingleColumnValueFilter)
}

void SingleColumnValueFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleColumnValueFilter_Filter_2eproto.base);
  column_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&comparator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_version_only_) -
      reinterpret_cast<char*>(&comparator_)) + sizeof(latest_version_only_));
}

SingleColumnValueFilter::~SingleColumnValueFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.SingleColumnValueFilter)
  SharedDtor();
}

void SingleColumnValueFilter::SharedDtor() {
  column_family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  column_qualifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete comparator_;
}

void SingleColumnValueFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleColumnValueFilter& SingleColumnValueFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleColumnValueFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void SingleColumnValueFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SingleColumnValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      column_family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      column_qualifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(comparator_ != nullptr);
      comparator_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&compare_op_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latest_version_only_) -
        reinterpret_cast<char*>(&compare_op_)) + sizeof(latest_version_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SingleColumnValueFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes column_family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_column_family(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes column_qualifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_column_qualifier(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.CompareType compare_op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::CompareType_IsValid(val))) {
            set_compare_op(static_cast<::hbase::pb::CompareType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.Comparator comparator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_comparator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool filter_if_missing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_filter_if_missing(&has_bits);
          filter_if_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool latest_version_only = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_latest_version_only(&has_bits);
          latest_version_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SingleColumnValueFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SingleColumnValueFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes column_family = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes column_qualifier = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_column_qualifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.CompareType compare_op = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::CompareType_IsValid(value)) {
            set_compare_op(static_cast< ::hbase::pb::CompareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.Comparator comparator = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_comparator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filter_if_missing = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_filter_if_missing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_if_missing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool latest_version_only = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_latest_version_only(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &latest_version_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SingleColumnValueFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SingleColumnValueFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SingleColumnValueFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SingleColumnValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes column_family = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->column_family(), output);
  }

  // optional bytes column_qualifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->column_qualifier(), output);
  }

  // required .hbase.pb.CompareType compare_op = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->compare_op(), output);
  }

  // required .hbase.pb.Comparator comparator = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::comparator(this), output);
  }

  // optional bool filter_if_missing = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->filter_if_missing(), output);
  }

  // optional bool latest_version_only = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->latest_version_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SingleColumnValueFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleColumnValueFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SingleColumnValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes column_family = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->column_family(), target);
  }

  // optional bytes column_qualifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->column_qualifier(), target);
  }

  // required .hbase.pb.CompareType compare_op = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->compare_op(), target);
  }

  // required .hbase.pb.Comparator comparator = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::comparator(this), target);
  }

  // optional bool filter_if_missing = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->filter_if_missing(), target);
  }

  // optional bool latest_version_only = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->latest_version_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SingleColumnValueFilter)
  return target;
}

size_t SingleColumnValueFilter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.SingleColumnValueFilter)
  size_t total_size = 0;

  if (has_comparator()) {
    // required .hbase.pb.Comparator comparator = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparator_);
  }

  if (has_compare_op()) {
    // required .hbase.pb.CompareType compare_op = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare_op());
  }

  return total_size;
}
size_t SingleColumnValueFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SingleColumnValueFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required .hbase.pb.Comparator comparator = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparator_);

    // required .hbase.pb.CompareType compare_op = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare_op());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes column_family = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->column_family());
    }

    // optional bytes column_qualifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->column_qualifier());
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional bool filter_if_missing = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool latest_version_only = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleColumnValueFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SingleColumnValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleColumnValueFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleColumnValueFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SingleColumnValueFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SingleColumnValueFilter)
    MergeFrom(*source);
  }
}

void SingleColumnValueFilter::MergeFrom(const SingleColumnValueFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SingleColumnValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      column_family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_family_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      column_qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.column_qualifier_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_comparator()->::hbase::pb::Comparator::MergeFrom(from.comparator());
    }
    if (cached_has_bits & 0x00000008u) {
      compare_op_ = from.compare_op_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_if_missing_ = from.filter_if_missing_;
    }
    if (cached_has_bits & 0x00000020u) {
      latest_version_only_ = from.latest_version_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SingleColumnValueFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SingleColumnValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleColumnValueFilter::CopyFrom(const SingleColumnValueFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SingleColumnValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleColumnValueFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_comparator()) {
    if (!this->comparator_->IsInitialized()) return false;
  }
  return true;
}

void SingleColumnValueFilter::InternalSwap(SingleColumnValueFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  column_family_.Swap(&other->column_family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  column_qualifier_.Swap(&other->column_qualifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(comparator_, other->comparator_);
  swap(compare_op_, other->compare_op_);
  swap(filter_if_missing_, other->filter_if_missing_);
  swap(latest_version_only_, other->latest_version_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleColumnValueFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SkipFilter::InitAsDefaultInstance() {
  ::hbase::pb::_SkipFilter_default_instance_._instance.get_mutable()->filter_ = const_cast< ::hbase::pb::Filter*>(
      ::hbase::pb::Filter::internal_default_instance());
}
class SkipFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<SkipFilter>()._has_bits_);
  static const ::hbase::pb::Filter& filter(const SkipFilter* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::Filter&
SkipFilter::_Internal::filter(const SkipFilter* msg) {
  return *msg->filter_;
}
SkipFilter::SkipFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SkipFilter)
}
SkipFilter::SkipFilter(const SkipFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filter()) {
    filter_ = new ::hbase::pb::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SkipFilter)
}

void SkipFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SkipFilter_Filter_2eproto.base);
  filter_ = nullptr;
}

SkipFilter::~SkipFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.SkipFilter)
  SharedDtor();
}

void SkipFilter::SharedDtor() {
  if (this != internal_default_instance()) delete filter_;
}

void SkipFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SkipFilter& SkipFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SkipFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void SkipFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SkipFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(filter_ != nullptr);
    filter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SkipFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.Filter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SkipFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SkipFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.Filter filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SkipFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SkipFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SkipFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SkipFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.Filter filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SkipFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* SkipFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SkipFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.Filter filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SkipFilter)
  return target;
}

size_t SkipFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SkipFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.Filter filter = 1;
  if (has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SkipFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SkipFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const SkipFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SkipFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SkipFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SkipFilter)
    MergeFrom(*source);
  }
}

void SkipFilter::MergeFrom(const SkipFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SkipFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    mutable_filter()->::hbase::pb::Filter::MergeFrom(from.filter());
  }
}

void SkipFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SkipFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkipFilter::CopyFrom(const SkipFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SkipFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_filter()) {
    if (!this->filter_->IsInitialized()) return false;
  }
  return true;
}

void SkipFilter::InternalSwap(SkipFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkipFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimestampsFilter::InitAsDefaultInstance() {
}
class TimestampsFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<TimestampsFilter>()._has_bits_);
  static void set_has_can_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TimestampsFilter::TimestampsFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.TimestampsFilter)
}
TimestampsFilter::TimestampsFilter(const TimestampsFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      timestamps_(from.timestamps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  can_hint_ = from.can_hint_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.TimestampsFilter)
}

void TimestampsFilter::SharedCtor() {
  can_hint_ = false;
}

TimestampsFilter::~TimestampsFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.TimestampsFilter)
  SharedDtor();
}

void TimestampsFilter::SharedDtor() {
}

void TimestampsFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimestampsFilter& TimestampsFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimestampsFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void TimestampsFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.TimestampsFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamps_.Clear();
  can_hint_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimestampsFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 timestamps = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_timestamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_timestamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_hint(&has_bits);
          can_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimestampsFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.TimestampsFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 timestamps = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_timestamps())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_timestamps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_hint = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_can_hint(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_hint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.TimestampsFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.TimestampsFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimestampsFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.TimestampsFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 timestamps = 1 [packed = true];
  if (this->timestamps_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_timestamps_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->timestamps_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->timestamps(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool can_hint = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->can_hint(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.TimestampsFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* TimestampsFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.TimestampsFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 timestamps = 1 [packed = true];
  if (this->timestamps_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _timestamps_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->timestamps_, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool can_hint = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->can_hint(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.TimestampsFilter)
  return target;
}

size_t TimestampsFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.TimestampsFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 timestamps = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->timestamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _timestamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional bool can_hint = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimestampsFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.TimestampsFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TimestampsFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimestampsFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.TimestampsFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.TimestampsFilter)
    MergeFrom(*source);
  }
}

void TimestampsFilter::MergeFrom(const TimestampsFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.TimestampsFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timestamps_.MergeFrom(from.timestamps_);
  if (from.has_can_hint()) {
    set_can_hint(from.can_hint());
  }
}

void TimestampsFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.TimestampsFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampsFilter::CopyFrom(const TimestampsFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.TimestampsFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampsFilter::IsInitialized() const {
  return true;
}

void TimestampsFilter::InternalSwap(TimestampsFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamps_.InternalSwap(&other->timestamps_);
  swap(can_hint_, other->can_hint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampsFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValueFilter::InitAsDefaultInstance() {
  ::hbase::pb::_ValueFilter_default_instance_._instance.get_mutable()->compare_filter_ = const_cast< ::hbase::pb::CompareFilter*>(
      ::hbase::pb::CompareFilter::internal_default_instance());
}
class ValueFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<ValueFilter>()._has_bits_);
  static const ::hbase::pb::CompareFilter& compare_filter(const ValueFilter* msg);
  static void set_has_compare_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::CompareFilter&
ValueFilter::_Internal::compare_filter(const ValueFilter* msg) {
  return *msg->compare_filter_;
}
ValueFilter::ValueFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ValueFilter)
}
ValueFilter::ValueFilter(const ValueFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compare_filter()) {
    compare_filter_ = new ::hbase::pb::CompareFilter(*from.compare_filter_);
  } else {
    compare_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ValueFilter)
}

void ValueFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValueFilter_Filter_2eproto.base);
  compare_filter_ = nullptr;
}

ValueFilter::~ValueFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.ValueFilter)
  SharedDtor();
}

void ValueFilter::SharedDtor() {
  if (this != internal_default_instance()) delete compare_filter_;
}

void ValueFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValueFilter& ValueFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValueFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void ValueFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(compare_filter_ != nullptr);
    compare_filter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ValueFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_compare_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ValueFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ValueFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.CompareFilter compare_filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compare_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ValueFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ValueFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ValueFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::compare_filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ValueFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::compare_filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ValueFilter)
  return target;
}

size_t ValueFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ValueFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.CompareFilter compare_filter = 1;
  if (has_compare_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compare_filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValueFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ValueFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ValueFilter)
    MergeFrom(*source);
  }
}

void ValueFilter::MergeFrom(const ValueFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compare_filter()) {
    mutable_compare_filter()->::hbase::pb::CompareFilter::MergeFrom(from.compare_filter());
  }
}

void ValueFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueFilter::CopyFrom(const ValueFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_compare_filter()) {
    if (!this->compare_filter_->IsInitialized()) return false;
  }
  return true;
}

void ValueFilter::InternalSwap(ValueFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compare_filter_, other->compare_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WhileMatchFilter::InitAsDefaultInstance() {
  ::hbase::pb::_WhileMatchFilter_default_instance_._instance.get_mutable()->filter_ = const_cast< ::hbase::pb::Filter*>(
      ::hbase::pb::Filter::internal_default_instance());
}
class WhileMatchFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<WhileMatchFilter>()._has_bits_);
  static const ::hbase::pb::Filter& filter(const WhileMatchFilter* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::Filter&
WhileMatchFilter::_Internal::filter(const WhileMatchFilter* msg) {
  return *msg->filter_;
}
WhileMatchFilter::WhileMatchFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.WhileMatchFilter)
}
WhileMatchFilter::WhileMatchFilter(const WhileMatchFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filter()) {
    filter_ = new ::hbase::pb::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.WhileMatchFilter)
}

void WhileMatchFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WhileMatchFilter_Filter_2eproto.base);
  filter_ = nullptr;
}

WhileMatchFilter::~WhileMatchFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.WhileMatchFilter)
  SharedDtor();
}

void WhileMatchFilter::SharedDtor() {
  if (this != internal_default_instance()) delete filter_;
}

void WhileMatchFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WhileMatchFilter& WhileMatchFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WhileMatchFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void WhileMatchFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.WhileMatchFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(filter_ != nullptr);
    filter_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WhileMatchFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.Filter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WhileMatchFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.WhileMatchFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.Filter filter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.WhileMatchFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.WhileMatchFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WhileMatchFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.WhileMatchFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.Filter filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.WhileMatchFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* WhileMatchFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.WhileMatchFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.Filter filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.WhileMatchFilter)
  return target;
}

size_t WhileMatchFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.WhileMatchFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.Filter filter = 1;
  if (has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WhileMatchFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.WhileMatchFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const WhileMatchFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WhileMatchFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.WhileMatchFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.WhileMatchFilter)
    MergeFrom(*source);
  }
}

void WhileMatchFilter::MergeFrom(const WhileMatchFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.WhileMatchFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    mutable_filter()->::hbase::pb::Filter::MergeFrom(from.filter());
  }
}

void WhileMatchFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.WhileMatchFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhileMatchFilter::CopyFrom(const WhileMatchFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.WhileMatchFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhileMatchFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_filter()) {
    if (!this->filter_->IsInitialized()) return false;
  }
  return true;
}

void WhileMatchFilter::InternalSwap(WhileMatchFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WhileMatchFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilterAllFilter::InitAsDefaultInstance() {
}
class FilterAllFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterAllFilter>()._has_bits_);
};

FilterAllFilter::FilterAllFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FilterAllFilter)
}
FilterAllFilter::FilterAllFilter(const FilterAllFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FilterAllFilter)
}

void FilterAllFilter::SharedCtor() {
}

FilterAllFilter::~FilterAllFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.FilterAllFilter)
  SharedDtor();
}

void FilterAllFilter::SharedDtor() {
}

void FilterAllFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterAllFilter& FilterAllFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterAllFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void FilterAllFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FilterAllFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilterAllFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilterAllFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FilterAllFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FilterAllFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FilterAllFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilterAllFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FilterAllFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FilterAllFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterAllFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FilterAllFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FilterAllFilter)
  return target;
}

size_t FilterAllFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FilterAllFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterAllFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FilterAllFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterAllFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterAllFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FilterAllFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FilterAllFilter)
    MergeFrom(*source);
  }
}

void FilterAllFilter::MergeFrom(const FilterAllFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FilterAllFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FilterAllFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FilterAllFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterAllFilter::CopyFrom(const FilterAllFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FilterAllFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterAllFilter::IsInitialized() const {
  return true;
}

void FilterAllFilter::InternalSwap(FilterAllFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterAllFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RowRange::InitAsDefaultInstance() {
}
class RowRange::_Internal {
 public:
  using HasBits = decltype(std::declval<RowRange>()._has_bits_);
  static void set_has_start_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_row_inclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stop_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_row_inclusive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RowRange::RowRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RowRange)
}
RowRange::RowRange(const RowRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_row()) {
    start_row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_row_);
  }
  stop_row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_stop_row()) {
    stop_row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_row_);
  }
  ::memcpy(&start_row_inclusive_, &from.start_row_inclusive_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_row_inclusive_) -
    reinterpret_cast<char*>(&start_row_inclusive_)) + sizeof(stop_row_inclusive_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RowRange)
}

void RowRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RowRange_Filter_2eproto.base);
  start_row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_row_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_row_inclusive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_row_inclusive_) -
      reinterpret_cast<char*>(&start_row_inclusive_)) + sizeof(stop_row_inclusive_));
}

RowRange::~RowRange() {
  // @@protoc_insertion_point(destructor:hbase.pb.RowRange)
  SharedDtor();
}

void RowRange::SharedDtor() {
  start_row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_row_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RowRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RowRange& RowRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RowRange_Filter_2eproto.base);
  return *internal_default_instance();
}


void RowRange::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RowRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_row_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stop_row_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&start_row_inclusive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_row_inclusive_) -
      reinterpret_cast<char*>(&start_row_inclusive_)) + sizeof(stop_row_inclusive_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RowRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes start_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_start_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool start_row_inclusive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_row_inclusive(&has_bits);
          start_row_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes stop_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_stop_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stop_row_inclusive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stop_row_inclusive(&has_bits);
          stop_row_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RowRange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RowRange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_row = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool start_row_inclusive = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_start_row_inclusive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_row_inclusive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes stop_row = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stop_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stop_row_inclusive = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stop_row_inclusive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_row_inclusive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RowRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RowRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RowRange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RowRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes start_row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_row(), output);
  }

  // optional bool start_row_inclusive = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->start_row_inclusive(), output);
  }

  // optional bytes stop_row = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->stop_row(), output);
  }

  // optional bool stop_row_inclusive = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->stop_row_inclusive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RowRange)
}

::PROTOBUF_NAMESPACE_ID::uint8* RowRange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RowRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes start_row = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_row(), target);
  }

  // optional bool start_row_inclusive = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->start_row_inclusive(), target);
  }

  // optional bytes stop_row = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->stop_row(), target);
  }

  // optional bool stop_row_inclusive = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->stop_row_inclusive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RowRange)
  return target;
}

size_t RowRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RowRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes start_row = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->start_row());
    }

    // optional bytes stop_row = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->stop_row());
    }

    // optional bool start_row_inclusive = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool stop_row_inclusive = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RowRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RowRange)
  GOOGLE_DCHECK_NE(&from, this);
  const RowRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RowRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RowRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RowRange)
    MergeFrom(*source);
  }
}

void RowRange::MergeFrom(const RowRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RowRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      start_row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_row_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      stop_row_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_row_);
    }
    if (cached_has_bits & 0x00000004u) {
      start_row_inclusive_ = from.start_row_inclusive_;
    }
    if (cached_has_bits & 0x00000008u) {
      stop_row_inclusive_ = from.stop_row_inclusive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RowRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RowRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowRange::CopyFrom(const RowRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RowRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowRange::IsInitialized() const {
  return true;
}

void RowRange::InternalSwap(RowRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_row_.Swap(&other->start_row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stop_row_.Swap(&other->stop_row_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_row_inclusive_, other->start_row_inclusive_);
  swap(stop_row_inclusive_, other->stop_row_inclusive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RowRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiRowRangeFilter::InitAsDefaultInstance() {
}
class MultiRowRangeFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiRowRangeFilter>()._has_bits_);
};

MultiRowRangeFilter::MultiRowRangeFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MultiRowRangeFilter)
}
MultiRowRangeFilter::MultiRowRangeFilter(const MultiRowRangeFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      row_range_list_(from.row_range_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MultiRowRangeFilter)
}

void MultiRowRangeFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiRowRangeFilter_Filter_2eproto.base);
}

MultiRowRangeFilter::~MultiRowRangeFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.MultiRowRangeFilter)
  SharedDtor();
}

void MultiRowRangeFilter::SharedDtor() {
}

void MultiRowRangeFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRowRangeFilter& MultiRowRangeFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRowRangeFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void MultiRowRangeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MultiRowRangeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_range_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiRowRangeFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.RowRange row_range_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_row_range_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiRowRangeFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MultiRowRangeFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RowRange row_range_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_row_range_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MultiRowRangeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MultiRowRangeFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiRowRangeFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MultiRowRangeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RowRange row_range_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_range_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->row_range_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MultiRowRangeFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRowRangeFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MultiRowRangeFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RowRange row_range_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_range_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->row_range_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MultiRowRangeFilter)
  return target;
}

size_t MultiRowRangeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MultiRowRangeFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.RowRange row_range_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->row_range_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->row_range_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRowRangeFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MultiRowRangeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRowRangeFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRowRangeFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MultiRowRangeFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MultiRowRangeFilter)
    MergeFrom(*source);
  }
}

void MultiRowRangeFilter::MergeFrom(const MultiRowRangeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MultiRowRangeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_range_list_.MergeFrom(from.row_range_list_);
}

void MultiRowRangeFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MultiRowRangeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRowRangeFilter::CopyFrom(const MultiRowRangeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MultiRowRangeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRowRangeFilter::IsInitialized() const {
  return true;
}

void MultiRowRangeFilter::InternalSwap(MultiRowRangeFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&row_range_list_)->InternalSwap(CastToBase(&other->row_range_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRowRangeFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColumnValueFilter::InitAsDefaultInstance() {
  ::hbase::pb::_ColumnValueFilter_default_instance_._instance.get_mutable()->comparator_ = const_cast< ::hbase::pb::Comparator*>(
      ::hbase::pb::Comparator::internal_default_instance());
}
class ColumnValueFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnValueFilter>()._has_bits_);
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compare_op(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hbase::pb::Comparator& comparator(const ColumnValueFilter* msg);
  static void set_has_comparator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::Comparator&
ColumnValueFilter::_Internal::comparator(const ColumnValueFilter* msg) {
  return *msg->comparator_;
}
void ColumnValueFilter::clear_comparator() {
  if (comparator_ != nullptr) comparator_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ColumnValueFilter::ColumnValueFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ColumnValueFilter)
}
ColumnValueFilter::ColumnValueFilter(const ColumnValueFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family()) {
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_qualifier()) {
    qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qualifier_);
  }
  if (from.has_comparator()) {
    comparator_ = new ::hbase::pb::Comparator(*from.comparator_);
  } else {
    comparator_ = nullptr;
  }
  compare_op_ = from.compare_op_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ColumnValueFilter)
}

void ColumnValueFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnValueFilter_Filter_2eproto.base);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&comparator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_op_) -
      reinterpret_cast<char*>(&comparator_)) + sizeof(compare_op_));
}

ColumnValueFilter::~ColumnValueFilter() {
  // @@protoc_insertion_point(destructor:hbase.pb.ColumnValueFilter)
  SharedDtor();
}

void ColumnValueFilter::SharedDtor() {
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qualifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete comparator_;
}

void ColumnValueFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnValueFilter& ColumnValueFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnValueFilter_Filter_2eproto.base);
  return *internal_default_instance();
}


void ColumnValueFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ColumnValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      qualifier_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(comparator_ != nullptr);
      comparator_->Clear();
    }
  }
  compare_op_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColumnValueFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes qualifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_qualifier(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.CompareType compare_op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::CompareType_IsValid(val))) {
            set_compare_op(static_cast<::hbase::pb::CompareType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.Comparator comparator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_comparator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColumnValueFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ColumnValueFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes qualifier = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.CompareType compare_op = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::CompareType_IsValid(value)) {
            set_compare_op(static_cast< ::hbase::pb::CompareType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.Comparator comparator = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_comparator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ColumnValueFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ColumnValueFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColumnValueFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ColumnValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->family(), output);
  }

  // required bytes qualifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->qualifier(), output);
  }

  // required .hbase.pb.CompareType compare_op = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->compare_op(), output);
  }

  // required .hbase.pb.Comparator comparator = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::comparator(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ColumnValueFilter)
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnValueFilter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ColumnValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->family(), target);
  }

  // required bytes qualifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->qualifier(), target);
  }

  // required .hbase.pb.CompareType compare_op = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->compare_op(), target);
  }

  // required .hbase.pb.Comparator comparator = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::comparator(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ColumnValueFilter)
  return target;
}

size_t ColumnValueFilter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.ColumnValueFilter)
  size_t total_size = 0;

  if (has_family()) {
    // required bytes family = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());
  }

  if (has_qualifier()) {
    // required bytes qualifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->qualifier());
  }

  if (has_comparator()) {
    // required .hbase.pb.Comparator comparator = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparator_);
  }

  if (has_compare_op()) {
    // required .hbase.pb.CompareType compare_op = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare_op());
  }

  return total_size;
}
size_t ColumnValueFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ColumnValueFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes family = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());

    // required bytes qualifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->qualifier());

    // required .hbase.pb.Comparator comparator = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparator_);

    // required .hbase.pb.CompareType compare_op = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare_op());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnValueFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ColumnValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnValueFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnValueFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ColumnValueFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ColumnValueFilter)
    MergeFrom(*source);
  }
}

void ColumnValueFilter::MergeFrom(const ColumnValueFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ColumnValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      qualifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.qualifier_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_comparator()->::hbase::pb::Comparator::MergeFrom(from.comparator());
    }
    if (cached_has_bits & 0x00000008u) {
      compare_op_ = from.compare_op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnValueFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ColumnValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnValueFilter::CopyFrom(const ColumnValueFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ColumnValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnValueFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_comparator()) {
    if (!this->comparator_->IsInitialized()) return false;
  }
  return true;
}

void ColumnValueFilter::InternalSwap(ColumnValueFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  qualifier_.Swap(&other->qualifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(comparator_, other->comparator_);
  swap(compare_op_, other->compare_op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnValueFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::Filter* Arena::CreateMaybeMessage< ::hbase::pb::Filter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ColumnCountGetFilter* Arena::CreateMaybeMessage< ::hbase::pb::ColumnCountGetFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ColumnCountGetFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ColumnPaginationFilter* Arena::CreateMaybeMessage< ::hbase::pb::ColumnPaginationFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ColumnPaginationFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ColumnPrefixFilter* Arena::CreateMaybeMessage< ::hbase::pb::ColumnPrefixFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ColumnPrefixFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ColumnRangeFilter* Arena::CreateMaybeMessage< ::hbase::pb::ColumnRangeFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ColumnRangeFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CompareFilter* Arena::CreateMaybeMessage< ::hbase::pb::CompareFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CompareFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::DependentColumnFilter* Arena::CreateMaybeMessage< ::hbase::pb::DependentColumnFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::DependentColumnFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FamilyFilter* Arena::CreateMaybeMessage< ::hbase::pb::FamilyFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FamilyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FilterList* Arena::CreateMaybeMessage< ::hbase::pb::FilterList >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FilterList >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FilterWrapper* Arena::CreateMaybeMessage< ::hbase::pb::FilterWrapper >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FilterWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FirstKeyOnlyFilter* Arena::CreateMaybeMessage< ::hbase::pb::FirstKeyOnlyFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FirstKeyOnlyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FirstKeyValueMatchingQualifiersFilter* Arena::CreateMaybeMessage< ::hbase::pb::FirstKeyValueMatchingQualifiersFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FirstKeyValueMatchingQualifiersFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FuzzyRowFilter* Arena::CreateMaybeMessage< ::hbase::pb::FuzzyRowFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FuzzyRowFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::InclusiveStopFilter* Arena::CreateMaybeMessage< ::hbase::pb::InclusiveStopFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::InclusiveStopFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::KeyOnlyFilter* Arena::CreateMaybeMessage< ::hbase::pb::KeyOnlyFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::KeyOnlyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MultipleColumnPrefixFilter* Arena::CreateMaybeMessage< ::hbase::pb::MultipleColumnPrefixFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MultipleColumnPrefixFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::PageFilter* Arena::CreateMaybeMessage< ::hbase::pb::PageFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::PageFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::PrefixFilter* Arena::CreateMaybeMessage< ::hbase::pb::PrefixFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::PrefixFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::QualifierFilter* Arena::CreateMaybeMessage< ::hbase::pb::QualifierFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::QualifierFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RandomRowFilter* Arena::CreateMaybeMessage< ::hbase::pb::RandomRowFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RandomRowFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RowFilter* Arena::CreateMaybeMessage< ::hbase::pb::RowFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RowFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SingleColumnValueExcludeFilter* Arena::CreateMaybeMessage< ::hbase::pb::SingleColumnValueExcludeFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SingleColumnValueExcludeFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SingleColumnValueFilter* Arena::CreateMaybeMessage< ::hbase::pb::SingleColumnValueFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SingleColumnValueFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SkipFilter* Arena::CreateMaybeMessage< ::hbase::pb::SkipFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SkipFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::TimestampsFilter* Arena::CreateMaybeMessage< ::hbase::pb::TimestampsFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::TimestampsFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ValueFilter* Arena::CreateMaybeMessage< ::hbase::pb::ValueFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ValueFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::WhileMatchFilter* Arena::CreateMaybeMessage< ::hbase::pb::WhileMatchFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::WhileMatchFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FilterAllFilter* Arena::CreateMaybeMessage< ::hbase::pb::FilterAllFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FilterAllFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RowRange* Arena::CreateMaybeMessage< ::hbase::pb::RowRange >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RowRange >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MultiRowRangeFilter* Arena::CreateMaybeMessage< ::hbase::pb::MultiRowRangeFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MultiRowRangeFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ColumnValueFilter* Arena::CreateMaybeMessage< ::hbase::pb::ColumnValueFilter >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ColumnValueFilter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
