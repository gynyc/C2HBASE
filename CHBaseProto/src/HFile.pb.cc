// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HFile.proto

#include "HFile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BytesBytesPair_HBase_2eproto;
namespace hbase {
namespace pb {
class FileInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileInfoProto> _instance;
} _FileInfoProto_default_instance_;
class FileTrailerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileTrailerProto> _instance;
} _FileTrailerProto_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_FileInfoProto_HFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FileInfoProto_default_instance_;
    new (ptr) ::hbase::pb::FileInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FileInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileInfoProto_HFile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FileInfoProto_HFile_2eproto}, {
      &scc_info_BytesBytesPair_HBase_2eproto.base,}};

static void InitDefaultsscc_info_FileTrailerProto_HFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FileTrailerProto_default_instance_;
    new (ptr) ::hbase::pb::FileTrailerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FileTrailerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileTrailerProto_HFile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FileTrailerProto_HFile_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_HFile_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_HFile_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_HFile_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_HFile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileInfoProto, map_entry_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, file_info_offset_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, load_on_open_data_offset_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, uncompressed_data_index_size_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, total_uncompressed_bytes_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, data_index_count_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, meta_index_count_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, entry_count_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, num_data_index_levels_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, first_data_block_offset_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, last_data_block_offset_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, comparator_class_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, compression_codec_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FileTrailerProto, encryption_key_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  11,
  9,
  10,
  0,
  12,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hbase::pb::FileInfoProto)},
  { 7, 25, sizeof(::hbase::pb::FileTrailerProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FileInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FileTrailerProto_default_instance_),
};

const char descriptor_table_protodef_HFile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013HFile.proto\022\010hbase.pb\032\013HBase.proto\"<\n\r"
  "FileInfoProto\022+\n\tmap_entry\030\001 \003(\0132\030.hbase"
  ".pb.BytesBytesPair\"\221\003\n\020FileTrailerProto\022"
  "\030\n\020file_info_offset\030\001 \001(\004\022 \n\030load_on_ope"
  "n_data_offset\030\002 \001(\004\022$\n\034uncompressed_data"
  "_index_size\030\003 \001(\004\022 \n\030total_uncompressed_"
  "bytes\030\004 \001(\004\022\030\n\020data_index_count\030\005 \001(\r\022\030\n"
  "\020meta_index_count\030\006 \001(\r\022\023\n\013entry_count\030\007"
  " \001(\004\022\035\n\025num_data_index_levels\030\010 \001(\r\022\037\n\027f"
  "irst_data_block_offset\030\t \001(\004\022\036\n\026last_dat"
  "a_block_offset\030\n \001(\004\022\035\n\025comparator_class"
  "_name\030\013 \001(\t\022\031\n\021compression_codec\030\014 \001(\r\022\026"
  "\n\016encryption_key\030\r \001(\014BA\n*org.apache.had"
  "oop.hbase.protobuf.generatedB\013HFileProto"
  "sH\001\210\001\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_HFile_2eproto_deps[1] = {
  &::descriptor_table_HBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_HFile_2eproto_sccs[2] = {
  &scc_info_FileInfoProto_HFile_2eproto.base,
  &scc_info_FileTrailerProto_HFile_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_HFile_2eproto_once;
static bool descriptor_table_HFile_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HFile_2eproto = {
  &descriptor_table_HFile_2eproto_initialized, descriptor_table_protodef_HFile_2eproto, "HFile.proto", 569,
  &descriptor_table_HFile_2eproto_once, descriptor_table_HFile_2eproto_sccs, descriptor_table_HFile_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_HFile_2eproto::offsets,
  file_level_metadata_HFile_2eproto, 2, file_level_enum_descriptors_HFile_2eproto, file_level_service_descriptors_HFile_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_HFile_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_HFile_2eproto), true);
namespace hbase {
namespace pb {

// ===================================================================

void FileInfoProto::InitAsDefaultInstance() {
}
class FileInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FileInfoProto>()._has_bits_);
};

void FileInfoProto::clear_map_entry() {
  map_entry_.Clear();
}
FileInfoProto::FileInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FileInfoProto)
}
FileInfoProto::FileInfoProto(const FileInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      map_entry_(from.map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FileInfoProto)
}

void FileInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileInfoProto_HFile_2eproto.base);
}

FileInfoProto::~FileInfoProto() {
  // @@protoc_insertion_point(destructor:hbase.pb.FileInfoProto)
  SharedDtor();
}

void FileInfoProto::SharedDtor() {
}

void FileInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileInfoProto& FileInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileInfoProto_HFile_2eproto.base);
  return *internal_default_instance();
}


void FileInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FileInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_entry_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.BytesBytesPair map_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FileInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.BytesBytesPair map_entry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FileInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FileInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FileInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.BytesBytesPair map_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->map_entry(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FileInfoProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* FileInfoProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FileInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.BytesBytesPair map_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_entry_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->map_entry(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FileInfoProto)
  return target;
}

size_t FileInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FileInfoProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.BytesBytesPair map_entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfoProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FileInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfoProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileInfoProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FileInfoProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FileInfoProto)
    MergeFrom(*source);
  }
}

void FileInfoProto::MergeFrom(const FileInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FileInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_entry_.MergeFrom(from.map_entry_);
}

void FileInfoProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FileInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoProto::CopyFrom(const FileInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FileInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->map_entry())) return false;
  return true;
}

void FileInfoProto::InternalSwap(FileInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&map_entry_)->InternalSwap(CastToBase(&other->map_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfoProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileTrailerProto::InitAsDefaultInstance() {
}
class FileTrailerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FileTrailerProto>()._has_bits_);
  static void set_has_file_info_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_load_on_open_data_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uncompressed_data_index_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_total_uncompressed_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data_index_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_meta_index_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_entry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_data_index_levels(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_first_data_block_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_last_data_block_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_comparator_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_compression_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FileTrailerProto::FileTrailerProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FileTrailerProto)
}
FileTrailerProto::FileTrailerProto(const FileTrailerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comparator_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_comparator_class_name()) {
    comparator_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comparator_class_name_);
  }
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_key()) {
    encryption_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
  }
  ::memcpy(&file_info_offset_, &from.file_info_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_codec_) -
    reinterpret_cast<char*>(&file_info_offset_)) + sizeof(compression_codec_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FileTrailerProto)
}

void FileTrailerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileTrailerProto_HFile_2eproto.base);
  comparator_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_info_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_codec_) -
      reinterpret_cast<char*>(&file_info_offset_)) + sizeof(compression_codec_));
}

FileTrailerProto::~FileTrailerProto() {
  // @@protoc_insertion_point(destructor:hbase.pb.FileTrailerProto)
  SharedDtor();
}

void FileTrailerProto::SharedDtor() {
  comparator_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileTrailerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTrailerProto& FileTrailerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileTrailerProto_HFile_2eproto.base);
  return *internal_default_instance();
}


void FileTrailerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FileTrailerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      comparator_class_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      encryption_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&file_info_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&meta_index_count_) -
        reinterpret_cast<char*>(&file_info_offset_)) + sizeof(meta_index_count_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&entry_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compression_codec_) -
        reinterpret_cast<char*>(&entry_count_)) + sizeof(compression_codec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileTrailerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 file_info_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_file_info_offset(&has_bits);
          file_info_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 load_on_open_data_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_load_on_open_data_offset(&has_bits);
          load_on_open_data_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uncompressed_data_index_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uncompressed_data_index_size(&has_bits);
          uncompressed_data_index_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_uncompressed_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_total_uncompressed_bytes(&has_bits);
          total_uncompressed_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 data_index_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_data_index_count(&has_bits);
          data_index_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 meta_index_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_meta_index_count(&has_bits);
          meta_index_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 entry_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_entry_count(&has_bits);
          entry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_data_index_levels = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_data_index_levels(&has_bits);
          num_data_index_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 first_data_block_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_first_data_block_offset(&has_bits);
          first_data_block_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_data_block_offset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_last_data_block_offset(&has_bits);
          last_data_block_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string comparator_class_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_comparator_class_name(), ptr, ctx, "hbase.pb.FileTrailerProto.comparator_class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 compression_codec = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_compression_codec(&has_bits);
          compression_codec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes encryption_key = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encryption_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileTrailerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FileTrailerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 file_info_offset = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_file_info_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_info_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 load_on_open_data_offset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_load_on_open_data_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &load_on_open_data_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uncompressed_data_index_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_uncompressed_data_index_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uncompressed_data_index_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_uncompressed_bytes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_total_uncompressed_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_uncompressed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_index_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_data_index_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_index_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meta_index_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_meta_index_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_index_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 entry_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_entry_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entry_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_data_index_levels = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_num_data_index_levels(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_data_index_levels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 first_data_block_offset = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_first_data_block_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_data_block_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_data_block_offset = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_last_data_block_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_data_block_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comparator_class_name = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comparator_class_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comparator_class_name().data(), static_cast<int>(this->comparator_class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.FileTrailerProto.comparator_class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 compression_codec = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_compression_codec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compression_codec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encryption_key = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FileTrailerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FileTrailerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileTrailerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FileTrailerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 file_info_offset = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->file_info_offset(), output);
  }

  // optional uint64 load_on_open_data_offset = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->load_on_open_data_offset(), output);
  }

  // optional uint64 uncompressed_data_index_size = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->uncompressed_data_index_size(), output);
  }

  // optional uint64 total_uncompressed_bytes = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->total_uncompressed_bytes(), output);
  }

  // optional uint32 data_index_count = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->data_index_count(), output);
  }

  // optional uint32 meta_index_count = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->meta_index_count(), output);
  }

  // optional uint64 entry_count = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->entry_count(), output);
  }

  // optional uint32 num_data_index_levels = 8;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->num_data_index_levels(), output);
  }

  // optional uint64 first_data_block_offset = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->first_data_block_offset(), output);
  }

  // optional uint64 last_data_block_offset = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->last_data_block_offset(), output);
  }

  // optional string comparator_class_name = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comparator_class_name().data(), static_cast<int>(this->comparator_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.FileTrailerProto.comparator_class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->comparator_class_name(), output);
  }

  // optional uint32 compression_codec = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->compression_codec(), output);
  }

  // optional bytes encryption_key = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->encryption_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FileTrailerProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* FileTrailerProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FileTrailerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 file_info_offset = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->file_info_offset(), target);
  }

  // optional uint64 load_on_open_data_offset = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->load_on_open_data_offset(), target);
  }

  // optional uint64 uncompressed_data_index_size = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->uncompressed_data_index_size(), target);
  }

  // optional uint64 total_uncompressed_bytes = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->total_uncompressed_bytes(), target);
  }

  // optional uint32 data_index_count = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->data_index_count(), target);
  }

  // optional uint32 meta_index_count = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->meta_index_count(), target);
  }

  // optional uint64 entry_count = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->entry_count(), target);
  }

  // optional uint32 num_data_index_levels = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_data_index_levels(), target);
  }

  // optional uint64 first_data_block_offset = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->first_data_block_offset(), target);
  }

  // optional uint64 last_data_block_offset = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->last_data_block_offset(), target);
  }

  // optional string comparator_class_name = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comparator_class_name().data(), static_cast<int>(this->comparator_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.FileTrailerProto.comparator_class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->comparator_class_name(), target);
  }

  // optional uint32 compression_codec = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->compression_codec(), target);
  }

  // optional bytes encryption_key = 13;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        13, this->encryption_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FileTrailerProto)
  return target;
}

size_t FileTrailerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FileTrailerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string comparator_class_name = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->comparator_class_name());
    }

    // optional bytes encryption_key = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->encryption_key());
    }

    // optional uint64 file_info_offset = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->file_info_offset());
    }

    // optional uint64 load_on_open_data_offset = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->load_on_open_data_offset());
    }

    // optional uint64 uncompressed_data_index_size = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->uncompressed_data_index_size());
    }

    // optional uint64 total_uncompressed_bytes = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->total_uncompressed_bytes());
    }

    // optional uint32 data_index_count = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->data_index_count());
    }

    // optional uint32 meta_index_count = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->meta_index_count());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 entry_count = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->entry_count());
    }

    // optional uint64 first_data_block_offset = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->first_data_block_offset());
    }

    // optional uint64 last_data_block_offset = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->last_data_block_offset());
    }

    // optional uint32 num_data_index_levels = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_data_index_levels());
    }

    // optional uint32 compression_codec = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->compression_codec());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTrailerProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FileTrailerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTrailerProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileTrailerProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FileTrailerProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FileTrailerProto)
    MergeFrom(*source);
  }
}

void FileTrailerProto::MergeFrom(const FileTrailerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FileTrailerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      comparator_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comparator_class_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      encryption_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      file_info_offset_ = from.file_info_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      load_on_open_data_offset_ = from.load_on_open_data_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      uncompressed_data_index_size_ = from.uncompressed_data_index_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_uncompressed_bytes_ = from.total_uncompressed_bytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_index_count_ = from.data_index_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      meta_index_count_ = from.meta_index_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      entry_count_ = from.entry_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_data_block_offset_ = from.first_data_block_offset_;
    }
    if (cached_has_bits & 0x00000400u) {
      last_data_block_offset_ = from.last_data_block_offset_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_data_index_levels_ = from.num_data_index_levels_;
    }
    if (cached_has_bits & 0x00001000u) {
      compression_codec_ = from.compression_codec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FileTrailerProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FileTrailerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTrailerProto::CopyFrom(const FileTrailerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FileTrailerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTrailerProto::IsInitialized() const {
  return true;
}

void FileTrailerProto::InternalSwap(FileTrailerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  comparator_class_name_.Swap(&other->comparator_class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encryption_key_.Swap(&other->encryption_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_info_offset_, other->file_info_offset_);
  swap(load_on_open_data_offset_, other->load_on_open_data_offset_);
  swap(uncompressed_data_index_size_, other->uncompressed_data_index_size_);
  swap(total_uncompressed_bytes_, other->total_uncompressed_bytes_);
  swap(data_index_count_, other->data_index_count_);
  swap(meta_index_count_, other->meta_index_count_);
  swap(entry_count_, other->entry_count_);
  swap(first_data_block_offset_, other->first_data_block_offset_);
  swap(last_data_block_offset_, other->last_data_block_offset_);
  swap(num_data_index_levels_, other->num_data_index_levels_);
  swap(compression_codec_, other->compression_codec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTrailerProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::FileInfoProto* Arena::CreateMaybeMessage< ::hbase::pb::FileInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FileInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FileTrailerProto* Arena::CreateMaybeMessage< ::hbase::pb::FileTrailerProto >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FileTrailerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
