// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapReduce.proto

#include "MapReduce.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameInt64Pair_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionInfo_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TableSchema_HBase_2eproto;
namespace hbase {
namespace pb {
class ScanMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanMetrics> _instance;
} _ScanMetrics_default_instance_;
class TableSnapshotRegionSplitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableSnapshotRegionSplit> _instance;
} _TableSnapshotRegionSplit_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_ScanMetrics_MapReduce_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ScanMetrics_default_instance_;
    new (ptr) ::hbase::pb::ScanMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ScanMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanMetrics_MapReduce_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScanMetrics_MapReduce_2eproto}, {
      &scc_info_NameInt64Pair_HBase_2eproto.base,}};

static void InitDefaultsscc_info_TableSnapshotRegionSplit_MapReduce_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_TableSnapshotRegionSplit_default_instance_;
    new (ptr) ::hbase::pb::TableSnapshotRegionSplit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::TableSnapshotRegionSplit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TableSnapshotRegionSplit_MapReduce_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TableSnapshotRegionSplit_MapReduce_2eproto}, {
      &scc_info_TableSchema_HBase_2eproto.base,
      &scc_info_RegionInfo_HBase_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MapReduce_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MapReduce_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MapReduce_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MapReduce_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ScanMetrics, metrics_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TableSnapshotRegionSplit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TableSnapshotRegionSplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TableSnapshotRegionSplit, locations_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TableSnapshotRegionSplit, table_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TableSnapshotRegionSplit, region_),
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hbase::pb::ScanMetrics)},
  { 7, 15, sizeof(::hbase::pb::TableSnapshotRegionSplit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ScanMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_TableSnapshotRegionSplit_default_instance_),
};

const char descriptor_table_protodef_MapReduce_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017MapReduce.proto\022\010hbase.pb\032\013HBase.proto"
  "\"7\n\013ScanMetrics\022(\n\007metrics\030\001 \003(\0132\027.hbase"
  ".pb.NameInt64Pair\"y\n\030TableSnapshotRegion"
  "Split\022\021\n\tlocations\030\002 \003(\t\022$\n\005table\030\003 \001(\0132"
  "\025.hbase.pb.TableSchema\022$\n\006region\030\004 \001(\0132\024"
  ".hbase.pb.RegionInfoBB\n*org.apache.hadoo"
  "p.hbase.protobuf.generatedB\017MapReducePro"
  "tosH\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MapReduce_2eproto_deps[1] = {
  &::descriptor_table_HBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MapReduce_2eproto_sccs[2] = {
  &scc_info_ScanMetrics_MapReduce_2eproto.base,
  &scc_info_TableSnapshotRegionSplit_MapReduce_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MapReduce_2eproto_once;
static bool descriptor_table_MapReduce_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MapReduce_2eproto = {
  &descriptor_table_MapReduce_2eproto_initialized, descriptor_table_protodef_MapReduce_2eproto, "MapReduce.proto", 288,
  &descriptor_table_MapReduce_2eproto_once, descriptor_table_MapReduce_2eproto_sccs, descriptor_table_MapReduce_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_MapReduce_2eproto::offsets,
  file_level_metadata_MapReduce_2eproto, 2, file_level_enum_descriptors_MapReduce_2eproto, file_level_service_descriptors_MapReduce_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MapReduce_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MapReduce_2eproto), true);
namespace hbase {
namespace pb {

// ===================================================================

void ScanMetrics::InitAsDefaultInstance() {
}
class ScanMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<ScanMetrics>()._has_bits_);
};

void ScanMetrics::clear_metrics() {
  metrics_.Clear();
}
ScanMetrics::ScanMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ScanMetrics)
}
ScanMetrics::ScanMetrics(const ScanMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ScanMetrics)
}

void ScanMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanMetrics_MapReduce_2eproto.base);
}

ScanMetrics::~ScanMetrics() {
  // @@protoc_insertion_point(destructor:hbase.pb.ScanMetrics)
  SharedDtor();
}

void ScanMetrics::SharedDtor() {
}

void ScanMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanMetrics& ScanMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanMetrics_MapReduce_2eproto.base);
  return *internal_default_instance();
}


void ScanMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ScanMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScanMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.NameInt64Pair metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScanMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ScanMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.NameInt64Pair metrics = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ScanMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ScanMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScanMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ScanMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.NameInt64Pair metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->metrics(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ScanMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ScanMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.NameInt64Pair metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->metrics(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ScanMetrics)
  return target;
}

size_t ScanMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ScanMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.NameInt64Pair metrics = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metrics(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ScanMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ScanMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ScanMetrics)
    MergeFrom(*source);
  }
}

void ScanMetrics::MergeFrom(const ScanMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ScanMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
}

void ScanMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ScanMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanMetrics::CopyFrom(const ScanMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ScanMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanMetrics::IsInitialized() const {
  return true;
}

void ScanMetrics::InternalSwap(ScanMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&metrics_)->InternalSwap(CastToBase(&other->metrics_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableSnapshotRegionSplit::InitAsDefaultInstance() {
  ::hbase::pb::_TableSnapshotRegionSplit_default_instance_._instance.get_mutable()->table_ = const_cast< ::hbase::pb::TableSchema*>(
      ::hbase::pb::TableSchema::internal_default_instance());
  ::hbase::pb::_TableSnapshotRegionSplit_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionInfo*>(
      ::hbase::pb::RegionInfo::internal_default_instance());
}
class TableSnapshotRegionSplit::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSnapshotRegionSplit>()._has_bits_);
  static const ::hbase::pb::TableSchema& table(const TableSnapshotRegionSplit* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::RegionInfo& region(const TableSnapshotRegionSplit* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::TableSchema&
TableSnapshotRegionSplit::_Internal::table(const TableSnapshotRegionSplit* msg) {
  return *msg->table_;
}
const ::hbase::pb::RegionInfo&
TableSnapshotRegionSplit::_Internal::region(const TableSnapshotRegionSplit* msg) {
  return *msg->region_;
}
void TableSnapshotRegionSplit::clear_table() {
  if (table_ != nullptr) table_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TableSnapshotRegionSplit::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TableSnapshotRegionSplit::TableSnapshotRegionSplit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.TableSnapshotRegionSplit)
}
TableSnapshotRegionSplit::TableSnapshotRegionSplit(const TableSnapshotRegionSplit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table()) {
    table_ = new ::hbase::pb::TableSchema(*from.table_);
  } else {
    table_ = nullptr;
  }
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionInfo(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.TableSnapshotRegionSplit)
}

void TableSnapshotRegionSplit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableSnapshotRegionSplit_MapReduce_2eproto.base);
  ::memset(&table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&table_)) + sizeof(region_));
}

TableSnapshotRegionSplit::~TableSnapshotRegionSplit() {
  // @@protoc_insertion_point(destructor:hbase.pb.TableSnapshotRegionSplit)
  SharedDtor();
}

void TableSnapshotRegionSplit::SharedDtor() {
  if (this != internal_default_instance()) delete table_;
  if (this != internal_default_instance()) delete region_;
}

void TableSnapshotRegionSplit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableSnapshotRegionSplit& TableSnapshotRegionSplit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableSnapshotRegionSplit_MapReduce_2eproto.base);
  return *internal_default_instance();
}


void TableSnapshotRegionSplit::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.TableSnapshotRegionSplit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_ != nullptr);
      table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(region_ != nullptr);
      region_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TableSnapshotRegionSplit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string locations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_locations(), ptr, ctx, "hbase.pb.TableSnapshotRegionSplit.locations");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.TableSchema table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.RegionInfo region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TableSnapshotRegionSplit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.TableSnapshotRegionSplit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string locations = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_locations()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->locations(this->locations_size() - 1).data(),
            static_cast<int>(this->locations(this->locations_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.TableSnapshotRegionSplit.locations");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.TableSchema table = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.RegionInfo region = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.TableSnapshotRegionSplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.TableSnapshotRegionSplit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TableSnapshotRegionSplit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.TableSnapshotRegionSplit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string locations = 2;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->locations(i).data(), static_cast<int>(this->locations(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.TableSnapshotRegionSplit.locations");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->locations(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.TableSchema table = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::table(this), output);
  }

  // optional .hbase.pb.RegionInfo region = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.TableSnapshotRegionSplit)
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSnapshotRegionSplit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.TableSnapshotRegionSplit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string locations = 2;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->locations(i).data(), static_cast<int>(this->locations(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.TableSnapshotRegionSplit.locations");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->locations(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.TableSchema table = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::table(this), target);
  }

  // optional .hbase.pb.RegionInfo region = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::region(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.TableSnapshotRegionSplit)
  return target;
}

size_t TableSnapshotRegionSplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.TableSnapshotRegionSplit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string locations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->locations_size());
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->locations(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hbase.pb.TableSchema table = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_);
    }

    // optional .hbase.pb.RegionInfo region = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableSnapshotRegionSplit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.TableSnapshotRegionSplit)
  GOOGLE_DCHECK_NE(&from, this);
  const TableSnapshotRegionSplit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableSnapshotRegionSplit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.TableSnapshotRegionSplit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.TableSnapshotRegionSplit)
    MergeFrom(*source);
  }
}

void TableSnapshotRegionSplit::MergeFrom(const TableSnapshotRegionSplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.TableSnapshotRegionSplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_table()->::hbase::pb::TableSchema::MergeFrom(from.table());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_region()->::hbase::pb::RegionInfo::MergeFrom(from.region());
    }
  }
}

void TableSnapshotRegionSplit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.TableSnapshotRegionSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableSnapshotRegionSplit::CopyFrom(const TableSnapshotRegionSplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.TableSnapshotRegionSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSnapshotRegionSplit::IsInitialized() const {
  if (has_table()) {
    if (!this->table_->IsInitialized()) return false;
  }
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void TableSnapshotRegionSplit::InternalSwap(TableSnapshotRegionSplit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  locations_.InternalSwap(CastToBase(&other->locations_));
  swap(table_, other->table_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSnapshotRegionSplit::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::ScanMetrics* Arena::CreateMaybeMessage< ::hbase::pb::ScanMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ScanMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::TableSnapshotRegionSplit* Arena::CreateMaybeMessage< ::hbase::pb::TableSnapshotRegionSplit >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::TableSnapshotRegionSplit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
