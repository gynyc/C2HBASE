// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapReduce.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MapReduce_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MapReduce_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "HBase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MapReduce_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MapReduce_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MapReduce_2eproto;
namespace hbase {
namespace pb {
class ScanMetrics;
class ScanMetricsDefaultTypeInternal;
extern ScanMetricsDefaultTypeInternal _ScanMetrics_default_instance_;
class TableSnapshotRegionSplit;
class TableSnapshotRegionSplitDefaultTypeInternal;
extern TableSnapshotRegionSplitDefaultTypeInternal _TableSnapshotRegionSplit_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::ScanMetrics* Arena::CreateMaybeMessage<::hbase::pb::ScanMetrics>(Arena*);
template<> ::hbase::pb::TableSnapshotRegionSplit* Arena::CreateMaybeMessage<::hbase::pb::TableSnapshotRegionSplit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

// ===================================================================

class ScanMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ScanMetrics) */ {
 public:
  ScanMetrics();
  virtual ~ScanMetrics();

  ScanMetrics(const ScanMetrics& from);
  ScanMetrics(ScanMetrics&& from) noexcept
    : ScanMetrics() {
    *this = ::std::move(from);
  }

  inline ScanMetrics& operator=(const ScanMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanMetrics& operator=(ScanMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanMetrics* internal_default_instance() {
    return reinterpret_cast<const ScanMetrics*>(
               &_ScanMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScanMetrics& a, ScanMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanMetrics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanMetrics* New() const final {
    return CreateMaybeMessage<ScanMetrics>(nullptr);
  }

  ScanMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanMetrics& from);
  void MergeFrom(const ScanMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ScanMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MapReduce_2eproto);
    return ::descriptor_table_MapReduce_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
  };
  // repeated .hbase.pb.NameInt64Pair metrics = 1;
  int metrics_size() const;
  void clear_metrics();
  ::hbase::pb::NameInt64Pair* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::NameInt64Pair >*
      mutable_metrics();
  const ::hbase::pb::NameInt64Pair& metrics(int index) const;
  ::hbase::pb::NameInt64Pair* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::NameInt64Pair >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:hbase.pb.ScanMetrics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::NameInt64Pair > metrics_;
  friend struct ::TableStruct_MapReduce_2eproto;
};
// -------------------------------------------------------------------

class TableSnapshotRegionSplit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.TableSnapshotRegionSplit) */ {
 public:
  TableSnapshotRegionSplit();
  virtual ~TableSnapshotRegionSplit();

  TableSnapshotRegionSplit(const TableSnapshotRegionSplit& from);
  TableSnapshotRegionSplit(TableSnapshotRegionSplit&& from) noexcept
    : TableSnapshotRegionSplit() {
    *this = ::std::move(from);
  }

  inline TableSnapshotRegionSplit& operator=(const TableSnapshotRegionSplit& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSnapshotRegionSplit& operator=(TableSnapshotRegionSplit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableSnapshotRegionSplit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableSnapshotRegionSplit* internal_default_instance() {
    return reinterpret_cast<const TableSnapshotRegionSplit*>(
               &_TableSnapshotRegionSplit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TableSnapshotRegionSplit& a, TableSnapshotRegionSplit& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSnapshotRegionSplit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSnapshotRegionSplit* New() const final {
    return CreateMaybeMessage<TableSnapshotRegionSplit>(nullptr);
  }

  TableSnapshotRegionSplit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSnapshotRegionSplit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableSnapshotRegionSplit& from);
  void MergeFrom(const TableSnapshotRegionSplit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSnapshotRegionSplit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.TableSnapshotRegionSplit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MapReduce_2eproto);
    return ::descriptor_table_MapReduce_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 2,
    kTableFieldNumber = 3,
    kRegionFieldNumber = 4,
  };
  // repeated string locations = 2;
  int locations_size() const;
  void clear_locations();
  const std::string& locations(int index) const;
  std::string* mutable_locations(int index);
  void set_locations(int index, const std::string& value);
  void set_locations(int index, std::string&& value);
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  std::string* add_locations();
  void add_locations(const std::string& value);
  void add_locations(std::string&& value);
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& locations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_locations();

  // optional .hbase.pb.TableSchema table = 3;
  bool has_table() const;
  void clear_table();
  const ::hbase::pb::TableSchema& table() const;
  ::hbase::pb::TableSchema* release_table();
  ::hbase::pb::TableSchema* mutable_table();
  void set_allocated_table(::hbase::pb::TableSchema* table);

  // optional .hbase.pb.RegionInfo region = 4;
  bool has_region() const;
  void clear_region();
  const ::hbase::pb::RegionInfo& region() const;
  ::hbase::pb::RegionInfo* release_region();
  ::hbase::pb::RegionInfo* mutable_region();
  void set_allocated_region(::hbase::pb::RegionInfo* region);

  // @@protoc_insertion_point(class_scope:hbase.pb.TableSnapshotRegionSplit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> locations_;
  ::hbase::pb::TableSchema* table_;
  ::hbase::pb::RegionInfo* region_;
  friend struct ::TableStruct_MapReduce_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScanMetrics

// repeated .hbase.pb.NameInt64Pair metrics = 1;
inline int ScanMetrics::metrics_size() const {
  return metrics_.size();
}
inline ::hbase::pb::NameInt64Pair* ScanMetrics::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.ScanMetrics.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::NameInt64Pair >*
ScanMetrics::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.ScanMetrics.metrics)
  return &metrics_;
}
inline const ::hbase::pb::NameInt64Pair& ScanMetrics::metrics(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.ScanMetrics.metrics)
  return metrics_.Get(index);
}
inline ::hbase::pb::NameInt64Pair* ScanMetrics::add_metrics() {
  // @@protoc_insertion_point(field_add:hbase.pb.ScanMetrics.metrics)
  return metrics_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::NameInt64Pair >&
ScanMetrics::metrics() const {
  // @@protoc_insertion_point(field_list:hbase.pb.ScanMetrics.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// TableSnapshotRegionSplit

// repeated string locations = 2;
inline int TableSnapshotRegionSplit::locations_size() const {
  return locations_.size();
}
inline void TableSnapshotRegionSplit::clear_locations() {
  locations_.Clear();
}
inline const std::string& TableSnapshotRegionSplit::locations(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.TableSnapshotRegionSplit.locations)
  return locations_.Get(index);
}
inline std::string* TableSnapshotRegionSplit::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.TableSnapshotRegionSplit.locations)
  return locations_.Mutable(index);
}
inline void TableSnapshotRegionSplit::set_locations(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.TableSnapshotRegionSplit.locations)
  locations_.Mutable(index)->assign(value);
}
inline void TableSnapshotRegionSplit::set_locations(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.TableSnapshotRegionSplit.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
inline void TableSnapshotRegionSplit::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hbase.pb.TableSnapshotRegionSplit.locations)
}
inline void TableSnapshotRegionSplit::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.TableSnapshotRegionSplit.locations)
}
inline std::string* TableSnapshotRegionSplit::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:hbase.pb.TableSnapshotRegionSplit.locations)
  return locations_.Add();
}
inline void TableSnapshotRegionSplit::add_locations(const std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hbase.pb.TableSnapshotRegionSplit.locations)
}
inline void TableSnapshotRegionSplit::add_locations(std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hbase.pb.TableSnapshotRegionSplit.locations)
}
inline void TableSnapshotRegionSplit::add_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hbase.pb.TableSnapshotRegionSplit.locations)
}
inline void TableSnapshotRegionSplit::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hbase.pb.TableSnapshotRegionSplit.locations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TableSnapshotRegionSplit::locations() const {
  // @@protoc_insertion_point(field_list:hbase.pb.TableSnapshotRegionSplit.locations)
  return locations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TableSnapshotRegionSplit::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.TableSnapshotRegionSplit.locations)
  return &locations_;
}

// optional .hbase.pb.TableSchema table = 3;
inline bool TableSnapshotRegionSplit::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::TableSchema& TableSnapshotRegionSplit::table() const {
  const ::hbase::pb::TableSchema* p = table_;
  // @@protoc_insertion_point(field_get:hbase.pb.TableSnapshotRegionSplit.table)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::TableSchema*>(
      &::hbase::pb::_TableSchema_default_instance_);
}
inline ::hbase::pb::TableSchema* TableSnapshotRegionSplit::release_table() {
  // @@protoc_insertion_point(field_release:hbase.pb.TableSnapshotRegionSplit.table)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::TableSchema* temp = table_;
  table_ = nullptr;
  return temp;
}
inline ::hbase::pb::TableSchema* TableSnapshotRegionSplit::mutable_table() {
  _has_bits_[0] |= 0x00000001u;
  if (table_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::TableSchema>(GetArenaNoVirtual());
    table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.TableSnapshotRegionSplit.table)
  return table_;
}
inline void TableSnapshotRegionSplit::set_allocated_table(::hbase::pb::TableSchema* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_);
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.TableSnapshotRegionSplit.table)
}

// optional .hbase.pb.RegionInfo region = 4;
inline bool TableSnapshotRegionSplit::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::hbase::pb::RegionInfo& TableSnapshotRegionSplit::region() const {
  const ::hbase::pb::RegionInfo* p = region_;
  // @@protoc_insertion_point(field_get:hbase.pb.TableSnapshotRegionSplit.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionInfo*>(
      &::hbase::pb::_RegionInfo_default_instance_);
}
inline ::hbase::pb::RegionInfo* TableSnapshotRegionSplit::release_region() {
  // @@protoc_insertion_point(field_release:hbase.pb.TableSnapshotRegionSplit.region)
  _has_bits_[0] &= ~0x00000002u;
  ::hbase::pb::RegionInfo* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionInfo* TableSnapshotRegionSplit::mutable_region() {
  _has_bits_[0] |= 0x00000002u;
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionInfo>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.TableSnapshotRegionSplit.region)
  return region_;
}
inline void TableSnapshotRegionSplit::set_allocated_region(::hbase::pb::RegionInfo* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.TableSnapshotRegionSplit.region)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MapReduce_2eproto
