// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MultiRowMutation.proto

#include "MultiRowMutation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MutationProto_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionSpecifier_HBase_2eproto;
namespace hbase {
namespace pb {
class MultiRowMutationProcessorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRowMutationProcessorRequest> _instance;
} _MultiRowMutationProcessorRequest_default_instance_;
class MultiRowMutationProcessorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRowMutationProcessorResponse> _instance;
} _MultiRowMutationProcessorResponse_default_instance_;
class MutateRowsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutateRowsRequest> _instance;
} _MutateRowsRequest_default_instance_;
class MutateRowsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutateRowsResponse> _instance;
} _MutateRowsResponse_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_MultiRowMutationProcessorRequest_MultiRowMutation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MultiRowMutationProcessorRequest_default_instance_;
    new (ptr) ::hbase::pb::MultiRowMutationProcessorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MultiRowMutationProcessorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiRowMutationProcessorRequest_MultiRowMutation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MultiRowMutationProcessorRequest_MultiRowMutation_2eproto}, {}};

static void InitDefaultsscc_info_MultiRowMutationProcessorResponse_MultiRowMutation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MultiRowMutationProcessorResponse_default_instance_;
    new (ptr) ::hbase::pb::MultiRowMutationProcessorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MultiRowMutationProcessorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiRowMutationProcessorResponse_MultiRowMutation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MultiRowMutationProcessorResponse_MultiRowMutation_2eproto}, {}};

static void InitDefaultsscc_info_MutateRowsRequest_MultiRowMutation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MutateRowsRequest_default_instance_;
    new (ptr) ::hbase::pb::MutateRowsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MutateRowsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MutateRowsRequest_MultiRowMutation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MutateRowsRequest_MultiRowMutation_2eproto}, {
      &scc_info_MutationProto_Client_2eproto.base,
      &scc_info_RegionSpecifier_HBase_2eproto.base,}};

static void InitDefaultsscc_info_MutateRowsResponse_MultiRowMutation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MutateRowsResponse_default_instance_;
    new (ptr) ::hbase::pb::MutateRowsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MutateRowsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MutateRowsResponse_MultiRowMutation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MutateRowsResponse_MultiRowMutation_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MultiRowMutation_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MultiRowMutation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MultiRowMutation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MultiRowMutation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRowMutationProcessorRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRowMutationProcessorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRowMutationProcessorResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiRowMutationProcessorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRowsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRowsRequest, mutation_request_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRowsRequest, nonce_group_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRowsRequest, nonce_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRowsRequest, region_),
  ~0u,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRowsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MutateRowsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::hbase::pb::MultiRowMutationProcessorRequest)},
  { 5, 10, sizeof(::hbase::pb::MultiRowMutationProcessorResponse)},
  { 10, 19, sizeof(::hbase::pb::MutateRowsRequest)},
  { 23, 28, sizeof(::hbase::pb::MutateRowsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MultiRowMutationProcessorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MultiRowMutationProcessorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MutateRowsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MutateRowsResponse_default_instance_),
};

const char descriptor_table_protodef_MultiRowMutation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026MultiRowMutation.proto\022\010hbase.pb\032\014Clie"
  "nt.proto\032\013HBase.proto\"\"\n MultiRowMutatio"
  "nProcessorRequest\"#\n!MultiRowMutationPro"
  "cessorResponse\"\225\001\n\021MutateRowsRequest\0221\n\020"
  "mutation_request\030\001 \003(\0132\027.hbase.pb.Mutati"
  "onProto\022\023\n\013nonce_group\030\002 \001(\004\022\r\n\005nonce\030\003 "
  "\001(\004\022)\n\006region\030\004 \001(\0132\031.hbase.pb.RegionSpe"
  "cifier\"\024\n\022MutateRowsResponse2b\n\027MultiRow"
  "MutationService\022G\n\nMutateRows\022\033.hbase.pb"
  ".MutateRowsRequest\032\034.hbase.pb.MutateRows"
  "ResponseBL\n*org.apache.hadoop.hbase.prot"
  "obuf.generatedB\026MultiRowMutationProtosH\001"
  "\210\001\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MultiRowMutation_2eproto_deps[2] = {
  &::descriptor_table_Client_2eproto,
  &::descriptor_table_HBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MultiRowMutation_2eproto_sccs[4] = {
  &scc_info_MultiRowMutationProcessorRequest_MultiRowMutation_2eproto.base,
  &scc_info_MultiRowMutationProcessorResponse_MultiRowMutation_2eproto.base,
  &scc_info_MutateRowsRequest_MultiRowMutation_2eproto.base,
  &scc_info_MutateRowsResponse_MultiRowMutation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MultiRowMutation_2eproto_once;
static bool descriptor_table_MultiRowMutation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MultiRowMutation_2eproto = {
  &descriptor_table_MultiRowMutation_2eproto_initialized, descriptor_table_protodef_MultiRowMutation_2eproto, "MultiRowMutation.proto", 486,
  &descriptor_table_MultiRowMutation_2eproto_once, descriptor_table_MultiRowMutation_2eproto_sccs, descriptor_table_MultiRowMutation_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_MultiRowMutation_2eproto::offsets,
  file_level_metadata_MultiRowMutation_2eproto, 4, file_level_enum_descriptors_MultiRowMutation_2eproto, file_level_service_descriptors_MultiRowMutation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MultiRowMutation_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MultiRowMutation_2eproto), true);
namespace hbase {
namespace pb {

// ===================================================================

void MultiRowMutationProcessorRequest::InitAsDefaultInstance() {
}
class MultiRowMutationProcessorRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiRowMutationProcessorRequest>()._has_bits_);
};

MultiRowMutationProcessorRequest::MultiRowMutationProcessorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MultiRowMutationProcessorRequest)
}
MultiRowMutationProcessorRequest::MultiRowMutationProcessorRequest(const MultiRowMutationProcessorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MultiRowMutationProcessorRequest)
}

void MultiRowMutationProcessorRequest::SharedCtor() {
}

MultiRowMutationProcessorRequest::~MultiRowMutationProcessorRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.MultiRowMutationProcessorRequest)
  SharedDtor();
}

void MultiRowMutationProcessorRequest::SharedDtor() {
}

void MultiRowMutationProcessorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRowMutationProcessorRequest& MultiRowMutationProcessorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRowMutationProcessorRequest_MultiRowMutation_2eproto.base);
  return *internal_default_instance();
}


void MultiRowMutationProcessorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MultiRowMutationProcessorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiRowMutationProcessorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiRowMutationProcessorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MultiRowMutationProcessorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MultiRowMutationProcessorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MultiRowMutationProcessorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiRowMutationProcessorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MultiRowMutationProcessorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MultiRowMutationProcessorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRowMutationProcessorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MultiRowMutationProcessorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MultiRowMutationProcessorRequest)
  return target;
}

size_t MultiRowMutationProcessorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MultiRowMutationProcessorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRowMutationProcessorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MultiRowMutationProcessorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRowMutationProcessorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRowMutationProcessorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MultiRowMutationProcessorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MultiRowMutationProcessorRequest)
    MergeFrom(*source);
  }
}

void MultiRowMutationProcessorRequest::MergeFrom(const MultiRowMutationProcessorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MultiRowMutationProcessorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MultiRowMutationProcessorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MultiRowMutationProcessorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRowMutationProcessorRequest::CopyFrom(const MultiRowMutationProcessorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MultiRowMutationProcessorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRowMutationProcessorRequest::IsInitialized() const {
  return true;
}

void MultiRowMutationProcessorRequest::InternalSwap(MultiRowMutationProcessorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRowMutationProcessorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiRowMutationProcessorResponse::InitAsDefaultInstance() {
}
class MultiRowMutationProcessorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiRowMutationProcessorResponse>()._has_bits_);
};

MultiRowMutationProcessorResponse::MultiRowMutationProcessorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MultiRowMutationProcessorResponse)
}
MultiRowMutationProcessorResponse::MultiRowMutationProcessorResponse(const MultiRowMutationProcessorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MultiRowMutationProcessorResponse)
}

void MultiRowMutationProcessorResponse::SharedCtor() {
}

MultiRowMutationProcessorResponse::~MultiRowMutationProcessorResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.MultiRowMutationProcessorResponse)
  SharedDtor();
}

void MultiRowMutationProcessorResponse::SharedDtor() {
}

void MultiRowMutationProcessorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRowMutationProcessorResponse& MultiRowMutationProcessorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRowMutationProcessorResponse_MultiRowMutation_2eproto.base);
  return *internal_default_instance();
}


void MultiRowMutationProcessorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MultiRowMutationProcessorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiRowMutationProcessorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiRowMutationProcessorResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MultiRowMutationProcessorResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MultiRowMutationProcessorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MultiRowMutationProcessorResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiRowMutationProcessorResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MultiRowMutationProcessorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MultiRowMutationProcessorResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRowMutationProcessorResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MultiRowMutationProcessorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MultiRowMutationProcessorResponse)
  return target;
}

size_t MultiRowMutationProcessorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MultiRowMutationProcessorResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRowMutationProcessorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MultiRowMutationProcessorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRowMutationProcessorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRowMutationProcessorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MultiRowMutationProcessorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MultiRowMutationProcessorResponse)
    MergeFrom(*source);
  }
}

void MultiRowMutationProcessorResponse::MergeFrom(const MultiRowMutationProcessorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MultiRowMutationProcessorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MultiRowMutationProcessorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MultiRowMutationProcessorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRowMutationProcessorResponse::CopyFrom(const MultiRowMutationProcessorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MultiRowMutationProcessorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRowMutationProcessorResponse::IsInitialized() const {
  return true;
}

void MultiRowMutationProcessorResponse::InternalSwap(MultiRowMutationProcessorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRowMutationProcessorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutateRowsRequest::InitAsDefaultInstance() {
  ::hbase::pb::_MutateRowsRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::hbase::pb::RegionSpecifier*>(
      ::hbase::pb::RegionSpecifier::internal_default_instance());
}
class MutateRowsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MutateRowsRequest>()._has_bits_);
  static void set_has_nonce_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hbase::pb::RegionSpecifier& region(const MutateRowsRequest* msg);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::RegionSpecifier&
MutateRowsRequest::_Internal::region(const MutateRowsRequest* msg) {
  return *msg->region_;
}
void MutateRowsRequest::clear_mutation_request() {
  mutation_request_.Clear();
}
void MutateRowsRequest::clear_region() {
  if (region_ != nullptr) region_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MutateRowsRequest::MutateRowsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MutateRowsRequest)
}
MutateRowsRequest::MutateRowsRequest(const MutateRowsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mutation_request_(from.mutation_request_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::hbase::pb::RegionSpecifier(*from.region_);
  } else {
    region_ = nullptr;
  }
  ::memcpy(&nonce_group_, &from.nonce_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&nonce_group_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MutateRowsRequest)
}

void MutateRowsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutateRowsRequest_MultiRowMutation_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&region_)) + sizeof(nonce_));
}

MutateRowsRequest::~MutateRowsRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.MutateRowsRequest)
  SharedDtor();
}

void MutateRowsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void MutateRowsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutateRowsRequest& MutateRowsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutateRowsRequest_MultiRowMutation_2eproto.base);
  return *internal_default_instance();
}


void MutateRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MutateRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutation_request_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_ != nullptr);
    region_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&nonce_group_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nonce_) -
        reinterpret_cast<char*>(&nonce_group_)) + sizeof(nonce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MutateRowsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.MutationProto mutation_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_mutation_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional uint64 nonce_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nonce_group(&has_bits);
          nonce_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nonce(&has_bits);
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.RegionSpecifier region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MutateRowsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MutateRowsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.MutationProto mutation_request = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mutation_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nonce_group = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_nonce_group(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nonce = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_nonce(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.RegionSpecifier region = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MutateRowsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MutateRowsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MutateRowsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MutateRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.MutationProto mutation_request = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mutation_request_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->mutation_request(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 nonce_group = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->nonce_group(), output);
  }

  // optional uint64 nonce = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->nonce(), output);
  }

  // optional .hbase.pb.RegionSpecifier region = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MutateRowsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MutateRowsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MutateRowsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.MutationProto mutation_request = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mutation_request_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->mutation_request(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 nonce_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->nonce_group(), target);
  }

  // optional uint64 nonce = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce(), target);
  }

  // optional .hbase.pb.RegionSpecifier region = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::region(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MutateRowsRequest)
  return target;
}

size_t MutateRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MutateRowsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.MutationProto mutation_request = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mutation_request_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mutation_request(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .hbase.pb.RegionSpecifier region = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_);
    }

    // optional uint64 nonce_group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nonce_group());
    }

    // optional uint64 nonce = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutateRowsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MutateRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateRowsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutateRowsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MutateRowsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MutateRowsRequest)
    MergeFrom(*source);
  }
}

void MutateRowsRequest::MergeFrom(const MutateRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MutateRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutation_request_.MergeFrom(from.mutation_request_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region()->::hbase::pb::RegionSpecifier::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000002u) {
      nonce_group_ = from.nonce_group_;
    }
    if (cached_has_bits & 0x00000004u) {
      nonce_ = from.nonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MutateRowsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MutateRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsRequest::CopyFrom(const MutateRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MutateRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->mutation_request())) return false;
  if (has_region()) {
    if (!this->region_->IsInitialized()) return false;
  }
  return true;
}

void MutateRowsRequest::InternalSwap(MutateRowsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&mutation_request_)->InternalSwap(CastToBase(&other->mutation_request_));
  swap(region_, other->region_);
  swap(nonce_group_, other->nonce_group_);
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutateRowsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutateRowsResponse::InitAsDefaultInstance() {
}
class MutateRowsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MutateRowsResponse>()._has_bits_);
};

MutateRowsResponse::MutateRowsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MutateRowsResponse)
}
MutateRowsResponse::MutateRowsResponse(const MutateRowsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MutateRowsResponse)
}

void MutateRowsResponse::SharedCtor() {
}

MutateRowsResponse::~MutateRowsResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.MutateRowsResponse)
  SharedDtor();
}

void MutateRowsResponse::SharedDtor() {
}

void MutateRowsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutateRowsResponse& MutateRowsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutateRowsResponse_MultiRowMutation_2eproto.base);
  return *internal_default_instance();
}


void MutateRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MutateRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MutateRowsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MutateRowsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MutateRowsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MutateRowsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MutateRowsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MutateRowsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MutateRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MutateRowsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MutateRowsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MutateRowsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MutateRowsResponse)
  return target;
}

size_t MutateRowsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MutateRowsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutateRowsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MutateRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateRowsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutateRowsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MutateRowsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MutateRowsResponse)
    MergeFrom(*source);
  }
}

void MutateRowsResponse::MergeFrom(const MutateRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MutateRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MutateRowsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MutateRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsResponse::CopyFrom(const MutateRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MutateRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsResponse::IsInitialized() const {
  return true;
}

void MutateRowsResponse::InternalSwap(MutateRowsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutateRowsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::MultiRowMutationProcessorRequest* Arena::CreateMaybeMessage< ::hbase::pb::MultiRowMutationProcessorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MultiRowMutationProcessorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MultiRowMutationProcessorResponse* Arena::CreateMaybeMessage< ::hbase::pb::MultiRowMutationProcessorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MultiRowMutationProcessorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MutateRowsRequest* Arena::CreateMaybeMessage< ::hbase::pb::MutateRowsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MutateRowsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MutateRowsResponse* Arena::CreateMaybeMessage< ::hbase::pb::MutateRowsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MutateRowsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
