// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPC.proto

#include "RPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_RPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CellBlockMeta_RPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExceptionResponse_RPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Tracing_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPCTInfo_Tracing_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RPC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInformation_RPC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionInfo_HBase_2eproto;
namespace hbase {
namespace pb {
class UserInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInformation> _instance;
} _UserInformation_default_instance_;
class ConnectionHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectionHeader> _instance;
} _ConnectionHeader_default_instance_;
class CellBlockMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CellBlockMeta> _instance;
} _CellBlockMeta_default_instance_;
class ExceptionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExceptionResponse> _instance;
} _ExceptionResponse_default_instance_;
class RequestHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestHeader> _instance;
} _RequestHeader_default_instance_;
class ResponseHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseHeader> _instance;
} _ResponseHeader_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_CellBlockMeta_RPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CellBlockMeta_default_instance_;
    new (ptr) ::hbase::pb::CellBlockMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CellBlockMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CellBlockMeta_RPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CellBlockMeta_RPC_2eproto}, {}};

static void InitDefaultsscc_info_ConnectionHeader_RPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ConnectionHeader_default_instance_;
    new (ptr) ::hbase::pb::ConnectionHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ConnectionHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConnectionHeader_RPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ConnectionHeader_RPC_2eproto}, {
      &scc_info_UserInformation_RPC_2eproto.base,
      &scc_info_VersionInfo_HBase_2eproto.base,}};

static void InitDefaultsscc_info_ExceptionResponse_RPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ExceptionResponse_default_instance_;
    new (ptr) ::hbase::pb::ExceptionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ExceptionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExceptionResponse_RPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ExceptionResponse_RPC_2eproto}, {}};

static void InitDefaultsscc_info_RequestHeader_RPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RequestHeader_default_instance_;
    new (ptr) ::hbase::pb::RequestHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RequestHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RequestHeader_RPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RequestHeader_RPC_2eproto}, {
      &scc_info_RPCTInfo_Tracing_2eproto.base,
      &scc_info_CellBlockMeta_RPC_2eproto.base,}};

static void InitDefaultsscc_info_ResponseHeader_RPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ResponseHeader_default_instance_;
    new (ptr) ::hbase::pb::ResponseHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ResponseHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResponseHeader_RPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ResponseHeader_RPC_2eproto}, {
      &scc_info_ExceptionResponse_RPC_2eproto.base,
      &scc_info_CellBlockMeta_RPC_2eproto.base,}};

static void InitDefaultsscc_info_UserInformation_RPC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_UserInformation_default_instance_;
    new (ptr) ::hbase::pb::UserInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::UserInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInformation_RPC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserInformation_RPC_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RPC_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RPC_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RPC_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RPC_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UserInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UserInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UserInformation, effective_user_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UserInformation, real_user_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ConnectionHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ConnectionHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ConnectionHeader, user_info_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ConnectionHeader, service_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ConnectionHeader, cell_block_codec_class_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ConnectionHeader, cell_block_compressor_class_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ConnectionHeader, version_info_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CellBlockMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CellBlockMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CellBlockMeta, length_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ExceptionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ExceptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ExceptionResponse, exception_class_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ExceptionResponse, stack_trace_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ExceptionResponse, hostname_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ExceptionResponse, port_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ExceptionResponse, do_not_retry_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RequestHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RequestHeader, call_id_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RequestHeader, trace_info_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RequestHeader, method_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RequestHeader, request_param_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RequestHeader, cell_block_meta_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RequestHeader, priority_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RequestHeader, timeout_),
  3,
  1,
  0,
  4,
  2,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResponseHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResponseHeader, call_id_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResponseHeader, exception_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ResponseHeader, cell_block_meta_),
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hbase::pb::UserInformation)},
  { 9, 19, sizeof(::hbase::pb::ConnectionHeader)},
  { 24, 30, sizeof(::hbase::pb::CellBlockMeta)},
  { 31, 41, sizeof(::hbase::pb::ExceptionResponse)},
  { 46, 58, sizeof(::hbase::pb::RequestHeader)},
  { 65, 73, sizeof(::hbase::pb::ResponseHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_UserInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ConnectionHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CellBlockMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ExceptionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ResponseHeader_default_instance_),
};

const char descriptor_table_protodef_RPC_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tRPC.proto\022\010hbase.pb\032\rTracing.proto\032\013HB"
  "ase.proto\"<\n\017UserInformation\022\026\n\016effectiv"
  "e_user\030\001 \002(\t\022\021\n\treal_user\030\002 \001(\t\"\310\001\n\020Conn"
  "ectionHeader\022,\n\tuser_info\030\001 \001(\0132\031.hbase."
  "pb.UserInformation\022\024\n\014service_name\030\002 \001(\t"
  "\022\036\n\026cell_block_codec_class\030\003 \001(\t\022#\n\033cell"
  "_block_compressor_class\030\004 \001(\t\022+\n\014version"
  "_info\030\005 \001(\0132\025.hbase.pb.VersionInfo\"\037\n\rCe"
  "llBlockMeta\022\016\n\006length\030\001 \001(\r\"|\n\021Exception"
  "Response\022\034\n\024exception_class_name\030\001 \001(\t\022\023"
  "\n\013stack_trace\030\002 \001(\t\022\020\n\010hostname\030\003 \001(\t\022\014\n"
  "\004port\030\004 \001(\005\022\024\n\014do_not_retry\030\005 \001(\010\"\311\001\n\rRe"
  "questHeader\022\017\n\007call_id\030\001 \001(\r\022&\n\ntrace_in"
  "fo\030\002 \001(\0132\022.hbase.pb.RPCTInfo\022\023\n\013method_n"
  "ame\030\003 \001(\t\022\025\n\rrequest_param\030\004 \001(\010\0220\n\017cell"
  "_block_meta\030\005 \001(\0132\027.hbase.pb.CellBlockMe"
  "ta\022\020\n\010priority\030\006 \001(\r\022\017\n\007timeout\030\007 \001(\r\"\203\001"
  "\n\016ResponseHeader\022\017\n\007call_id\030\001 \001(\r\022.\n\texc"
  "eption\030\002 \001(\0132\033.hbase.pb.ExceptionRespons"
  "e\0220\n\017cell_block_meta\030\003 \001(\0132\027.hbase.pb.Ce"
  "llBlockMetaB<\n*org.apache.hadoop.hbase.p"
  "rotobuf.generatedB\tRPCProtosH\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_RPC_2eproto_deps[2] = {
  &::descriptor_table_HBase_2eproto,
  &::descriptor_table_Tracing_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_RPC_2eproto_sccs[6] = {
  &scc_info_CellBlockMeta_RPC_2eproto.base,
  &scc_info_ConnectionHeader_RPC_2eproto.base,
  &scc_info_ExceptionResponse_RPC_2eproto.base,
  &scc_info_RequestHeader_RPC_2eproto.base,
  &scc_info_ResponseHeader_RPC_2eproto.base,
  &scc_info_UserInformation_RPC_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RPC_2eproto_once;
static bool descriptor_table_RPC_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RPC_2eproto = {
  &descriptor_table_RPC_2eproto_initialized, descriptor_table_protodef_RPC_2eproto, "RPC.proto", 873,
  &descriptor_table_RPC_2eproto_once, descriptor_table_RPC_2eproto_sccs, descriptor_table_RPC_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_RPC_2eproto::offsets,
  file_level_metadata_RPC_2eproto, 6, file_level_enum_descriptors_RPC_2eproto, file_level_service_descriptors_RPC_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_RPC_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_RPC_2eproto), true);
namespace hbase {
namespace pb {

// ===================================================================

void UserInformation::InitAsDefaultInstance() {
}
class UserInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInformation>()._has_bits_);
  static void set_has_effective_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_real_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserInformation::UserInformation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.UserInformation)
}
UserInformation::UserInformation(const UserInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  effective_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_effective_user()) {
    effective_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effective_user_);
  }
  real_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_real_user()) {
    real_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.real_user_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.UserInformation)
}

void UserInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInformation_RPC_2eproto.base);
  effective_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  real_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserInformation::~UserInformation() {
  // @@protoc_insertion_point(destructor:hbase.pb.UserInformation)
  SharedDtor();
}

void UserInformation::SharedDtor() {
  effective_user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  real_user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInformation& UserInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInformation_RPC_2eproto.base);
  return *internal_default_instance();
}


void UserInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.UserInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      effective_user_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      real_user_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string effective_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_effective_user(), ptr, ctx, "hbase.pb.UserInformation.effective_user");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string real_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_real_user(), ptr, ctx, "hbase.pb.UserInformation.real_user");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserInformation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.UserInformation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string effective_user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_effective_user()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effective_user().data(), static_cast<int>(this->effective_user().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.UserInformation.effective_user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string real_user = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_real_user()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_user().data(), static_cast<int>(this->real_user().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.UserInformation.real_user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.UserInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.UserInformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserInformation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.UserInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string effective_user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effective_user().data(), static_cast<int>(this->effective_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.UserInformation.effective_user");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->effective_user(), output);
  }

  // optional string real_user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_user().data(), static_cast<int>(this->real_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.UserInformation.real_user");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->real_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.UserInformation)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInformation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.UserInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string effective_user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effective_user().data(), static_cast<int>(this->effective_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.UserInformation.effective_user");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->effective_user(), target);
  }

  // optional string real_user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_user().data(), static_cast<int>(this->real_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.UserInformation.real_user");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->real_user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.UserInformation)
  return target;
}

size_t UserInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.UserInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string effective_user = 1;
  if (has_effective_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->effective_user());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string real_user = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->real_user());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.UserInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.UserInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.UserInformation)
    MergeFrom(*source);
  }
}

void UserInformation::MergeFrom(const UserInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.UserInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      effective_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effective_user_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      real_user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.real_user_);
    }
  }
}

void UserInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.UserInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInformation::CopyFrom(const UserInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.UserInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserInformation::InternalSwap(UserInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  effective_user_.Swap(&other->effective_user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  real_user_.Swap(&other->real_user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectionHeader::InitAsDefaultInstance() {
  ::hbase::pb::_ConnectionHeader_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::hbase::pb::UserInformation*>(
      ::hbase::pb::UserInformation::internal_default_instance());
  ::hbase::pb::_ConnectionHeader_default_instance_._instance.get_mutable()->version_info_ = const_cast< ::hbase::pb::VersionInfo*>(
      ::hbase::pb::VersionInfo::internal_default_instance());
}
class ConnectionHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionHeader>()._has_bits_);
  static const ::hbase::pb::UserInformation& user_info(const ConnectionHeader* msg);
  static void set_has_user_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cell_block_codec_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cell_block_compressor_class(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hbase::pb::VersionInfo& version_info(const ConnectionHeader* msg);
  static void set_has_version_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hbase::pb::UserInformation&
ConnectionHeader::_Internal::user_info(const ConnectionHeader* msg) {
  return *msg->user_info_;
}
const ::hbase::pb::VersionInfo&
ConnectionHeader::_Internal::version_info(const ConnectionHeader* msg) {
  return *msg->version_info_;
}
void ConnectionHeader::clear_version_info() {
  if (version_info_ != nullptr) version_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ConnectionHeader::ConnectionHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ConnectionHeader)
}
ConnectionHeader::ConnectionHeader(const ConnectionHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_name()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  cell_block_codec_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cell_block_codec_class()) {
    cell_block_codec_class_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cell_block_codec_class_);
  }
  cell_block_compressor_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cell_block_compressor_class()) {
    cell_block_compressor_class_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cell_block_compressor_class_);
  }
  if (from.has_user_info()) {
    user_info_ = new ::hbase::pb::UserInformation(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from.has_version_info()) {
    version_info_ = new ::hbase::pb::VersionInfo(*from.version_info_);
  } else {
    version_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ConnectionHeader)
}

void ConnectionHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectionHeader_RPC_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_block_codec_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_block_compressor_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_info_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(version_info_));
}

ConnectionHeader::~ConnectionHeader() {
  // @@protoc_insertion_point(destructor:hbase.pb.ConnectionHeader)
  SharedDtor();
}

void ConnectionHeader::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_block_codec_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_block_compressor_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete version_info_;
}

void ConnectionHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionHeader& ConnectionHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectionHeader_RPC_2eproto.base);
  return *internal_default_instance();
}


void ConnectionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ConnectionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      service_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cell_block_codec_class_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      cell_block_compressor_class_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(user_info_ != nullptr);
      user_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(version_info_ != nullptr);
      version_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectionHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hbase.pb.UserInformation user_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_service_name(), ptr, ctx, "hbase.pb.ConnectionHeader.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cell_block_codec_class = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cell_block_codec_class(), ptr, ctx, "hbase.pb.ConnectionHeader.cell_block_codec_class");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cell_block_compressor_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cell_block_compressor_class(), ptr, ctx, "hbase.pb.ConnectionHeader.cell_block_compressor_class");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.VersionInfo version_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_version_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectionHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ConnectionHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.UserInformation user_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ConnectionHeader.service_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cell_block_codec_class = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cell_block_codec_class()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cell_block_codec_class().data(), static_cast<int>(this->cell_block_codec_class().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ConnectionHeader.cell_block_codec_class");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cell_block_compressor_class = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cell_block_compressor_class()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cell_block_compressor_class().data(), static_cast<int>(this->cell_block_compressor_class().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ConnectionHeader.cell_block_compressor_class");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.VersionInfo version_info = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ConnectionHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ConnectionHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectionHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ConnectionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.UserInformation user_info = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::user_info(this), output);
  }

  // optional string service_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ConnectionHeader.service_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_name(), output);
  }

  // optional string cell_block_codec_class = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_block_codec_class().data(), static_cast<int>(this->cell_block_codec_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ConnectionHeader.cell_block_codec_class");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cell_block_codec_class(), output);
  }

  // optional string cell_block_compressor_class = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_block_compressor_class().data(), static_cast<int>(this->cell_block_compressor_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ConnectionHeader.cell_block_compressor_class");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cell_block_compressor_class(), output);
  }

  // optional .hbase.pb.VersionInfo version_info = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::version_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ConnectionHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ConnectionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.UserInformation user_info = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::user_info(this), target);
  }

  // optional string service_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ConnectionHeader.service_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }

  // optional string cell_block_codec_class = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_block_codec_class().data(), static_cast<int>(this->cell_block_codec_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ConnectionHeader.cell_block_codec_class");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->cell_block_codec_class(), target);
  }

  // optional string cell_block_compressor_class = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_block_compressor_class().data(), static_cast<int>(this->cell_block_compressor_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ConnectionHeader.cell_block_compressor_class");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->cell_block_compressor_class(), target);
  }

  // optional .hbase.pb.VersionInfo version_info = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::version_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ConnectionHeader)
  return target;
}

size_t ConnectionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ConnectionHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string service_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // optional string cell_block_codec_class = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cell_block_codec_class());
    }

    // optional string cell_block_compressor_class = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cell_block_compressor_class());
    }

    // optional .hbase.pb.UserInformation user_info = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_info_);
    }

    // optional .hbase.pb.VersionInfo version_info = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_info_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ConnectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ConnectionHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ConnectionHeader)
    MergeFrom(*source);
  }
}

void ConnectionHeader::MergeFrom(const ConnectionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ConnectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cell_block_codec_class_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cell_block_codec_class_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      cell_block_compressor_class_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cell_block_compressor_class_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_user_info()->::hbase::pb::UserInformation::MergeFrom(from.user_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_version_info()->::hbase::pb::VersionInfo::MergeFrom(from.version_info());
    }
  }
}

void ConnectionHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ConnectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionHeader::CopyFrom(const ConnectionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ConnectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionHeader::IsInitialized() const {
  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  if (has_version_info()) {
    if (!this->version_info_->IsInitialized()) return false;
  }
  return true;
}

void ConnectionHeader::InternalSwap(ConnectionHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cell_block_codec_class_.Swap(&other->cell_block_codec_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cell_block_compressor_class_.Swap(&other->cell_block_compressor_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_info_, other->user_info_);
  swap(version_info_, other->version_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CellBlockMeta::InitAsDefaultInstance() {
}
class CellBlockMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<CellBlockMeta>()._has_bits_);
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CellBlockMeta::CellBlockMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CellBlockMeta)
}
CellBlockMeta::CellBlockMeta(const CellBlockMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CellBlockMeta)
}

void CellBlockMeta::SharedCtor() {
  length_ = 0u;
}

CellBlockMeta::~CellBlockMeta() {
  // @@protoc_insertion_point(destructor:hbase.pb.CellBlockMeta)
  SharedDtor();
}

void CellBlockMeta::SharedDtor() {
}

void CellBlockMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CellBlockMeta& CellBlockMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CellBlockMeta_RPC_2eproto.base);
  return *internal_default_instance();
}


void CellBlockMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CellBlockMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  length_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CellBlockMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CellBlockMeta::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CellBlockMeta)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 length = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CellBlockMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CellBlockMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CellBlockMeta::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CellBlockMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CellBlockMeta)
}

::PROTOBUF_NAMESPACE_ID::uint8* CellBlockMeta::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CellBlockMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CellBlockMeta)
  return target;
}

size_t CellBlockMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CellBlockMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 length = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellBlockMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CellBlockMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const CellBlockMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellBlockMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CellBlockMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CellBlockMeta)
    MergeFrom(*source);
  }
}

void CellBlockMeta::MergeFrom(const CellBlockMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CellBlockMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_length()) {
    set_length(from.length());
  }
}

void CellBlockMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CellBlockMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellBlockMeta::CopyFrom(const CellBlockMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CellBlockMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellBlockMeta::IsInitialized() const {
  return true;
}

void CellBlockMeta::InternalSwap(CellBlockMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellBlockMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExceptionResponse::InitAsDefaultInstance() {
}
class ExceptionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ExceptionResponse>()._has_bits_);
  static void set_has_exception_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stack_trace(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_do_not_retry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ExceptionResponse::ExceptionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ExceptionResponse)
}
ExceptionResponse::ExceptionResponse(const ExceptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exception_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_exception_class_name()) {
    exception_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exception_class_name_);
  }
  stack_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_stack_trace()) {
    stack_trace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stack_trace_);
  }
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&do_not_retry_) -
    reinterpret_cast<char*>(&port_)) + sizeof(do_not_retry_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ExceptionResponse)
}

void ExceptionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExceptionResponse_RPC_2eproto.base);
  exception_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stack_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do_not_retry_) -
      reinterpret_cast<char*>(&port_)) + sizeof(do_not_retry_));
}

ExceptionResponse::~ExceptionResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.ExceptionResponse)
  SharedDtor();
}

void ExceptionResponse::SharedDtor() {
  exception_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stack_trace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExceptionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExceptionResponse& ExceptionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExceptionResponse_RPC_2eproto.base);
  return *internal_default_instance();
}


void ExceptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ExceptionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      exception_class_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stack_trace_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      hostname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&do_not_retry_) -
        reinterpret_cast<char*>(&port_)) + sizeof(do_not_retry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExceptionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string exception_class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_exception_class_name(), ptr, ctx, "hbase.pb.ExceptionResponse.exception_class_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stack_trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_stack_trace(), ptr, ctx, "hbase.pb.ExceptionResponse.stack_trace");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hostname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_hostname(), ptr, ctx, "hbase.pb.ExceptionResponse.hostname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool do_not_retry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_do_not_retry(&has_bits);
          do_not_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExceptionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ExceptionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string exception_class_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exception_class_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exception_class_name().data(), static_cast<int>(this->exception_class_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ExceptionResponse.exception_class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stack_trace = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_stack_trace()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stack_trace().data(), static_cast<int>(this->stack_trace().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ExceptionResponse.stack_trace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hostname = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ExceptionResponse.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_port(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool do_not_retry = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_do_not_retry(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_not_retry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ExceptionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ExceptionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExceptionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ExceptionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string exception_class_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exception_class_name().data(), static_cast<int>(this->exception_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ExceptionResponse.exception_class_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exception_class_name(), output);
  }

  // optional string stack_trace = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stack_trace().data(), static_cast<int>(this->stack_trace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ExceptionResponse.stack_trace");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stack_trace(), output);
  }

  // optional string hostname = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ExceptionResponse.hostname");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hostname(), output);
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional bool do_not_retry = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->do_not_retry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ExceptionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ExceptionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ExceptionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string exception_class_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exception_class_name().data(), static_cast<int>(this->exception_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ExceptionResponse.exception_class_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->exception_class_name(), target);
  }

  // optional string stack_trace = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stack_trace().data(), static_cast<int>(this->stack_trace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ExceptionResponse.stack_trace");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->stack_trace(), target);
  }

  // optional string hostname = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ExceptionResponse.hostname");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional bool do_not_retry = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->do_not_retry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ExceptionResponse)
  return target;
}

size_t ExceptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ExceptionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string exception_class_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->exception_class_name());
    }

    // optional string stack_trace = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->stack_trace());
    }

    // optional string hostname = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional int32 port = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bool do_not_retry = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExceptionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ExceptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExceptionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExceptionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ExceptionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ExceptionResponse)
    MergeFrom(*source);
  }
}

void ExceptionResponse::MergeFrom(const ExceptionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ExceptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      exception_class_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exception_class_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      stack_trace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stack_trace_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      hostname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      do_not_retry_ = from.do_not_retry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExceptionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ExceptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExceptionResponse::CopyFrom(const ExceptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ExceptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExceptionResponse::IsInitialized() const {
  return true;
}

void ExceptionResponse::InternalSwap(ExceptionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  exception_class_name_.Swap(&other->exception_class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stack_trace_.Swap(&other->stack_trace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(do_not_retry_, other->do_not_retry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExceptionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestHeader::InitAsDefaultInstance() {
  ::hbase::pb::_RequestHeader_default_instance_._instance.get_mutable()->trace_info_ = const_cast< ::hbase::pb::RPCTInfo*>(
      ::hbase::pb::RPCTInfo::internal_default_instance());
  ::hbase::pb::_RequestHeader_default_instance_._instance.get_mutable()->cell_block_meta_ = const_cast< ::hbase::pb::CellBlockMeta*>(
      ::hbase::pb::CellBlockMeta::internal_default_instance());
}
class RequestHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestHeader>()._has_bits_);
  static void set_has_call_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hbase::pb::RPCTInfo& trace_info(const RequestHeader* msg);
  static void set_has_trace_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hbase::pb::CellBlockMeta& cell_block_meta(const RequestHeader* msg);
  static void set_has_cell_block_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::hbase::pb::RPCTInfo&
RequestHeader::_Internal::trace_info(const RequestHeader* msg) {
  return *msg->trace_info_;
}
const ::hbase::pb::CellBlockMeta&
RequestHeader::_Internal::cell_block_meta(const RequestHeader* msg) {
  return *msg->cell_block_meta_;
}
void RequestHeader::clear_trace_info() {
  if (trace_info_ != nullptr) trace_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RequestHeader::RequestHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_name()) {
    method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.has_trace_info()) {
    trace_info_ = new ::hbase::pb::RPCTInfo(*from.trace_info_);
  } else {
    trace_info_ = nullptr;
  }
  if (from.has_cell_block_meta()) {
    cell_block_meta_ = new ::hbase::pb::CellBlockMeta(*from.cell_block_meta_);
  } else {
    cell_block_meta_ = nullptr;
  }
  ::memcpy(&call_id_, &from.call_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&call_id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestHeader_RPC_2eproto.base);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trace_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&trace_info_)) + sizeof(timeout_));
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:hbase.pb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trace_info_;
  if (this != internal_default_instance()) delete cell_block_meta_;
}

void RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestHeader& RequestHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestHeader_RPC_2eproto.base);
  return *internal_default_instance();
}


void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trace_info_ != nullptr);
      trace_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cell_block_meta_ != nullptr);
      cell_block_meta_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&call_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&call_id_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 call_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_call_id(&has_bits);
          call_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.RPCTInfo trace_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_trace_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_method_name(), ptr, ctx, "hbase.pb.RequestHeader.method_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool request_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_request_param(&has_bits);
          request_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cell_block_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RequestHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 call_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_call_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.RPCTInfo trace_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trace_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.RequestHeader.method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool request_param = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_request_param(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cell_block_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 priority = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_priority(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_timeout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RequestHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 call_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->call_id(), output);
  }

  // optional .hbase.pb.RPCTInfo trace_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::trace_info(this), output);
  }

  // optional string method_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.RequestHeader.method_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method_name(), output);
  }

  // optional bool request_param = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->request_param(), output);
  }

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::cell_block_meta(this), output);
  }

  // optional uint32 priority = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->priority(), output);
  }

  // optional uint32 timeout = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RequestHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 call_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->call_id(), target);
  }

  // optional .hbase.pb.RPCTInfo trace_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::trace_info(this), target);
  }

  // optional string method_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.RequestHeader.method_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  // optional bool request_param = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->request_param(), target);
  }

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::cell_block_meta(this), target);
  }

  // optional uint32 priority = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->priority(), target);
  }

  // optional uint32 timeout = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RequestHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string method_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional .hbase.pb.RPCTInfo trace_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trace_info_);
    }

    // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_block_meta_);
    }

    // optional uint32 call_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->call_id());
    }

    // optional bool request_param = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 priority = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

    // optional uint32 timeout = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RequestHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trace_info()->::hbase::pb::RPCTInfo::MergeFrom(from.trace_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cell_block_meta()->::hbase::pb::CellBlockMeta::MergeFrom(from.cell_block_meta());
    }
    if (cached_has_bits & 0x00000008u) {
      call_id_ = from.call_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_param_ = from.request_param_;
    }
    if (cached_has_bits & 0x00000020u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000040u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  method_name_.Swap(&other->method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trace_info_, other->trace_info_);
  swap(cell_block_meta_, other->cell_block_meta_);
  swap(call_id_, other->call_id_);
  swap(request_param_, other->request_param_);
  swap(priority_, other->priority_);
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseHeader::InitAsDefaultInstance() {
  ::hbase::pb::_ResponseHeader_default_instance_._instance.get_mutable()->exception_ = const_cast< ::hbase::pb::ExceptionResponse*>(
      ::hbase::pb::ExceptionResponse::internal_default_instance());
  ::hbase::pb::_ResponseHeader_default_instance_._instance.get_mutable()->cell_block_meta_ = const_cast< ::hbase::pb::CellBlockMeta*>(
      ::hbase::pb::CellBlockMeta::internal_default_instance());
}
class ResponseHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseHeader>()._has_bits_);
  static void set_has_call_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hbase::pb::ExceptionResponse& exception(const ResponseHeader* msg);
  static void set_has_exception(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::CellBlockMeta& cell_block_meta(const ResponseHeader* msg);
  static void set_has_cell_block_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hbase::pb::ExceptionResponse&
ResponseHeader::_Internal::exception(const ResponseHeader* msg) {
  return *msg->exception_;
}
const ::hbase::pb::CellBlockMeta&
ResponseHeader::_Internal::cell_block_meta(const ResponseHeader* msg) {
  return *msg->cell_block_meta_;
}
ResponseHeader::ResponseHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exception()) {
    exception_ = new ::hbase::pb::ExceptionResponse(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  if (from.has_cell_block_meta()) {
    cell_block_meta_ = new ::hbase::pb::CellBlockMeta(*from.cell_block_meta_);
  } else {
    cell_block_meta_ = nullptr;
  }
  call_id_ = from.call_id_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseHeader_RPC_2eproto.base);
  ::memset(&exception_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&call_id_) -
      reinterpret_cast<char*>(&exception_)) + sizeof(call_id_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:hbase.pb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != internal_default_instance()) delete exception_;
  if (this != internal_default_instance()) delete cell_block_meta_;
}

void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseHeader& ResponseHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseHeader_RPC_2eproto.base);
  return *internal_default_instance();
}


void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(exception_ != nullptr);
      exception_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_block_meta_ != nullptr);
      cell_block_meta_->Clear();
    }
  }
  call_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 call_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_call_id(&has_bits);
          call_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.ExceptionResponse exception = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_cell_block_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ResponseHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 call_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_call_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.ExceptionResponse exception = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cell_block_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ResponseHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 call_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->call_id(), output);
  }

  // optional .hbase.pb.ExceptionResponse exception = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::exception(this), output);
  }

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::cell_block_meta(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ResponseHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 call_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->call_id(), target);
  }

  // optional .hbase.pb.ExceptionResponse exception = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::exception(this), target);
  }

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::cell_block_meta(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ResponseHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .hbase.pb.ExceptionResponse exception = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exception_);
    }

    // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_block_meta_);
    }

    // optional uint32 call_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->call_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ResponseHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_exception()->::hbase::pb::ExceptionResponse::MergeFrom(from.exception());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cell_block_meta()->::hbase::pb::CellBlockMeta::MergeFrom(from.cell_block_meta());
    }
    if (cached_has_bits & 0x00000004u) {
      call_id_ = from.call_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(exception_, other->exception_);
  swap(cell_block_meta_, other->cell_block_meta_);
  swap(call_id_, other->call_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::UserInformation* Arena::CreateMaybeMessage< ::hbase::pb::UserInformation >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::UserInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ConnectionHeader* Arena::CreateMaybeMessage< ::hbase::pb::ConnectionHeader >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ConnectionHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CellBlockMeta* Arena::CreateMaybeMessage< ::hbase::pb::CellBlockMeta >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CellBlockMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ExceptionResponse* Arena::CreateMaybeMessage< ::hbase::pb::ExceptionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ExceptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RequestHeader* Arena::CreateMaybeMessage< ::hbase::pb::RequestHeader >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ResponseHeader* Arena::CreateMaybeMessage< ::hbase::pb::ResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ResponseHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
