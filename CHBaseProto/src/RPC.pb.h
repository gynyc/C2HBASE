// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RPC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RPC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Tracing.pb.h"
#include "HBase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RPC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RPC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RPC_2eproto;
namespace hbase {
namespace pb {
class CellBlockMeta;
class CellBlockMetaDefaultTypeInternal;
extern CellBlockMetaDefaultTypeInternal _CellBlockMeta_default_instance_;
class ConnectionHeader;
class ConnectionHeaderDefaultTypeInternal;
extern ConnectionHeaderDefaultTypeInternal _ConnectionHeader_default_instance_;
class ExceptionResponse;
class ExceptionResponseDefaultTypeInternal;
extern ExceptionResponseDefaultTypeInternal _ExceptionResponse_default_instance_;
class RequestHeader;
class RequestHeaderDefaultTypeInternal;
extern RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
class ResponseHeader;
class ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
class UserInformation;
class UserInformationDefaultTypeInternal;
extern UserInformationDefaultTypeInternal _UserInformation_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::CellBlockMeta* Arena::CreateMaybeMessage<::hbase::pb::CellBlockMeta>(Arena*);
template<> ::hbase::pb::ConnectionHeader* Arena::CreateMaybeMessage<::hbase::pb::ConnectionHeader>(Arena*);
template<> ::hbase::pb::ExceptionResponse* Arena::CreateMaybeMessage<::hbase::pb::ExceptionResponse>(Arena*);
template<> ::hbase::pb::RequestHeader* Arena::CreateMaybeMessage<::hbase::pb::RequestHeader>(Arena*);
template<> ::hbase::pb::ResponseHeader* Arena::CreateMaybeMessage<::hbase::pb::ResponseHeader>(Arena*);
template<> ::hbase::pb::UserInformation* Arena::CreateMaybeMessage<::hbase::pb::UserInformation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

// ===================================================================

class UserInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.UserInformation) */ {
 public:
  UserInformation();
  virtual ~UserInformation();

  UserInformation(const UserInformation& from);
  UserInformation(UserInformation&& from) noexcept
    : UserInformation() {
    *this = ::std::move(from);
  }

  inline UserInformation& operator=(const UserInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInformation& operator=(UserInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInformation* internal_default_instance() {
    return reinterpret_cast<const UserInformation*>(
               &_UserInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInformation& a, UserInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInformation* New() const final {
    return CreateMaybeMessage<UserInformation>(nullptr);
  }

  UserInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInformation& from);
  void MergeFrom(const UserInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.UserInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RPC_2eproto);
    return ::descriptor_table_RPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectiveUserFieldNumber = 1,
    kRealUserFieldNumber = 2,
  };
  // required string effective_user = 1;
  bool has_effective_user() const;
  void clear_effective_user();
  const std::string& effective_user() const;
  void set_effective_user(const std::string& value);
  void set_effective_user(std::string&& value);
  void set_effective_user(const char* value);
  void set_effective_user(const char* value, size_t size);
  std::string* mutable_effective_user();
  std::string* release_effective_user();
  void set_allocated_effective_user(std::string* effective_user);

  // optional string real_user = 2;
  bool has_real_user() const;
  void clear_real_user();
  const std::string& real_user() const;
  void set_real_user(const std::string& value);
  void set_real_user(std::string&& value);
  void set_real_user(const char* value);
  void set_real_user(const char* value, size_t size);
  std::string* mutable_real_user();
  std::string* release_real_user();
  void set_allocated_real_user(std::string* real_user);

  // @@protoc_insertion_point(class_scope:hbase.pb.UserInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effective_user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_user_;
  friend struct ::TableStruct_RPC_2eproto;
};
// -------------------------------------------------------------------

class ConnectionHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ConnectionHeader) */ {
 public:
  ConnectionHeader();
  virtual ~ConnectionHeader();

  ConnectionHeader(const ConnectionHeader& from);
  ConnectionHeader(ConnectionHeader&& from) noexcept
    : ConnectionHeader() {
    *this = ::std::move(from);
  }

  inline ConnectionHeader& operator=(const ConnectionHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionHeader& operator=(ConnectionHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionHeader* internal_default_instance() {
    return reinterpret_cast<const ConnectionHeader*>(
               &_ConnectionHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectionHeader& a, ConnectionHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionHeader* New() const final {
    return CreateMaybeMessage<ConnectionHeader>(nullptr);
  }

  ConnectionHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionHeader& from);
  void MergeFrom(const ConnectionHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ConnectionHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RPC_2eproto);
    return ::descriptor_table_RPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 2,
    kCellBlockCodecClassFieldNumber = 3,
    kCellBlockCompressorClassFieldNumber = 4,
    kUserInfoFieldNumber = 1,
    kVersionInfoFieldNumber = 5,
  };
  // optional string service_name = 2;
  bool has_service_name() const;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);

  // optional string cell_block_codec_class = 3;
  bool has_cell_block_codec_class() const;
  void clear_cell_block_codec_class();
  const std::string& cell_block_codec_class() const;
  void set_cell_block_codec_class(const std::string& value);
  void set_cell_block_codec_class(std::string&& value);
  void set_cell_block_codec_class(const char* value);
  void set_cell_block_codec_class(const char* value, size_t size);
  std::string* mutable_cell_block_codec_class();
  std::string* release_cell_block_codec_class();
  void set_allocated_cell_block_codec_class(std::string* cell_block_codec_class);

  // optional string cell_block_compressor_class = 4;
  bool has_cell_block_compressor_class() const;
  void clear_cell_block_compressor_class();
  const std::string& cell_block_compressor_class() const;
  void set_cell_block_compressor_class(const std::string& value);
  void set_cell_block_compressor_class(std::string&& value);
  void set_cell_block_compressor_class(const char* value);
  void set_cell_block_compressor_class(const char* value, size_t size);
  std::string* mutable_cell_block_compressor_class();
  std::string* release_cell_block_compressor_class();
  void set_allocated_cell_block_compressor_class(std::string* cell_block_compressor_class);

  // optional .hbase.pb.UserInformation user_info = 1;
  bool has_user_info() const;
  void clear_user_info();
  const ::hbase::pb::UserInformation& user_info() const;
  ::hbase::pb::UserInformation* release_user_info();
  ::hbase::pb::UserInformation* mutable_user_info();
  void set_allocated_user_info(::hbase::pb::UserInformation* user_info);

  // optional .hbase.pb.VersionInfo version_info = 5;
  bool has_version_info() const;
  void clear_version_info();
  const ::hbase::pb::VersionInfo& version_info() const;
  ::hbase::pb::VersionInfo* release_version_info();
  ::hbase::pb::VersionInfo* mutable_version_info();
  void set_allocated_version_info(::hbase::pb::VersionInfo* version_info);

  // @@protoc_insertion_point(class_scope:hbase.pb.ConnectionHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_block_codec_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_block_compressor_class_;
  ::hbase::pb::UserInformation* user_info_;
  ::hbase::pb::VersionInfo* version_info_;
  friend struct ::TableStruct_RPC_2eproto;
};
// -------------------------------------------------------------------

class CellBlockMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.CellBlockMeta) */ {
 public:
  CellBlockMeta();
  virtual ~CellBlockMeta();

  CellBlockMeta(const CellBlockMeta& from);
  CellBlockMeta(CellBlockMeta&& from) noexcept
    : CellBlockMeta() {
    *this = ::std::move(from);
  }

  inline CellBlockMeta& operator=(const CellBlockMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellBlockMeta& operator=(CellBlockMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CellBlockMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CellBlockMeta* internal_default_instance() {
    return reinterpret_cast<const CellBlockMeta*>(
               &_CellBlockMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CellBlockMeta& a, CellBlockMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(CellBlockMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellBlockMeta* New() const final {
    return CreateMaybeMessage<CellBlockMeta>(nullptr);
  }

  CellBlockMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellBlockMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellBlockMeta& from);
  void MergeFrom(const CellBlockMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellBlockMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.CellBlockMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RPC_2eproto);
    return ::descriptor_table_RPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
  };
  // optional uint32 length = 1;
  bool has_length() const;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.CellBlockMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  friend struct ::TableStruct_RPC_2eproto;
};
// -------------------------------------------------------------------

class ExceptionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ExceptionResponse) */ {
 public:
  ExceptionResponse();
  virtual ~ExceptionResponse();

  ExceptionResponse(const ExceptionResponse& from);
  ExceptionResponse(ExceptionResponse&& from) noexcept
    : ExceptionResponse() {
    *this = ::std::move(from);
  }

  inline ExceptionResponse& operator=(const ExceptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExceptionResponse& operator=(ExceptionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExceptionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExceptionResponse* internal_default_instance() {
    return reinterpret_cast<const ExceptionResponse*>(
               &_ExceptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExceptionResponse& a, ExceptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExceptionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExceptionResponse* New() const final {
    return CreateMaybeMessage<ExceptionResponse>(nullptr);
  }

  ExceptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExceptionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExceptionResponse& from);
  void MergeFrom(const ExceptionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExceptionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ExceptionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RPC_2eproto);
    return ::descriptor_table_RPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExceptionClassNameFieldNumber = 1,
    kStackTraceFieldNumber = 2,
    kHostnameFieldNumber = 3,
    kPortFieldNumber = 4,
    kDoNotRetryFieldNumber = 5,
  };
  // optional string exception_class_name = 1;
  bool has_exception_class_name() const;
  void clear_exception_class_name();
  const std::string& exception_class_name() const;
  void set_exception_class_name(const std::string& value);
  void set_exception_class_name(std::string&& value);
  void set_exception_class_name(const char* value);
  void set_exception_class_name(const char* value, size_t size);
  std::string* mutable_exception_class_name();
  std::string* release_exception_class_name();
  void set_allocated_exception_class_name(std::string* exception_class_name);

  // optional string stack_trace = 2;
  bool has_stack_trace() const;
  void clear_stack_trace();
  const std::string& stack_trace() const;
  void set_stack_trace(const std::string& value);
  void set_stack_trace(std::string&& value);
  void set_stack_trace(const char* value);
  void set_stack_trace(const char* value, size_t size);
  std::string* mutable_stack_trace();
  std::string* release_stack_trace();
  void set_allocated_stack_trace(std::string* stack_trace);

  // optional string hostname = 3;
  bool has_hostname() const;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);

  // optional int32 port = 4;
  bool has_port() const;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool do_not_retry = 5;
  bool has_do_not_retry() const;
  void clear_do_not_retry();
  bool do_not_retry() const;
  void set_do_not_retry(bool value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ExceptionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exception_class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stack_trace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  bool do_not_retry_;
  friend struct ::TableStruct_RPC_2eproto;
};
// -------------------------------------------------------------------

class RequestHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.RequestHeader) */ {
 public:
  RequestHeader();
  virtual ~RequestHeader();

  RequestHeader(const RequestHeader& from);
  RequestHeader(RequestHeader&& from) noexcept
    : RequestHeader() {
    *this = ::std::move(from);
  }

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeader& operator=(RequestHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestHeader* internal_default_instance() {
    return reinterpret_cast<const RequestHeader*>(
               &_RequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestHeader& a, RequestHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestHeader* New() const final {
    return CreateMaybeMessage<RequestHeader>(nullptr);
  }

  RequestHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.RequestHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RPC_2eproto);
    return ::descriptor_table_RPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodNameFieldNumber = 3,
    kTraceInfoFieldNumber = 2,
    kCellBlockMetaFieldNumber = 5,
    kCallIdFieldNumber = 1,
    kRequestParamFieldNumber = 4,
    kPriorityFieldNumber = 6,
    kTimeoutFieldNumber = 7,
  };
  // optional string method_name = 3;
  bool has_method_name() const;
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);

  // optional .hbase.pb.RPCTInfo trace_info = 2;
  bool has_trace_info() const;
  void clear_trace_info();
  const ::hbase::pb::RPCTInfo& trace_info() const;
  ::hbase::pb::RPCTInfo* release_trace_info();
  ::hbase::pb::RPCTInfo* mutable_trace_info();
  void set_allocated_trace_info(::hbase::pb::RPCTInfo* trace_info);

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
  bool has_cell_block_meta() const;
  void clear_cell_block_meta();
  const ::hbase::pb::CellBlockMeta& cell_block_meta() const;
  ::hbase::pb::CellBlockMeta* release_cell_block_meta();
  ::hbase::pb::CellBlockMeta* mutable_cell_block_meta();
  void set_allocated_cell_block_meta(::hbase::pb::CellBlockMeta* cell_block_meta);

  // optional uint32 call_id = 1;
  bool has_call_id() const;
  void clear_call_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id() const;
  void set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool request_param = 4;
  bool has_request_param() const;
  void clear_request_param();
  bool request_param() const;
  void set_request_param(bool value);

  // optional uint32 priority = 6;
  bool has_priority() const;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 timeout = 7;
  bool has_timeout() const;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.RequestHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::hbase::pb::RPCTInfo* trace_info_;
  ::hbase::pb::CellBlockMeta* cell_block_meta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id_;
  bool request_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_RPC_2eproto;
};
// -------------------------------------------------------------------

class ResponseHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ResponseHeader) */ {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);
  ResponseHeader(ResponseHeader&& from) noexcept
    : ResponseHeader() {
    *this = ::std::move(from);
  }

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseHeader& operator=(ResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ResponseHeader*>(
               &_ResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponseHeader& a, ResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeader* New() const final {
    return CreateMaybeMessage<ResponseHeader>(nullptr);
  }

  ResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ResponseHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RPC_2eproto);
    return ::descriptor_table_RPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExceptionFieldNumber = 2,
    kCellBlockMetaFieldNumber = 3,
    kCallIdFieldNumber = 1,
  };
  // optional .hbase.pb.ExceptionResponse exception = 2;
  bool has_exception() const;
  void clear_exception();
  const ::hbase::pb::ExceptionResponse& exception() const;
  ::hbase::pb::ExceptionResponse* release_exception();
  ::hbase::pb::ExceptionResponse* mutable_exception();
  void set_allocated_exception(::hbase::pb::ExceptionResponse* exception);

  // optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
  bool has_cell_block_meta() const;
  void clear_cell_block_meta();
  const ::hbase::pb::CellBlockMeta& cell_block_meta() const;
  ::hbase::pb::CellBlockMeta* release_cell_block_meta();
  ::hbase::pb::CellBlockMeta* mutable_cell_block_meta();
  void set_allocated_cell_block_meta(::hbase::pb::CellBlockMeta* cell_block_meta);

  // optional uint32 call_id = 1;
  bool has_call_id() const;
  void clear_call_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id() const;
  void set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ResponseHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hbase::pb::ExceptionResponse* exception_;
  ::hbase::pb::CellBlockMeta* cell_block_meta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id_;
  friend struct ::TableStruct_RPC_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInformation

// required string effective_user = 1;
inline bool UserInformation::has_effective_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInformation::clear_effective_user() {
  effective_user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserInformation::effective_user() const {
  // @@protoc_insertion_point(field_get:hbase.pb.UserInformation.effective_user)
  return effective_user_.GetNoArena();
}
inline void UserInformation::set_effective_user(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  effective_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.UserInformation.effective_user)
}
inline void UserInformation::set_effective_user(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  effective_user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.UserInformation.effective_user)
}
inline void UserInformation::set_effective_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  effective_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.UserInformation.effective_user)
}
inline void UserInformation::set_effective_user(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  effective_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.UserInformation.effective_user)
}
inline std::string* UserInformation::mutable_effective_user() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.UserInformation.effective_user)
  return effective_user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInformation::release_effective_user() {
  // @@protoc_insertion_point(field_release:hbase.pb.UserInformation.effective_user)
  if (!has_effective_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return effective_user_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInformation::set_allocated_effective_user(std::string* effective_user) {
  if (effective_user != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  effective_user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effective_user);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.UserInformation.effective_user)
}

// optional string real_user = 2;
inline bool UserInformation::has_real_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInformation::clear_real_user() {
  real_user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserInformation::real_user() const {
  // @@protoc_insertion_point(field_get:hbase.pb.UserInformation.real_user)
  return real_user_.GetNoArena();
}
inline void UserInformation::set_real_user(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  real_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.UserInformation.real_user)
}
inline void UserInformation::set_real_user(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  real_user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.UserInformation.real_user)
}
inline void UserInformation::set_real_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  real_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.UserInformation.real_user)
}
inline void UserInformation::set_real_user(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  real_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.UserInformation.real_user)
}
inline std::string* UserInformation::mutable_real_user() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.UserInformation.real_user)
  return real_user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInformation::release_real_user() {
  // @@protoc_insertion_point(field_release:hbase.pb.UserInformation.real_user)
  if (!has_real_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return real_user_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInformation::set_allocated_real_user(std::string* real_user) {
  if (real_user != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  real_user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_user);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.UserInformation.real_user)
}

// -------------------------------------------------------------------

// ConnectionHeader

// optional .hbase.pb.UserInformation user_info = 1;
inline bool ConnectionHeader::has_user_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectionHeader::clear_user_info() {
  if (user_info_ != nullptr) user_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hbase::pb::UserInformation& ConnectionHeader::user_info() const {
  const ::hbase::pb::UserInformation* p = user_info_;
  // @@protoc_insertion_point(field_get:hbase.pb.ConnectionHeader.user_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::UserInformation*>(
      &::hbase::pb::_UserInformation_default_instance_);
}
inline ::hbase::pb::UserInformation* ConnectionHeader::release_user_info() {
  // @@protoc_insertion_point(field_release:hbase.pb.ConnectionHeader.user_info)
  _has_bits_[0] &= ~0x00000008u;
  ::hbase::pb::UserInformation* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::hbase::pb::UserInformation* ConnectionHeader::mutable_user_info() {
  _has_bits_[0] |= 0x00000008u;
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::UserInformation>(GetArenaNoVirtual());
    user_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.ConnectionHeader.user_info)
  return user_info_;
}
inline void ConnectionHeader::set_allocated_user_info(::hbase::pb::UserInformation* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_info_;
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ConnectionHeader.user_info)
}

// optional string service_name = 2;
inline bool ConnectionHeader::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionHeader::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConnectionHeader::service_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ConnectionHeader.service_name)
  return service_name_.GetNoArena();
}
inline void ConnectionHeader::set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ConnectionHeader.service_name)
}
inline void ConnectionHeader::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ConnectionHeader.service_name)
}
inline void ConnectionHeader::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ConnectionHeader.service_name)
}
inline void ConnectionHeader::set_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ConnectionHeader.service_name)
}
inline std::string* ConnectionHeader::mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ConnectionHeader.service_name)
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectionHeader::release_service_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.ConnectionHeader.service_name)
  if (!has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionHeader::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ConnectionHeader.service_name)
}

// optional string cell_block_codec_class = 3;
inline bool ConnectionHeader::has_cell_block_codec_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionHeader::clear_cell_block_codec_class() {
  cell_block_codec_class_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConnectionHeader::cell_block_codec_class() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ConnectionHeader.cell_block_codec_class)
  return cell_block_codec_class_.GetNoArena();
}
inline void ConnectionHeader::set_cell_block_codec_class(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cell_block_codec_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ConnectionHeader.cell_block_codec_class)
}
inline void ConnectionHeader::set_cell_block_codec_class(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cell_block_codec_class_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ConnectionHeader.cell_block_codec_class)
}
inline void ConnectionHeader::set_cell_block_codec_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cell_block_codec_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ConnectionHeader.cell_block_codec_class)
}
inline void ConnectionHeader::set_cell_block_codec_class(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cell_block_codec_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ConnectionHeader.cell_block_codec_class)
}
inline std::string* ConnectionHeader::mutable_cell_block_codec_class() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ConnectionHeader.cell_block_codec_class)
  return cell_block_codec_class_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectionHeader::release_cell_block_codec_class() {
  // @@protoc_insertion_point(field_release:hbase.pb.ConnectionHeader.cell_block_codec_class)
  if (!has_cell_block_codec_class()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cell_block_codec_class_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionHeader::set_allocated_cell_block_codec_class(std::string* cell_block_codec_class) {
  if (cell_block_codec_class != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_block_codec_class_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_block_codec_class);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ConnectionHeader.cell_block_codec_class)
}

// optional string cell_block_compressor_class = 4;
inline bool ConnectionHeader::has_cell_block_compressor_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectionHeader::clear_cell_block_compressor_class() {
  cell_block_compressor_class_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConnectionHeader::cell_block_compressor_class() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ConnectionHeader.cell_block_compressor_class)
  return cell_block_compressor_class_.GetNoArena();
}
inline void ConnectionHeader::set_cell_block_compressor_class(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cell_block_compressor_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ConnectionHeader.cell_block_compressor_class)
}
inline void ConnectionHeader::set_cell_block_compressor_class(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cell_block_compressor_class_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ConnectionHeader.cell_block_compressor_class)
}
inline void ConnectionHeader::set_cell_block_compressor_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cell_block_compressor_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ConnectionHeader.cell_block_compressor_class)
}
inline void ConnectionHeader::set_cell_block_compressor_class(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cell_block_compressor_class_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ConnectionHeader.cell_block_compressor_class)
}
inline std::string* ConnectionHeader::mutable_cell_block_compressor_class() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ConnectionHeader.cell_block_compressor_class)
  return cell_block_compressor_class_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectionHeader::release_cell_block_compressor_class() {
  // @@protoc_insertion_point(field_release:hbase.pb.ConnectionHeader.cell_block_compressor_class)
  if (!has_cell_block_compressor_class()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cell_block_compressor_class_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionHeader::set_allocated_cell_block_compressor_class(std::string* cell_block_compressor_class) {
  if (cell_block_compressor_class != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cell_block_compressor_class_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_block_compressor_class);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ConnectionHeader.cell_block_compressor_class)
}

// optional .hbase.pb.VersionInfo version_info = 5;
inline bool ConnectionHeader::has_version_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::hbase::pb::VersionInfo& ConnectionHeader::version_info() const {
  const ::hbase::pb::VersionInfo* p = version_info_;
  // @@protoc_insertion_point(field_get:hbase.pb.ConnectionHeader.version_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::VersionInfo*>(
      &::hbase::pb::_VersionInfo_default_instance_);
}
inline ::hbase::pb::VersionInfo* ConnectionHeader::release_version_info() {
  // @@protoc_insertion_point(field_release:hbase.pb.ConnectionHeader.version_info)
  _has_bits_[0] &= ~0x00000010u;
  ::hbase::pb::VersionInfo* temp = version_info_;
  version_info_ = nullptr;
  return temp;
}
inline ::hbase::pb::VersionInfo* ConnectionHeader::mutable_version_info() {
  _has_bits_[0] |= 0x00000010u;
  if (version_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::VersionInfo>(GetArenaNoVirtual());
    version_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.ConnectionHeader.version_info)
  return version_info_;
}
inline void ConnectionHeader::set_allocated_version_info(::hbase::pb::VersionInfo* version_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_info_);
  }
  if (version_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  version_info_ = version_info;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ConnectionHeader.version_info)
}

// -------------------------------------------------------------------

// CellBlockMeta

// optional uint32 length = 1;
inline bool CellBlockMeta::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CellBlockMeta::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellBlockMeta::length() const {
  // @@protoc_insertion_point(field_get:hbase.pb.CellBlockMeta.length)
  return length_;
}
inline void CellBlockMeta::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  length_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.CellBlockMeta.length)
}

// -------------------------------------------------------------------

// ExceptionResponse

// optional string exception_class_name = 1;
inline bool ExceptionResponse::has_exception_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExceptionResponse::clear_exception_class_name() {
  exception_class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExceptionResponse::exception_class_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ExceptionResponse.exception_class_name)
  return exception_class_name_.GetNoArena();
}
inline void ExceptionResponse::set_exception_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  exception_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ExceptionResponse.exception_class_name)
}
inline void ExceptionResponse::set_exception_class_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  exception_class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ExceptionResponse.exception_class_name)
}
inline void ExceptionResponse::set_exception_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  exception_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ExceptionResponse.exception_class_name)
}
inline void ExceptionResponse::set_exception_class_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  exception_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ExceptionResponse.exception_class_name)
}
inline std::string* ExceptionResponse::mutable_exception_class_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ExceptionResponse.exception_class_name)
  return exception_class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExceptionResponse::release_exception_class_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.ExceptionResponse.exception_class_name)
  if (!has_exception_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return exception_class_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExceptionResponse::set_allocated_exception_class_name(std::string* exception_class_name) {
  if (exception_class_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  exception_class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exception_class_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ExceptionResponse.exception_class_name)
}

// optional string stack_trace = 2;
inline bool ExceptionResponse::has_stack_trace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExceptionResponse::clear_stack_trace() {
  stack_trace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExceptionResponse::stack_trace() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ExceptionResponse.stack_trace)
  return stack_trace_.GetNoArena();
}
inline void ExceptionResponse::set_stack_trace(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  stack_trace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ExceptionResponse.stack_trace)
}
inline void ExceptionResponse::set_stack_trace(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  stack_trace_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ExceptionResponse.stack_trace)
}
inline void ExceptionResponse::set_stack_trace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  stack_trace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ExceptionResponse.stack_trace)
}
inline void ExceptionResponse::set_stack_trace(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  stack_trace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ExceptionResponse.stack_trace)
}
inline std::string* ExceptionResponse::mutable_stack_trace() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ExceptionResponse.stack_trace)
  return stack_trace_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExceptionResponse::release_stack_trace() {
  // @@protoc_insertion_point(field_release:hbase.pb.ExceptionResponse.stack_trace)
  if (!has_stack_trace()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return stack_trace_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExceptionResponse::set_allocated_stack_trace(std::string* stack_trace) {
  if (stack_trace != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stack_trace_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stack_trace);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ExceptionResponse.stack_trace)
}

// optional string hostname = 3;
inline bool ExceptionResponse::has_hostname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExceptionResponse::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ExceptionResponse::hostname() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ExceptionResponse.hostname)
  return hostname_.GetNoArena();
}
inline void ExceptionResponse::set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ExceptionResponse.hostname)
}
inline void ExceptionResponse::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  hostname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ExceptionResponse.hostname)
}
inline void ExceptionResponse::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ExceptionResponse.hostname)
}
inline void ExceptionResponse::set_hostname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  hostname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ExceptionResponse.hostname)
}
inline std::string* ExceptionResponse::mutable_hostname() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ExceptionResponse.hostname)
  return hostname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExceptionResponse::release_hostname() {
  // @@protoc_insertion_point(field_release:hbase.pb.ExceptionResponse.hostname)
  if (!has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return hostname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExceptionResponse::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hostname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ExceptionResponse.hostname)
}

// optional int32 port = 4;
inline bool ExceptionResponse::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExceptionResponse::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExceptionResponse::port() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ExceptionResponse.port)
  return port_;
}
inline void ExceptionResponse::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  port_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.ExceptionResponse.port)
}

// optional bool do_not_retry = 5;
inline bool ExceptionResponse::has_do_not_retry() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExceptionResponse::clear_do_not_retry() {
  do_not_retry_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ExceptionResponse::do_not_retry() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ExceptionResponse.do_not_retry)
  return do_not_retry_;
}
inline void ExceptionResponse::set_do_not_retry(bool value) {
  _has_bits_[0] |= 0x00000010u;
  do_not_retry_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.ExceptionResponse.do_not_retry)
}

// -------------------------------------------------------------------

// RequestHeader

// optional uint32 call_id = 1;
inline bool RequestHeader::has_call_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestHeader::clear_call_id() {
  call_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestHeader::call_id() const {
  // @@protoc_insertion_point(field_get:hbase.pb.RequestHeader.call_id)
  return call_id_;
}
inline void RequestHeader::set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  call_id_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.RequestHeader.call_id)
}

// optional .hbase.pb.RPCTInfo trace_info = 2;
inline bool RequestHeader::has_trace_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::hbase::pb::RPCTInfo& RequestHeader::trace_info() const {
  const ::hbase::pb::RPCTInfo* p = trace_info_;
  // @@protoc_insertion_point(field_get:hbase.pb.RequestHeader.trace_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RPCTInfo*>(
      &::hbase::pb::_RPCTInfo_default_instance_);
}
inline ::hbase::pb::RPCTInfo* RequestHeader::release_trace_info() {
  // @@protoc_insertion_point(field_release:hbase.pb.RequestHeader.trace_info)
  _has_bits_[0] &= ~0x00000002u;
  ::hbase::pb::RPCTInfo* temp = trace_info_;
  trace_info_ = nullptr;
  return temp;
}
inline ::hbase::pb::RPCTInfo* RequestHeader::mutable_trace_info() {
  _has_bits_[0] |= 0x00000002u;
  if (trace_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RPCTInfo>(GetArenaNoVirtual());
    trace_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.RequestHeader.trace_info)
  return trace_info_;
}
inline void RequestHeader::set_allocated_trace_info(::hbase::pb::RPCTInfo* trace_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_info_);
  }
  if (trace_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trace_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trace_info_ = trace_info;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.RequestHeader.trace_info)
}

// optional string method_name = 3;
inline bool RequestHeader::has_method_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestHeader::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestHeader::method_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.RequestHeader.method_name)
  return method_name_.GetNoArena();
}
inline void RequestHeader::set_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.RequestHeader.method_name)
}
inline void RequestHeader::set_method_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  method_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.RequestHeader.method_name)
}
inline void RequestHeader::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.RequestHeader.method_name)
}
inline void RequestHeader::set_method_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.RequestHeader.method_name)
}
inline std::string* RequestHeader::mutable_method_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.RequestHeader.method_name)
  return method_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestHeader::release_method_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.RequestHeader.method_name)
  if (!has_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return method_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeader::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  method_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.RequestHeader.method_name)
}

// optional bool request_param = 4;
inline bool RequestHeader::has_request_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestHeader::clear_request_param() {
  request_param_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool RequestHeader::request_param() const {
  // @@protoc_insertion_point(field_get:hbase.pb.RequestHeader.request_param)
  return request_param_;
}
inline void RequestHeader::set_request_param(bool value) {
  _has_bits_[0] |= 0x00000010u;
  request_param_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.RequestHeader.request_param)
}

// optional .hbase.pb.CellBlockMeta cell_block_meta = 5;
inline bool RequestHeader::has_cell_block_meta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestHeader::clear_cell_block_meta() {
  if (cell_block_meta_ != nullptr) cell_block_meta_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hbase::pb::CellBlockMeta& RequestHeader::cell_block_meta() const {
  const ::hbase::pb::CellBlockMeta* p = cell_block_meta_;
  // @@protoc_insertion_point(field_get:hbase.pb.RequestHeader.cell_block_meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::CellBlockMeta*>(
      &::hbase::pb::_CellBlockMeta_default_instance_);
}
inline ::hbase::pb::CellBlockMeta* RequestHeader::release_cell_block_meta() {
  // @@protoc_insertion_point(field_release:hbase.pb.RequestHeader.cell_block_meta)
  _has_bits_[0] &= ~0x00000004u;
  ::hbase::pb::CellBlockMeta* temp = cell_block_meta_;
  cell_block_meta_ = nullptr;
  return temp;
}
inline ::hbase::pb::CellBlockMeta* RequestHeader::mutable_cell_block_meta() {
  _has_bits_[0] |= 0x00000004u;
  if (cell_block_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::CellBlockMeta>(GetArenaNoVirtual());
    cell_block_meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.RequestHeader.cell_block_meta)
  return cell_block_meta_;
}
inline void RequestHeader::set_allocated_cell_block_meta(::hbase::pb::CellBlockMeta* cell_block_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cell_block_meta_;
  }
  if (cell_block_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cell_block_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_block_meta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cell_block_meta_ = cell_block_meta;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.RequestHeader.cell_block_meta)
}

// optional uint32 priority = 6;
inline bool RequestHeader::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestHeader::clear_priority() {
  priority_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestHeader::priority() const {
  // @@protoc_insertion_point(field_get:hbase.pb.RequestHeader.priority)
  return priority_;
}
inline void RequestHeader::set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.RequestHeader.priority)
}

// optional uint32 timeout = 7;
inline bool RequestHeader::has_timeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RequestHeader::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestHeader::timeout() const {
  // @@protoc_insertion_point(field_get:hbase.pb.RequestHeader.timeout)
  return timeout_;
}
inline void RequestHeader::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  timeout_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.RequestHeader.timeout)
}

// -------------------------------------------------------------------

// ResponseHeader

// optional uint32 call_id = 1;
inline bool ResponseHeader::has_call_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseHeader::clear_call_id() {
  call_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResponseHeader::call_id() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ResponseHeader.call_id)
  return call_id_;
}
inline void ResponseHeader::set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  call_id_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.ResponseHeader.call_id)
}

// optional .hbase.pb.ExceptionResponse exception = 2;
inline bool ResponseHeader::has_exception() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseHeader::clear_exception() {
  if (exception_ != nullptr) exception_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hbase::pb::ExceptionResponse& ResponseHeader::exception() const {
  const ::hbase::pb::ExceptionResponse* p = exception_;
  // @@protoc_insertion_point(field_get:hbase.pb.ResponseHeader.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::ExceptionResponse*>(
      &::hbase::pb::_ExceptionResponse_default_instance_);
}
inline ::hbase::pb::ExceptionResponse* ResponseHeader::release_exception() {
  // @@protoc_insertion_point(field_release:hbase.pb.ResponseHeader.exception)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::ExceptionResponse* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::hbase::pb::ExceptionResponse* ResponseHeader::mutable_exception() {
  _has_bits_[0] |= 0x00000001u;
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::ExceptionResponse>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.ResponseHeader.exception)
  return exception_;
}
inline void ResponseHeader::set_allocated_exception(::hbase::pb::ExceptionResponse* exception) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete exception_;
  }
  if (exception) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ResponseHeader.exception)
}

// optional .hbase.pb.CellBlockMeta cell_block_meta = 3;
inline bool ResponseHeader::has_cell_block_meta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseHeader::clear_cell_block_meta() {
  if (cell_block_meta_ != nullptr) cell_block_meta_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hbase::pb::CellBlockMeta& ResponseHeader::cell_block_meta() const {
  const ::hbase::pb::CellBlockMeta* p = cell_block_meta_;
  // @@protoc_insertion_point(field_get:hbase.pb.ResponseHeader.cell_block_meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::CellBlockMeta*>(
      &::hbase::pb::_CellBlockMeta_default_instance_);
}
inline ::hbase::pb::CellBlockMeta* ResponseHeader::release_cell_block_meta() {
  // @@protoc_insertion_point(field_release:hbase.pb.ResponseHeader.cell_block_meta)
  _has_bits_[0] &= ~0x00000002u;
  ::hbase::pb::CellBlockMeta* temp = cell_block_meta_;
  cell_block_meta_ = nullptr;
  return temp;
}
inline ::hbase::pb::CellBlockMeta* ResponseHeader::mutable_cell_block_meta() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_block_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::CellBlockMeta>(GetArenaNoVirtual());
    cell_block_meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.ResponseHeader.cell_block_meta)
  return cell_block_meta_;
}
inline void ResponseHeader::set_allocated_cell_block_meta(::hbase::pb::CellBlockMeta* cell_block_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cell_block_meta_;
  }
  if (cell_block_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cell_block_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_block_meta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_block_meta_ = cell_block_meta;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ResponseHeader.cell_block_meta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RPC_2eproto
