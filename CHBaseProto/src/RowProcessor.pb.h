// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RowProcessor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RowProcessor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RowProcessor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RowProcessor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RowProcessor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RowProcessor_2eproto;
namespace hbase {
namespace pb {
class ProcessRequest;
class ProcessRequestDefaultTypeInternal;
extern ProcessRequestDefaultTypeInternal _ProcessRequest_default_instance_;
class ProcessResponse;
class ProcessResponseDefaultTypeInternal;
extern ProcessResponseDefaultTypeInternal _ProcessResponse_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::ProcessRequest* Arena::CreateMaybeMessage<::hbase::pb::ProcessRequest>(Arena*);
template<> ::hbase::pb::ProcessResponse* Arena::CreateMaybeMessage<::hbase::pb::ProcessResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

// ===================================================================

class ProcessRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ProcessRequest) */ {
 public:
  ProcessRequest();
  virtual ~ProcessRequest();

  ProcessRequest(const ProcessRequest& from);
  ProcessRequest(ProcessRequest&& from) noexcept
    : ProcessRequest() {
    *this = ::std::move(from);
  }

  inline ProcessRequest& operator=(const ProcessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRequest& operator=(ProcessRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessRequest*>(
               &_ProcessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessRequest& a, ProcessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessRequest* New() const final {
    return CreateMaybeMessage<ProcessRequest>(nullptr);
  }

  ProcessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessRequest& from);
  void MergeFrom(const ProcessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ProcessRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RowProcessor_2eproto);
    return ::descriptor_table_RowProcessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowProcessorClassNameFieldNumber = 1,
    kRowProcessorInitializerMessageNameFieldNumber = 2,
    kRowProcessorInitializerMessageFieldNumber = 3,
    kNonceGroupFieldNumber = 4,
    kNonceFieldNumber = 5,
  };
  // required string row_processor_class_name = 1;
  bool has_row_processor_class_name() const;
  void clear_row_processor_class_name();
  const std::string& row_processor_class_name() const;
  void set_row_processor_class_name(const std::string& value);
  void set_row_processor_class_name(std::string&& value);
  void set_row_processor_class_name(const char* value);
  void set_row_processor_class_name(const char* value, size_t size);
  std::string* mutable_row_processor_class_name();
  std::string* release_row_processor_class_name();
  void set_allocated_row_processor_class_name(std::string* row_processor_class_name);

  // optional string row_processor_initializer_message_name = 2;
  bool has_row_processor_initializer_message_name() const;
  void clear_row_processor_initializer_message_name();
  const std::string& row_processor_initializer_message_name() const;
  void set_row_processor_initializer_message_name(const std::string& value);
  void set_row_processor_initializer_message_name(std::string&& value);
  void set_row_processor_initializer_message_name(const char* value);
  void set_row_processor_initializer_message_name(const char* value, size_t size);
  std::string* mutable_row_processor_initializer_message_name();
  std::string* release_row_processor_initializer_message_name();
  void set_allocated_row_processor_initializer_message_name(std::string* row_processor_initializer_message_name);

  // optional bytes row_processor_initializer_message = 3;
  bool has_row_processor_initializer_message() const;
  void clear_row_processor_initializer_message();
  const std::string& row_processor_initializer_message() const;
  void set_row_processor_initializer_message(const std::string& value);
  void set_row_processor_initializer_message(std::string&& value);
  void set_row_processor_initializer_message(const char* value);
  void set_row_processor_initializer_message(const void* value, size_t size);
  std::string* mutable_row_processor_initializer_message();
  std::string* release_row_processor_initializer_message();
  void set_allocated_row_processor_initializer_message(std::string* row_processor_initializer_message);

  // optional uint64 nonce_group = 4;
  bool has_nonce_group() const;
  void clear_nonce_group();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_group() const;
  void set_nonce_group(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 nonce = 5;
  bool has_nonce() const;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.ProcessRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_processor_class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_processor_initializer_message_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_processor_initializer_message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_group_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  friend struct ::TableStruct_RowProcessor_2eproto;
};
// -------------------------------------------------------------------

class ProcessResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ProcessResponse) */ {
 public:
  ProcessResponse();
  virtual ~ProcessResponse();

  ProcessResponse(const ProcessResponse& from);
  ProcessResponse(ProcessResponse&& from) noexcept
    : ProcessResponse() {
    *this = ::std::move(from);
  }

  inline ProcessResponse& operator=(const ProcessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessResponse& operator=(ProcessResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessResponse* internal_default_instance() {
    return reinterpret_cast<const ProcessResponse*>(
               &_ProcessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessResponse& a, ProcessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessResponse* New() const final {
    return CreateMaybeMessage<ProcessResponse>(nullptr);
  }

  ProcessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessResponse& from);
  void MergeFrom(const ProcessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ProcessResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RowProcessor_2eproto);
    return ::descriptor_table_RowProcessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowProcessorResultFieldNumber = 1,
  };
  // required bytes row_processor_result = 1;
  bool has_row_processor_result() const;
  void clear_row_processor_result();
  const std::string& row_processor_result() const;
  void set_row_processor_result(const std::string& value);
  void set_row_processor_result(std::string&& value);
  void set_row_processor_result(const char* value);
  void set_row_processor_result(const void* value, size_t size);
  std::string* mutable_row_processor_result();
  std::string* release_row_processor_result();
  void set_allocated_row_processor_result(std::string* row_processor_result);

  // @@protoc_insertion_point(class_scope:hbase.pb.ProcessResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_processor_result_;
  friend struct ::TableStruct_RowProcessor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessRequest

// required string row_processor_class_name = 1;
inline bool ProcessRequest::has_row_processor_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessRequest::clear_row_processor_class_name() {
  row_processor_class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessRequest::row_processor_class_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ProcessRequest.row_processor_class_name)
  return row_processor_class_name_.GetNoArena();
}
inline void ProcessRequest::set_row_processor_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  row_processor_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ProcessRequest.row_processor_class_name)
}
inline void ProcessRequest::set_row_processor_class_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  row_processor_class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ProcessRequest.row_processor_class_name)
}
inline void ProcessRequest::set_row_processor_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  row_processor_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ProcessRequest.row_processor_class_name)
}
inline void ProcessRequest::set_row_processor_class_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  row_processor_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ProcessRequest.row_processor_class_name)
}
inline std::string* ProcessRequest::mutable_row_processor_class_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ProcessRequest.row_processor_class_name)
  return row_processor_class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessRequest::release_row_processor_class_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.ProcessRequest.row_processor_class_name)
  if (!has_row_processor_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return row_processor_class_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessRequest::set_allocated_row_processor_class_name(std::string* row_processor_class_name) {
  if (row_processor_class_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  row_processor_class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_processor_class_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ProcessRequest.row_processor_class_name)
}

// optional string row_processor_initializer_message_name = 2;
inline bool ProcessRequest::has_row_processor_initializer_message_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessRequest::clear_row_processor_initializer_message_name() {
  row_processor_initializer_message_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProcessRequest::row_processor_initializer_message_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ProcessRequest.row_processor_initializer_message_name)
  return row_processor_initializer_message_name_.GetNoArena();
}
inline void ProcessRequest::set_row_processor_initializer_message_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  row_processor_initializer_message_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ProcessRequest.row_processor_initializer_message_name)
}
inline void ProcessRequest::set_row_processor_initializer_message_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  row_processor_initializer_message_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ProcessRequest.row_processor_initializer_message_name)
}
inline void ProcessRequest::set_row_processor_initializer_message_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  row_processor_initializer_message_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ProcessRequest.row_processor_initializer_message_name)
}
inline void ProcessRequest::set_row_processor_initializer_message_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  row_processor_initializer_message_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ProcessRequest.row_processor_initializer_message_name)
}
inline std::string* ProcessRequest::mutable_row_processor_initializer_message_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ProcessRequest.row_processor_initializer_message_name)
  return row_processor_initializer_message_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessRequest::release_row_processor_initializer_message_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.ProcessRequest.row_processor_initializer_message_name)
  if (!has_row_processor_initializer_message_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return row_processor_initializer_message_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessRequest::set_allocated_row_processor_initializer_message_name(std::string* row_processor_initializer_message_name) {
  if (row_processor_initializer_message_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  row_processor_initializer_message_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_processor_initializer_message_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ProcessRequest.row_processor_initializer_message_name)
}

// optional bytes row_processor_initializer_message = 3;
inline bool ProcessRequest::has_row_processor_initializer_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessRequest::clear_row_processor_initializer_message() {
  row_processor_initializer_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProcessRequest::row_processor_initializer_message() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ProcessRequest.row_processor_initializer_message)
  return row_processor_initializer_message_.GetNoArena();
}
inline void ProcessRequest::set_row_processor_initializer_message(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  row_processor_initializer_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ProcessRequest.row_processor_initializer_message)
}
inline void ProcessRequest::set_row_processor_initializer_message(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  row_processor_initializer_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ProcessRequest.row_processor_initializer_message)
}
inline void ProcessRequest::set_row_processor_initializer_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  row_processor_initializer_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ProcessRequest.row_processor_initializer_message)
}
inline void ProcessRequest::set_row_processor_initializer_message(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  row_processor_initializer_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ProcessRequest.row_processor_initializer_message)
}
inline std::string* ProcessRequest::mutable_row_processor_initializer_message() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ProcessRequest.row_processor_initializer_message)
  return row_processor_initializer_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessRequest::release_row_processor_initializer_message() {
  // @@protoc_insertion_point(field_release:hbase.pb.ProcessRequest.row_processor_initializer_message)
  if (!has_row_processor_initializer_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return row_processor_initializer_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessRequest::set_allocated_row_processor_initializer_message(std::string* row_processor_initializer_message) {
  if (row_processor_initializer_message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  row_processor_initializer_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_processor_initializer_message);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ProcessRequest.row_processor_initializer_message)
}

// optional uint64 nonce_group = 4;
inline bool ProcessRequest::has_nonce_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessRequest::clear_nonce_group() {
  nonce_group_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessRequest::nonce_group() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ProcessRequest.nonce_group)
  return nonce_group_;
}
inline void ProcessRequest::set_nonce_group(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  nonce_group_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.ProcessRequest.nonce_group)
}

// optional uint64 nonce = 5;
inline bool ProcessRequest::has_nonce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessRequest::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProcessRequest::nonce() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ProcessRequest.nonce)
  return nonce_;
}
inline void ProcessRequest::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  nonce_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.ProcessRequest.nonce)
}

// -------------------------------------------------------------------

// ProcessResponse

// required bytes row_processor_result = 1;
inline bool ProcessResponse::has_row_processor_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessResponse::clear_row_processor_result() {
  row_processor_result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessResponse::row_processor_result() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ProcessResponse.row_processor_result)
  return row_processor_result_.GetNoArena();
}
inline void ProcessResponse::set_row_processor_result(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  row_processor_result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ProcessResponse.row_processor_result)
}
inline void ProcessResponse::set_row_processor_result(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  row_processor_result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ProcessResponse.row_processor_result)
}
inline void ProcessResponse::set_row_processor_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  row_processor_result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ProcessResponse.row_processor_result)
}
inline void ProcessResponse::set_row_processor_result(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  row_processor_result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ProcessResponse.row_processor_result)
}
inline std::string* ProcessResponse::mutable_row_processor_result() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ProcessResponse.row_processor_result)
  return row_processor_result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessResponse::release_row_processor_result() {
  // @@protoc_insertion_point(field_release:hbase.pb.ProcessResponse.row_processor_result)
  if (!has_row_processor_result()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return row_processor_result_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessResponse::set_allocated_row_processor_result(std::string* row_processor_result) {
  if (row_processor_result != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  row_processor_result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row_processor_result);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ProcessResponse.row_processor_result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RowProcessor_2eproto
