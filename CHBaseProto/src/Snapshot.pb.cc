// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Snapshot.proto

#include "Snapshot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_FS_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reference_FS_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionInfo_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Snapshot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SnapshotRegionManifest_Snapshot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Snapshot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnapshotRegionManifest_FamilyFiles_Snapshot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Snapshot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnapshotRegionManifest_StoreFile_Snapshot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TableSchema_HBase_2eproto;
namespace hbase {
namespace pb {
class SnapshotFileInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotFileInfo> _instance;
} _SnapshotFileInfo_default_instance_;
class SnapshotRegionManifest_StoreFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotRegionManifest_StoreFile> _instance;
} _SnapshotRegionManifest_StoreFile_default_instance_;
class SnapshotRegionManifest_FamilyFilesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotRegionManifest_FamilyFiles> _instance;
} _SnapshotRegionManifest_FamilyFiles_default_instance_;
class SnapshotRegionManifestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotRegionManifest> _instance;
} _SnapshotRegionManifest_default_instance_;
class SnapshotDataManifestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotDataManifest> _instance;
} _SnapshotDataManifest_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_SnapshotDataManifest_Snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SnapshotDataManifest_default_instance_;
    new (ptr) ::hbase::pb::SnapshotDataManifest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SnapshotDataManifest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SnapshotDataManifest_Snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SnapshotDataManifest_Snapshot_2eproto}, {
      &scc_info_TableSchema_HBase_2eproto.base,
      &scc_info_SnapshotRegionManifest_Snapshot_2eproto.base,}};

static void InitDefaultsscc_info_SnapshotFileInfo_Snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SnapshotFileInfo_default_instance_;
    new (ptr) ::hbase::pb::SnapshotFileInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SnapshotFileInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotFileInfo_Snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SnapshotFileInfo_Snapshot_2eproto}, {}};

static void InitDefaultsscc_info_SnapshotRegionManifest_Snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SnapshotRegionManifest_default_instance_;
    new (ptr) ::hbase::pb::SnapshotRegionManifest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SnapshotRegionManifest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SnapshotRegionManifest_Snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SnapshotRegionManifest_Snapshot_2eproto}, {
      &scc_info_RegionInfo_HBase_2eproto.base,
      &scc_info_SnapshotRegionManifest_FamilyFiles_Snapshot_2eproto.base,}};

static void InitDefaultsscc_info_SnapshotRegionManifest_FamilyFiles_Snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SnapshotRegionManifest_FamilyFiles_default_instance_;
    new (ptr) ::hbase::pb::SnapshotRegionManifest_FamilyFiles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SnapshotRegionManifest_FamilyFiles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnapshotRegionManifest_FamilyFiles_Snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SnapshotRegionManifest_FamilyFiles_Snapshot_2eproto}, {
      &scc_info_SnapshotRegionManifest_StoreFile_Snapshot_2eproto.base,}};

static void InitDefaultsscc_info_SnapshotRegionManifest_StoreFile_Snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SnapshotRegionManifest_StoreFile_default_instance_;
    new (ptr) ::hbase::pb::SnapshotRegionManifest_StoreFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SnapshotRegionManifest_StoreFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnapshotRegionManifest_StoreFile_Snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SnapshotRegionManifest_StoreFile_Snapshot_2eproto}, {
      &scc_info_Reference_FS_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Snapshot_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Snapshot_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Snapshot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Snapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotFileInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotFileInfo, type_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotFileInfo, hfile_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotFileInfo, wal_server_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotFileInfo, wal_name_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest_StoreFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest_StoreFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest_StoreFile, name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest_StoreFile, reference_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest_StoreFile, file_size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest_FamilyFiles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest_FamilyFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest_FamilyFiles, family_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest_FamilyFiles, store_files_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest, version_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest, region_info_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotRegionManifest, family_files_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotDataManifest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotDataManifest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotDataManifest, table_schema_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SnapshotDataManifest, region_manifests_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::hbase::pb::SnapshotFileInfo)},
  { 13, 21, sizeof(::hbase::pb::SnapshotRegionManifest_StoreFile)},
  { 24, 31, sizeof(::hbase::pb::SnapshotRegionManifest_FamilyFiles)},
  { 33, 41, sizeof(::hbase::pb::SnapshotRegionManifest)},
  { 44, 51, sizeof(::hbase::pb::SnapshotDataManifest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SnapshotFileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SnapshotRegionManifest_StoreFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SnapshotRegionManifest_FamilyFiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SnapshotRegionManifest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SnapshotDataManifest_default_instance_),
};

const char descriptor_table_protodef_Snapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Snapshot.proto\022\010hbase.pb\032\010FS.proto\032\013HB"
  "ase.proto\"\222\001\n\020SnapshotFileInfo\022-\n\004type\030\001"
  " \002(\0162\037.hbase.pb.SnapshotFileInfo.Type\022\r\n"
  "\005hfile\030\003 \001(\t\022\022\n\nwal_server\030\004 \001(\t\022\020\n\010wal_"
  "name\030\005 \001(\t\"\032\n\004Type\022\t\n\005HFILE\020\001\022\007\n\003WAL\020\002\"\323"
  "\002\n\026SnapshotRegionManifest\022\017\n\007version\030\001 \001"
  "(\005\022)\n\013region_info\030\002 \002(\0132\024.hbase.pb.Regio"
  "nInfo\022B\n\014family_files\030\003 \003(\0132,.hbase.pb.S"
  "napshotRegionManifest.FamilyFiles\032T\n\tSto"
  "reFile\022\014\n\004name\030\001 \002(\t\022&\n\treference\030\002 \001(\0132"
  "\023.hbase.pb.Reference\022\021\n\tfile_size\030\003 \001(\004\032"
  "c\n\013FamilyFiles\022\023\n\013family_name\030\001 \002(\014\022\?\n\013s"
  "tore_files\030\002 \003(\0132*.hbase.pb.SnapshotRegi"
  "onManifest.StoreFile\"\177\n\024SnapshotDataMani"
  "fest\022+\n\014table_schema\030\001 \002(\0132\025.hbase.pb.Ta"
  "bleSchema\022:\n\020region_manifests\030\002 \003(\0132 .hb"
  "ase.pb.SnapshotRegionManifestBD\n*org.apa"
  "che.hadoop.hbase.protobuf.generatedB\016Sna"
  "pshotProtosH\001\210\001\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Snapshot_2eproto_deps[2] = {
  &::descriptor_table_FS_2eproto,
  &::descriptor_table_HBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Snapshot_2eproto_sccs[5] = {
  &scc_info_SnapshotDataManifest_Snapshot_2eproto.base,
  &scc_info_SnapshotFileInfo_Snapshot_2eproto.base,
  &scc_info_SnapshotRegionManifest_Snapshot_2eproto.base,
  &scc_info_SnapshotRegionManifest_FamilyFiles_Snapshot_2eproto.base,
  &scc_info_SnapshotRegionManifest_StoreFile_Snapshot_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Snapshot_2eproto_once;
static bool descriptor_table_Snapshot_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Snapshot_2eproto = {
  &descriptor_table_Snapshot_2eproto_initialized, descriptor_table_protodef_Snapshot_2eproto, "Snapshot.proto", 739,
  &descriptor_table_Snapshot_2eproto_once, descriptor_table_Snapshot_2eproto_sccs, descriptor_table_Snapshot_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_Snapshot_2eproto::offsets,
  file_level_metadata_Snapshot_2eproto, 5, file_level_enum_descriptors_Snapshot_2eproto, file_level_service_descriptors_Snapshot_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Snapshot_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Snapshot_2eproto), true);
namespace hbase {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnapshotFileInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Snapshot_2eproto);
  return file_level_enum_descriptors_Snapshot_2eproto[0];
}
bool SnapshotFileInfo_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SnapshotFileInfo_Type SnapshotFileInfo::HFILE;
constexpr SnapshotFileInfo_Type SnapshotFileInfo::WAL;
constexpr SnapshotFileInfo_Type SnapshotFileInfo::Type_MIN;
constexpr SnapshotFileInfo_Type SnapshotFileInfo::Type_MAX;
constexpr int SnapshotFileInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SnapshotFileInfo::InitAsDefaultInstance() {
}
class SnapshotFileInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SnapshotFileInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hfile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wal_server(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wal_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SnapshotFileInfo::SnapshotFileInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SnapshotFileInfo)
}
SnapshotFileInfo::SnapshotFileInfo(const SnapshotFileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hfile()) {
    hfile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hfile_);
  }
  wal_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_wal_server()) {
    wal_server_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wal_server_);
  }
  wal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_wal_name()) {
    wal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wal_name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SnapshotFileInfo)
}

void SnapshotFileInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotFileInfo_Snapshot_2eproto.base);
  hfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wal_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

SnapshotFileInfo::~SnapshotFileInfo() {
  // @@protoc_insertion_point(destructor:hbase.pb.SnapshotFileInfo)
  SharedDtor();
}

void SnapshotFileInfo::SharedDtor() {
  hfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wal_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapshotFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotFileInfo& SnapshotFileInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotFileInfo_Snapshot_2eproto.base);
  return *internal_default_instance();
}


void SnapshotFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SnapshotFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hfile_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      wal_server_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      wal_name_.ClearNonDefaultToEmptyNoArena();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotFileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.SnapshotFileInfo.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::SnapshotFileInfo_Type_IsValid(val))) {
            set_type(static_cast<::hbase::pb::SnapshotFileInfo_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string hfile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_hfile(), ptr, ctx, "hbase.pb.SnapshotFileInfo.hfile");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string wal_server = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_wal_server(), ptr, ctx, "hbase.pb.SnapshotFileInfo.wal_server");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string wal_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_wal_name(), ptr, ctx, "hbase.pb.SnapshotFileInfo.wal_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotFileInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SnapshotFileInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.SnapshotFileInfo.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::SnapshotFileInfo_Type_IsValid(value)) {
            set_type(static_cast< ::hbase::pb::SnapshotFileInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hfile = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hfile()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hfile().data(), static_cast<int>(this->hfile().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.SnapshotFileInfo.hfile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wal_server = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_wal_server()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wal_server().data(), static_cast<int>(this->wal_server().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.SnapshotFileInfo.wal_server");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wal_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_wal_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wal_name().data(), static_cast<int>(this->wal_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.SnapshotFileInfo.wal_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SnapshotFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SnapshotFileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotFileInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SnapshotFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.SnapshotFileInfo.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string hfile = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hfile().data(), static_cast<int>(this->hfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SnapshotFileInfo.hfile");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hfile(), output);
  }

  // optional string wal_server = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wal_server().data(), static_cast<int>(this->wal_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SnapshotFileInfo.wal_server");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->wal_server(), output);
  }

  // optional string wal_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wal_name().data(), static_cast<int>(this->wal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SnapshotFileInfo.wal_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->wal_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SnapshotFileInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotFileInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SnapshotFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.SnapshotFileInfo.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string hfile = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hfile().data(), static_cast<int>(this->hfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SnapshotFileInfo.hfile");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->hfile(), target);
  }

  // optional string wal_server = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wal_server().data(), static_cast<int>(this->wal_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SnapshotFileInfo.wal_server");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->wal_server(), target);
  }

  // optional string wal_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wal_name().data(), static_cast<int>(this->wal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SnapshotFileInfo.wal_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->wal_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SnapshotFileInfo)
  return target;
}

size_t SnapshotFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SnapshotFileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.SnapshotFileInfo.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string hfile = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->hfile());
    }

    // optional string wal_server = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->wal_server());
    }

    // optional string wal_name = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->wal_name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotFileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SnapshotFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotFileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotFileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SnapshotFileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SnapshotFileInfo)
    MergeFrom(*source);
  }
}

void SnapshotFileInfo::MergeFrom(const SnapshotFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SnapshotFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hfile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hfile_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      wal_server_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wal_server_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      wal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wal_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnapshotFileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SnapshotFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotFileInfo::CopyFrom(const SnapshotFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SnapshotFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotFileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void SnapshotFileInfo::InternalSwap(SnapshotFileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hfile_.Swap(&other->hfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wal_server_.Swap(&other->wal_server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wal_name_.Swap(&other->wal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotFileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotRegionManifest_StoreFile::InitAsDefaultInstance() {
  ::hbase::pb::_SnapshotRegionManifest_StoreFile_default_instance_._instance.get_mutable()->reference_ = const_cast< ::hbase::pb::Reference*>(
      ::hbase::pb::Reference::internal_default_instance());
}
class SnapshotRegionManifest_StoreFile::_Internal {
 public:
  using HasBits = decltype(std::declval<SnapshotRegionManifest_StoreFile>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hbase::pb::Reference& reference(const SnapshotRegionManifest_StoreFile* msg);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::Reference&
SnapshotRegionManifest_StoreFile::_Internal::reference(const SnapshotRegionManifest_StoreFile* msg) {
  return *msg->reference_;
}
void SnapshotRegionManifest_StoreFile::clear_reference() {
  if (reference_ != nullptr) reference_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SnapshotRegionManifest_StoreFile::SnapshotRegionManifest_StoreFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SnapshotRegionManifest.StoreFile)
}
SnapshotRegionManifest_StoreFile::SnapshotRegionManifest_StoreFile(const SnapshotRegionManifest_StoreFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_reference()) {
    reference_ = new ::hbase::pb::Reference(*from.reference_);
  } else {
    reference_ = nullptr;
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SnapshotRegionManifest.StoreFile)
}

void SnapshotRegionManifest_StoreFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotRegionManifest_StoreFile_Snapshot_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_size_) -
      reinterpret_cast<char*>(&reference_)) + sizeof(file_size_));
}

SnapshotRegionManifest_StoreFile::~SnapshotRegionManifest_StoreFile() {
  // @@protoc_insertion_point(destructor:hbase.pb.SnapshotRegionManifest.StoreFile)
  SharedDtor();
}

void SnapshotRegionManifest_StoreFile::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reference_;
}

void SnapshotRegionManifest_StoreFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotRegionManifest_StoreFile& SnapshotRegionManifest_StoreFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotRegionManifest_StoreFile_Snapshot_2eproto.base);
  return *internal_default_instance();
}


void SnapshotRegionManifest_StoreFile::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SnapshotRegionManifest.StoreFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reference_ != nullptr);
      reference_->Clear();
    }
  }
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotRegionManifest_StoreFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "hbase.pb.SnapshotRegionManifest.StoreFile.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotRegionManifest_StoreFile::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SnapshotRegionManifest.StoreFile)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.SnapshotRegionManifest.StoreFile.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.Reference reference = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 file_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_file_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SnapshotRegionManifest.StoreFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SnapshotRegionManifest.StoreFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotRegionManifest_StoreFile::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SnapshotRegionManifest.StoreFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SnapshotRegionManifest.StoreFile.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .hbase.pb.Reference reference = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::reference(this), output);
  }

  // optional uint64 file_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SnapshotRegionManifest.StoreFile)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotRegionManifest_StoreFile::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SnapshotRegionManifest.StoreFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.SnapshotRegionManifest.StoreFile.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .hbase.pb.Reference reference = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::reference(this), target);
  }

  // optional uint64 file_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SnapshotRegionManifest.StoreFile)
  return target;
}

size_t SnapshotRegionManifest_StoreFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SnapshotRegionManifest.StoreFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hbase.pb.Reference reference = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_);
    }

    // optional uint64 file_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotRegionManifest_StoreFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SnapshotRegionManifest.StoreFile)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotRegionManifest_StoreFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotRegionManifest_StoreFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SnapshotRegionManifest.StoreFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SnapshotRegionManifest.StoreFile)
    MergeFrom(*source);
  }
}

void SnapshotRegionManifest_StoreFile::MergeFrom(const SnapshotRegionManifest_StoreFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SnapshotRegionManifest.StoreFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reference()->::hbase::pb::Reference::MergeFrom(from.reference());
    }
    if (cached_has_bits & 0x00000004u) {
      file_size_ = from.file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnapshotRegionManifest_StoreFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SnapshotRegionManifest.StoreFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRegionManifest_StoreFile::CopyFrom(const SnapshotRegionManifest_StoreFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SnapshotRegionManifest.StoreFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRegionManifest_StoreFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_reference()) {
    if (!this->reference_->IsInitialized()) return false;
  }
  return true;
}

void SnapshotRegionManifest_StoreFile::InternalSwap(SnapshotRegionManifest_StoreFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reference_, other->reference_);
  swap(file_size_, other->file_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotRegionManifest_StoreFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotRegionManifest_FamilyFiles::InitAsDefaultInstance() {
}
class SnapshotRegionManifest_FamilyFiles::_Internal {
 public:
  using HasBits = decltype(std::declval<SnapshotRegionManifest_FamilyFiles>()._has_bits_);
  static void set_has_family_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SnapshotRegionManifest_FamilyFiles::SnapshotRegionManifest_FamilyFiles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SnapshotRegionManifest.FamilyFiles)
}
SnapshotRegionManifest_FamilyFiles::SnapshotRegionManifest_FamilyFiles(const SnapshotRegionManifest_FamilyFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      store_files_(from.store_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family_name()) {
    family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SnapshotRegionManifest.FamilyFiles)
}

void SnapshotRegionManifest_FamilyFiles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotRegionManifest_FamilyFiles_Snapshot_2eproto.base);
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SnapshotRegionManifest_FamilyFiles::~SnapshotRegionManifest_FamilyFiles() {
  // @@protoc_insertion_point(destructor:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  SharedDtor();
}

void SnapshotRegionManifest_FamilyFiles::SharedDtor() {
  family_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapshotRegionManifest_FamilyFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotRegionManifest_FamilyFiles& SnapshotRegionManifest_FamilyFiles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotRegionManifest_FamilyFiles_Snapshot_2eproto.base);
  return *internal_default_instance();
}


void SnapshotRegionManifest_FamilyFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    family_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotRegionManifest_FamilyFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes family_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_store_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotRegionManifest_FamilyFiles::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_store_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotRegionManifest_FamilyFiles::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->family_name(), output);
  }

  // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_files_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->store_files(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SnapshotRegionManifest.FamilyFiles)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotRegionManifest_FamilyFiles::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->family_name(), target);
  }

  // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_files_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->store_files(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  return target;
}

size_t SnapshotRegionManifest_FamilyFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes family_name = 1;
  if (has_family_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->store_files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->store_files(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotRegionManifest_FamilyFiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotRegionManifest_FamilyFiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotRegionManifest_FamilyFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SnapshotRegionManifest.FamilyFiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SnapshotRegionManifest.FamilyFiles)
    MergeFrom(*source);
  }
}

void SnapshotRegionManifest_FamilyFiles::MergeFrom(const SnapshotRegionManifest_FamilyFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_files_.MergeFrom(from.store_files_);
  if (from.has_family_name()) {
    _has_bits_[0] |= 0x00000001u;
    family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
}

void SnapshotRegionManifest_FamilyFiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRegionManifest_FamilyFiles::CopyFrom(const SnapshotRegionManifest_FamilyFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SnapshotRegionManifest.FamilyFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRegionManifest_FamilyFiles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->store_files())) return false;
  return true;
}

void SnapshotRegionManifest_FamilyFiles::InternalSwap(SnapshotRegionManifest_FamilyFiles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&store_files_)->InternalSwap(CastToBase(&other->store_files_));
  family_name_.Swap(&other->family_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotRegionManifest_FamilyFiles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotRegionManifest::InitAsDefaultInstance() {
  ::hbase::pb::_SnapshotRegionManifest_default_instance_._instance.get_mutable()->region_info_ = const_cast< ::hbase::pb::RegionInfo*>(
      ::hbase::pb::RegionInfo::internal_default_instance());
}
class SnapshotRegionManifest::_Internal {
 public:
  using HasBits = decltype(std::declval<SnapshotRegionManifest>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::RegionInfo& region_info(const SnapshotRegionManifest* msg);
  static void set_has_region_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::RegionInfo&
SnapshotRegionManifest::_Internal::region_info(const SnapshotRegionManifest* msg) {
  return *msg->region_info_;
}
void SnapshotRegionManifest::clear_region_info() {
  if (region_info_ != nullptr) region_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SnapshotRegionManifest::SnapshotRegionManifest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SnapshotRegionManifest)
}
SnapshotRegionManifest::SnapshotRegionManifest(const SnapshotRegionManifest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      family_files_(from.family_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_info()) {
    region_info_ = new ::hbase::pb::RegionInfo(*from.region_info_);
  } else {
    region_info_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SnapshotRegionManifest)
}

void SnapshotRegionManifest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotRegionManifest_Snapshot_2eproto.base);
  ::memset(&region_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&region_info_)) + sizeof(version_));
}

SnapshotRegionManifest::~SnapshotRegionManifest() {
  // @@protoc_insertion_point(destructor:hbase.pb.SnapshotRegionManifest)
  SharedDtor();
}

void SnapshotRegionManifest::SharedDtor() {
  if (this != internal_default_instance()) delete region_info_;
}

void SnapshotRegionManifest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotRegionManifest& SnapshotRegionManifest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotRegionManifest_Snapshot_2eproto.base);
  return *internal_default_instance();
}


void SnapshotRegionManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SnapshotRegionManifest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  family_files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(region_info_ != nullptr);
    region_info_->Clear();
  }
  version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotRegionManifest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.RegionInfo region_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_region_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_family_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotRegionManifest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SnapshotRegionManifest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.RegionInfo region_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_family_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SnapshotRegionManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SnapshotRegionManifest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotRegionManifest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SnapshotRegionManifest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required .hbase.pb.RegionInfo region_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::region_info(this), output);
  }

  // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->family_files_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->family_files(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SnapshotRegionManifest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotRegionManifest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SnapshotRegionManifest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required .hbase.pb.RegionInfo region_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::region_info(this), target);
  }

  // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->family_files_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->family_files(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SnapshotRegionManifest)
  return target;
}

size_t SnapshotRegionManifest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SnapshotRegionManifest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.RegionInfo region_info = 2;
  if (has_region_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_info_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->family_files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->family_files(static_cast<int>(i)));
    }
  }

  // optional int32 version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotRegionManifest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SnapshotRegionManifest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotRegionManifest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotRegionManifest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SnapshotRegionManifest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SnapshotRegionManifest)
    MergeFrom(*source);
  }
}

void SnapshotRegionManifest::MergeFrom(const SnapshotRegionManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SnapshotRegionManifest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  family_files_.MergeFrom(from.family_files_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_region_info()->::hbase::pb::RegionInfo::MergeFrom(from.region_info());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnapshotRegionManifest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SnapshotRegionManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRegionManifest::CopyFrom(const SnapshotRegionManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SnapshotRegionManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRegionManifest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->family_files())) return false;
  if (has_region_info()) {
    if (!this->region_info_->IsInitialized()) return false;
  }
  return true;
}

void SnapshotRegionManifest::InternalSwap(SnapshotRegionManifest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&family_files_)->InternalSwap(CastToBase(&other->family_files_));
  swap(region_info_, other->region_info_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotRegionManifest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotDataManifest::InitAsDefaultInstance() {
  ::hbase::pb::_SnapshotDataManifest_default_instance_._instance.get_mutable()->table_schema_ = const_cast< ::hbase::pb::TableSchema*>(
      ::hbase::pb::TableSchema::internal_default_instance());
}
class SnapshotDataManifest::_Internal {
 public:
  using HasBits = decltype(std::declval<SnapshotDataManifest>()._has_bits_);
  static const ::hbase::pb::TableSchema& table_schema(const SnapshotDataManifest* msg);
  static void set_has_table_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::TableSchema&
SnapshotDataManifest::_Internal::table_schema(const SnapshotDataManifest* msg) {
  return *msg->table_schema_;
}
void SnapshotDataManifest::clear_table_schema() {
  if (table_schema_ != nullptr) table_schema_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SnapshotDataManifest::SnapshotDataManifest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SnapshotDataManifest)
}
SnapshotDataManifest::SnapshotDataManifest(const SnapshotDataManifest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      region_manifests_(from.region_manifests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_schema()) {
    table_schema_ = new ::hbase::pb::TableSchema(*from.table_schema_);
  } else {
    table_schema_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SnapshotDataManifest)
}

void SnapshotDataManifest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotDataManifest_Snapshot_2eproto.base);
  table_schema_ = nullptr;
}

SnapshotDataManifest::~SnapshotDataManifest() {
  // @@protoc_insertion_point(destructor:hbase.pb.SnapshotDataManifest)
  SharedDtor();
}

void SnapshotDataManifest::SharedDtor() {
  if (this != internal_default_instance()) delete table_schema_;
}

void SnapshotDataManifest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotDataManifest& SnapshotDataManifest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotDataManifest_Snapshot_2eproto.base);
  return *internal_default_instance();
}


void SnapshotDataManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SnapshotDataManifest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_manifests_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_schema_ != nullptr);
    table_schema_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotDataManifest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.TableSchema table_schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_table_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_region_manifests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotDataManifest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SnapshotDataManifest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableSchema table_schema = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_table_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_region_manifests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SnapshotDataManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SnapshotDataManifest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotDataManifest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SnapshotDataManifest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.TableSchema table_schema = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::table_schema(this), output);
  }

  // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_manifests_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->region_manifests(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SnapshotDataManifest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotDataManifest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SnapshotDataManifest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.TableSchema table_schema = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::table_schema(this), target);
  }

  // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_manifests_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->region_manifests(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SnapshotDataManifest)
  return target;
}

size_t SnapshotDataManifest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SnapshotDataManifest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.TableSchema table_schema = 1;
  if (has_table_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_schema_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->region_manifests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->region_manifests(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotDataManifest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SnapshotDataManifest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotDataManifest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotDataManifest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SnapshotDataManifest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SnapshotDataManifest)
    MergeFrom(*source);
  }
}

void SnapshotDataManifest::MergeFrom(const SnapshotDataManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SnapshotDataManifest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_manifests_.MergeFrom(from.region_manifests_);
  if (from.has_table_schema()) {
    mutable_table_schema()->::hbase::pb::TableSchema::MergeFrom(from.table_schema());
  }
}

void SnapshotDataManifest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SnapshotDataManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotDataManifest::CopyFrom(const SnapshotDataManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SnapshotDataManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotDataManifest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->region_manifests())) return false;
  if (has_table_schema()) {
    if (!this->table_schema_->IsInitialized()) return false;
  }
  return true;
}

void SnapshotDataManifest::InternalSwap(SnapshotDataManifest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&region_manifests_)->InternalSwap(CastToBase(&other->region_manifests_));
  swap(table_schema_, other->table_schema_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotDataManifest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::SnapshotFileInfo* Arena::CreateMaybeMessage< ::hbase::pb::SnapshotFileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SnapshotFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SnapshotRegionManifest_StoreFile* Arena::CreateMaybeMessage< ::hbase::pb::SnapshotRegionManifest_StoreFile >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SnapshotRegionManifest_StoreFile >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SnapshotRegionManifest_FamilyFiles* Arena::CreateMaybeMessage< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SnapshotRegionManifest* Arena::CreateMaybeMessage< ::hbase::pb::SnapshotRegionManifest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SnapshotRegionManifest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SnapshotDataManifest* Arena::CreateMaybeMessage< ::hbase::pb::SnapshotDataManifest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SnapshotDataManifest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
