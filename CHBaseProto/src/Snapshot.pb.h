// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Snapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Snapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Snapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "FS.pb.h"
#include "HBase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Snapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Snapshot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Snapshot_2eproto;
namespace hbase {
namespace pb {
class SnapshotDataManifest;
class SnapshotDataManifestDefaultTypeInternal;
extern SnapshotDataManifestDefaultTypeInternal _SnapshotDataManifest_default_instance_;
class SnapshotFileInfo;
class SnapshotFileInfoDefaultTypeInternal;
extern SnapshotFileInfoDefaultTypeInternal _SnapshotFileInfo_default_instance_;
class SnapshotRegionManifest;
class SnapshotRegionManifestDefaultTypeInternal;
extern SnapshotRegionManifestDefaultTypeInternal _SnapshotRegionManifest_default_instance_;
class SnapshotRegionManifest_FamilyFiles;
class SnapshotRegionManifest_FamilyFilesDefaultTypeInternal;
extern SnapshotRegionManifest_FamilyFilesDefaultTypeInternal _SnapshotRegionManifest_FamilyFiles_default_instance_;
class SnapshotRegionManifest_StoreFile;
class SnapshotRegionManifest_StoreFileDefaultTypeInternal;
extern SnapshotRegionManifest_StoreFileDefaultTypeInternal _SnapshotRegionManifest_StoreFile_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::SnapshotDataManifest* Arena::CreateMaybeMessage<::hbase::pb::SnapshotDataManifest>(Arena*);
template<> ::hbase::pb::SnapshotFileInfo* Arena::CreateMaybeMessage<::hbase::pb::SnapshotFileInfo>(Arena*);
template<> ::hbase::pb::SnapshotRegionManifest* Arena::CreateMaybeMessage<::hbase::pb::SnapshotRegionManifest>(Arena*);
template<> ::hbase::pb::SnapshotRegionManifest_FamilyFiles* Arena::CreateMaybeMessage<::hbase::pb::SnapshotRegionManifest_FamilyFiles>(Arena*);
template<> ::hbase::pb::SnapshotRegionManifest_StoreFile* Arena::CreateMaybeMessage<::hbase::pb::SnapshotRegionManifest_StoreFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

enum SnapshotFileInfo_Type : int {
  SnapshotFileInfo_Type_HFILE = 1,
  SnapshotFileInfo_Type_WAL = 2
};
bool SnapshotFileInfo_Type_IsValid(int value);
constexpr SnapshotFileInfo_Type SnapshotFileInfo_Type_Type_MIN = SnapshotFileInfo_Type_HFILE;
constexpr SnapshotFileInfo_Type SnapshotFileInfo_Type_Type_MAX = SnapshotFileInfo_Type_WAL;
constexpr int SnapshotFileInfo_Type_Type_ARRAYSIZE = SnapshotFileInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnapshotFileInfo_Type_descriptor();
template<typename T>
inline const std::string& SnapshotFileInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnapshotFileInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnapshotFileInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SnapshotFileInfo_Type_descriptor(), enum_t_value);
}
inline bool SnapshotFileInfo_Type_Parse(
    const std::string& name, SnapshotFileInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SnapshotFileInfo_Type>(
    SnapshotFileInfo_Type_descriptor(), name, value);
}
// ===================================================================

class SnapshotFileInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.SnapshotFileInfo) */ {
 public:
  SnapshotFileInfo();
  virtual ~SnapshotFileInfo();

  SnapshotFileInfo(const SnapshotFileInfo& from);
  SnapshotFileInfo(SnapshotFileInfo&& from) noexcept
    : SnapshotFileInfo() {
    *this = ::std::move(from);
  }

  inline SnapshotFileInfo& operator=(const SnapshotFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotFileInfo& operator=(SnapshotFileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotFileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotFileInfo* internal_default_instance() {
    return reinterpret_cast<const SnapshotFileInfo*>(
               &_SnapshotFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SnapshotFileInfo& a, SnapshotFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotFileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotFileInfo* New() const final {
    return CreateMaybeMessage<SnapshotFileInfo>(nullptr);
  }

  SnapshotFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotFileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotFileInfo& from);
  void MergeFrom(const SnapshotFileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotFileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.SnapshotFileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Snapshot_2eproto);
    return ::descriptor_table_Snapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SnapshotFileInfo_Type Type;
  static constexpr Type HFILE =
    SnapshotFileInfo_Type_HFILE;
  static constexpr Type WAL =
    SnapshotFileInfo_Type_WAL;
  static inline bool Type_IsValid(int value) {
    return SnapshotFileInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SnapshotFileInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SnapshotFileInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SnapshotFileInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SnapshotFileInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SnapshotFileInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return SnapshotFileInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHfileFieldNumber = 3,
    kWalServerFieldNumber = 4,
    kWalNameFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // optional string hfile = 3;
  bool has_hfile() const;
  void clear_hfile();
  const std::string& hfile() const;
  void set_hfile(const std::string& value);
  void set_hfile(std::string&& value);
  void set_hfile(const char* value);
  void set_hfile(const char* value, size_t size);
  std::string* mutable_hfile();
  std::string* release_hfile();
  void set_allocated_hfile(std::string* hfile);

  // optional string wal_server = 4;
  bool has_wal_server() const;
  void clear_wal_server();
  const std::string& wal_server() const;
  void set_wal_server(const std::string& value);
  void set_wal_server(std::string&& value);
  void set_wal_server(const char* value);
  void set_wal_server(const char* value, size_t size);
  std::string* mutable_wal_server();
  std::string* release_wal_server();
  void set_allocated_wal_server(std::string* wal_server);

  // optional string wal_name = 5;
  bool has_wal_name() const;
  void clear_wal_name();
  const std::string& wal_name() const;
  void set_wal_name(const std::string& value);
  void set_wal_name(std::string&& value);
  void set_wal_name(const char* value);
  void set_wal_name(const char* value, size_t size);
  std::string* mutable_wal_name();
  std::string* release_wal_name();
  void set_allocated_wal_name(std::string* wal_name);

  // required .hbase.pb.SnapshotFileInfo.Type type = 1;
  bool has_type() const;
  void clear_type();
  ::hbase::pb::SnapshotFileInfo_Type type() const;
  void set_type(::hbase::pb::SnapshotFileInfo_Type value);

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotFileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wal_server_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wal_name_;
  int type_;
  friend struct ::TableStruct_Snapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotRegionManifest_StoreFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.SnapshotRegionManifest.StoreFile) */ {
 public:
  SnapshotRegionManifest_StoreFile();
  virtual ~SnapshotRegionManifest_StoreFile();

  SnapshotRegionManifest_StoreFile(const SnapshotRegionManifest_StoreFile& from);
  SnapshotRegionManifest_StoreFile(SnapshotRegionManifest_StoreFile&& from) noexcept
    : SnapshotRegionManifest_StoreFile() {
    *this = ::std::move(from);
  }

  inline SnapshotRegionManifest_StoreFile& operator=(const SnapshotRegionManifest_StoreFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotRegionManifest_StoreFile& operator=(SnapshotRegionManifest_StoreFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotRegionManifest_StoreFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotRegionManifest_StoreFile* internal_default_instance() {
    return reinterpret_cast<const SnapshotRegionManifest_StoreFile*>(
               &_SnapshotRegionManifest_StoreFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SnapshotRegionManifest_StoreFile& a, SnapshotRegionManifest_StoreFile& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotRegionManifest_StoreFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotRegionManifest_StoreFile* New() const final {
    return CreateMaybeMessage<SnapshotRegionManifest_StoreFile>(nullptr);
  }

  SnapshotRegionManifest_StoreFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotRegionManifest_StoreFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotRegionManifest_StoreFile& from);
  void MergeFrom(const SnapshotRegionManifest_StoreFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotRegionManifest_StoreFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.SnapshotRegionManifest.StoreFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Snapshot_2eproto);
    return ::descriptor_table_Snapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kReferenceFieldNumber = 2,
    kFileSizeFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .hbase.pb.Reference reference = 2;
  bool has_reference() const;
  void clear_reference();
  const ::hbase::pb::Reference& reference() const;
  ::hbase::pb::Reference* release_reference();
  ::hbase::pb::Reference* mutable_reference();
  void set_allocated_reference(::hbase::pb::Reference* reference);

  // optional uint64 file_size = 3;
  bool has_file_size() const;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotRegionManifest.StoreFile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::hbase::pb::Reference* reference_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  friend struct ::TableStruct_Snapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotRegionManifest_FamilyFiles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.SnapshotRegionManifest.FamilyFiles) */ {
 public:
  SnapshotRegionManifest_FamilyFiles();
  virtual ~SnapshotRegionManifest_FamilyFiles();

  SnapshotRegionManifest_FamilyFiles(const SnapshotRegionManifest_FamilyFiles& from);
  SnapshotRegionManifest_FamilyFiles(SnapshotRegionManifest_FamilyFiles&& from) noexcept
    : SnapshotRegionManifest_FamilyFiles() {
    *this = ::std::move(from);
  }

  inline SnapshotRegionManifest_FamilyFiles& operator=(const SnapshotRegionManifest_FamilyFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotRegionManifest_FamilyFiles& operator=(SnapshotRegionManifest_FamilyFiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotRegionManifest_FamilyFiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotRegionManifest_FamilyFiles* internal_default_instance() {
    return reinterpret_cast<const SnapshotRegionManifest_FamilyFiles*>(
               &_SnapshotRegionManifest_FamilyFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SnapshotRegionManifest_FamilyFiles& a, SnapshotRegionManifest_FamilyFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotRegionManifest_FamilyFiles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotRegionManifest_FamilyFiles* New() const final {
    return CreateMaybeMessage<SnapshotRegionManifest_FamilyFiles>(nullptr);
  }

  SnapshotRegionManifest_FamilyFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotRegionManifest_FamilyFiles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotRegionManifest_FamilyFiles& from);
  void MergeFrom(const SnapshotRegionManifest_FamilyFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotRegionManifest_FamilyFiles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.SnapshotRegionManifest.FamilyFiles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Snapshot_2eproto);
    return ::descriptor_table_Snapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreFilesFieldNumber = 2,
    kFamilyNameFieldNumber = 1,
  };
  // repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
  int store_files_size() const;
  void clear_store_files();
  ::hbase::pb::SnapshotRegionManifest_StoreFile* mutable_store_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile >*
      mutable_store_files();
  const ::hbase::pb::SnapshotRegionManifest_StoreFile& store_files(int index) const;
  ::hbase::pb::SnapshotRegionManifest_StoreFile* add_store_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile >&
      store_files() const;

  // required bytes family_name = 1;
  bool has_family_name() const;
  void clear_family_name();
  const std::string& family_name() const;
  void set_family_name(const std::string& value);
  void set_family_name(std::string&& value);
  void set_family_name(const char* value);
  void set_family_name(const void* value, size_t size);
  std::string* mutable_family_name();
  std::string* release_family_name();
  void set_allocated_family_name(std::string* family_name);

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotRegionManifest.FamilyFiles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile > store_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_name_;
  friend struct ::TableStruct_Snapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotRegionManifest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.SnapshotRegionManifest) */ {
 public:
  SnapshotRegionManifest();
  virtual ~SnapshotRegionManifest();

  SnapshotRegionManifest(const SnapshotRegionManifest& from);
  SnapshotRegionManifest(SnapshotRegionManifest&& from) noexcept
    : SnapshotRegionManifest() {
    *this = ::std::move(from);
  }

  inline SnapshotRegionManifest& operator=(const SnapshotRegionManifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotRegionManifest& operator=(SnapshotRegionManifest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotRegionManifest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotRegionManifest* internal_default_instance() {
    return reinterpret_cast<const SnapshotRegionManifest*>(
               &_SnapshotRegionManifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SnapshotRegionManifest& a, SnapshotRegionManifest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotRegionManifest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotRegionManifest* New() const final {
    return CreateMaybeMessage<SnapshotRegionManifest>(nullptr);
  }

  SnapshotRegionManifest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotRegionManifest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotRegionManifest& from);
  void MergeFrom(const SnapshotRegionManifest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotRegionManifest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.SnapshotRegionManifest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Snapshot_2eproto);
    return ::descriptor_table_Snapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SnapshotRegionManifest_StoreFile StoreFile;
  typedef SnapshotRegionManifest_FamilyFiles FamilyFiles;

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFilesFieldNumber = 3,
    kRegionInfoFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
  int family_files_size() const;
  void clear_family_files();
  ::hbase::pb::SnapshotRegionManifest_FamilyFiles* mutable_family_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >*
      mutable_family_files();
  const ::hbase::pb::SnapshotRegionManifest_FamilyFiles& family_files(int index) const;
  ::hbase::pb::SnapshotRegionManifest_FamilyFiles* add_family_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >&
      family_files() const;

  // required .hbase.pb.RegionInfo region_info = 2;
  bool has_region_info() const;
  void clear_region_info();
  const ::hbase::pb::RegionInfo& region_info() const;
  ::hbase::pb::RegionInfo* release_region_info();
  ::hbase::pb::RegionInfo* mutable_region_info();
  void set_allocated_region_info(::hbase::pb::RegionInfo* region_info);

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotRegionManifest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles > family_files_;
  ::hbase::pb::RegionInfo* region_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_Snapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotDataManifest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.SnapshotDataManifest) */ {
 public:
  SnapshotDataManifest();
  virtual ~SnapshotDataManifest();

  SnapshotDataManifest(const SnapshotDataManifest& from);
  SnapshotDataManifest(SnapshotDataManifest&& from) noexcept
    : SnapshotDataManifest() {
    *this = ::std::move(from);
  }

  inline SnapshotDataManifest& operator=(const SnapshotDataManifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotDataManifest& operator=(SnapshotDataManifest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotDataManifest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotDataManifest* internal_default_instance() {
    return reinterpret_cast<const SnapshotDataManifest*>(
               &_SnapshotDataManifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SnapshotDataManifest& a, SnapshotDataManifest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotDataManifest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotDataManifest* New() const final {
    return CreateMaybeMessage<SnapshotDataManifest>(nullptr);
  }

  SnapshotDataManifest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotDataManifest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotDataManifest& from);
  void MergeFrom(const SnapshotDataManifest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotDataManifest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.SnapshotDataManifest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Snapshot_2eproto);
    return ::descriptor_table_Snapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionManifestsFieldNumber = 2,
    kTableSchemaFieldNumber = 1,
  };
  // repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
  int region_manifests_size() const;
  void clear_region_manifests();
  ::hbase::pb::SnapshotRegionManifest* mutable_region_manifests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest >*
      mutable_region_manifests();
  const ::hbase::pb::SnapshotRegionManifest& region_manifests(int index) const;
  ::hbase::pb::SnapshotRegionManifest* add_region_manifests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest >&
      region_manifests() const;

  // required .hbase.pb.TableSchema table_schema = 1;
  bool has_table_schema() const;
  void clear_table_schema();
  const ::hbase::pb::TableSchema& table_schema() const;
  ::hbase::pb::TableSchema* release_table_schema();
  ::hbase::pb::TableSchema* mutable_table_schema();
  void set_allocated_table_schema(::hbase::pb::TableSchema* table_schema);

  // @@protoc_insertion_point(class_scope:hbase.pb.SnapshotDataManifest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest > region_manifests_;
  ::hbase::pb::TableSchema* table_schema_;
  friend struct ::TableStruct_Snapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnapshotFileInfo

// required .hbase.pb.SnapshotFileInfo.Type type = 1;
inline bool SnapshotFileInfo::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnapshotFileInfo::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::hbase::pb::SnapshotFileInfo_Type SnapshotFileInfo::type() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotFileInfo.type)
  return static_cast< ::hbase::pb::SnapshotFileInfo_Type >(type_);
}
inline void SnapshotFileInfo::set_type(::hbase::pb::SnapshotFileInfo_Type value) {
  assert(::hbase::pb::SnapshotFileInfo_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.SnapshotFileInfo.type)
}

// optional string hfile = 3;
inline bool SnapshotFileInfo::has_hfile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotFileInfo::clear_hfile() {
  hfile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SnapshotFileInfo::hfile() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotFileInfo.hfile)
  return hfile_.GetNoArena();
}
inline void SnapshotFileInfo::set_hfile(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.SnapshotFileInfo.hfile)
}
inline void SnapshotFileInfo::set_hfile(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hfile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.SnapshotFileInfo.hfile)
}
inline void SnapshotFileInfo::set_hfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.SnapshotFileInfo.hfile)
}
inline void SnapshotFileInfo::set_hfile(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.SnapshotFileInfo.hfile)
}
inline std::string* SnapshotFileInfo::mutable_hfile() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotFileInfo.hfile)
  return hfile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotFileInfo::release_hfile() {
  // @@protoc_insertion_point(field_release:hbase.pb.SnapshotFileInfo.hfile)
  if (!has_hfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hfile_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotFileInfo::set_allocated_hfile(std::string* hfile) {
  if (hfile != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hfile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hfile);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SnapshotFileInfo.hfile)
}

// optional string wal_server = 4;
inline bool SnapshotFileInfo::has_wal_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapshotFileInfo::clear_wal_server() {
  wal_server_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SnapshotFileInfo::wal_server() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotFileInfo.wal_server)
  return wal_server_.GetNoArena();
}
inline void SnapshotFileInfo::set_wal_server(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  wal_server_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.SnapshotFileInfo.wal_server)
}
inline void SnapshotFileInfo::set_wal_server(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  wal_server_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.SnapshotFileInfo.wal_server)
}
inline void SnapshotFileInfo::set_wal_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  wal_server_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.SnapshotFileInfo.wal_server)
}
inline void SnapshotFileInfo::set_wal_server(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  wal_server_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.SnapshotFileInfo.wal_server)
}
inline std::string* SnapshotFileInfo::mutable_wal_server() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotFileInfo.wal_server)
  return wal_server_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotFileInfo::release_wal_server() {
  // @@protoc_insertion_point(field_release:hbase.pb.SnapshotFileInfo.wal_server)
  if (!has_wal_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return wal_server_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotFileInfo::set_allocated_wal_server(std::string* wal_server) {
  if (wal_server != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  wal_server_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wal_server);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SnapshotFileInfo.wal_server)
}

// optional string wal_name = 5;
inline bool SnapshotFileInfo::has_wal_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnapshotFileInfo::clear_wal_name() {
  wal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SnapshotFileInfo::wal_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotFileInfo.wal_name)
  return wal_name_.GetNoArena();
}
inline void SnapshotFileInfo::set_wal_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  wal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.SnapshotFileInfo.wal_name)
}
inline void SnapshotFileInfo::set_wal_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  wal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.SnapshotFileInfo.wal_name)
}
inline void SnapshotFileInfo::set_wal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  wal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.SnapshotFileInfo.wal_name)
}
inline void SnapshotFileInfo::set_wal_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  wal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.SnapshotFileInfo.wal_name)
}
inline std::string* SnapshotFileInfo::mutable_wal_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotFileInfo.wal_name)
  return wal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotFileInfo::release_wal_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.SnapshotFileInfo.wal_name)
  if (!has_wal_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return wal_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotFileInfo::set_allocated_wal_name(std::string* wal_name) {
  if (wal_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  wal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wal_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SnapshotFileInfo.wal_name)
}

// -------------------------------------------------------------------

// SnapshotRegionManifest_StoreFile

// required string name = 1;
inline bool SnapshotRegionManifest_StoreFile::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotRegionManifest_StoreFile::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SnapshotRegionManifest_StoreFile::name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotRegionManifest.StoreFile.name)
  return name_.GetNoArena();
}
inline void SnapshotRegionManifest_StoreFile::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.SnapshotRegionManifest.StoreFile.name)
}
inline void SnapshotRegionManifest_StoreFile::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.SnapshotRegionManifest.StoreFile.name)
}
inline void SnapshotRegionManifest_StoreFile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.SnapshotRegionManifest.StoreFile.name)
}
inline void SnapshotRegionManifest_StoreFile::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.SnapshotRegionManifest.StoreFile.name)
}
inline std::string* SnapshotRegionManifest_StoreFile::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotRegionManifest.StoreFile.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotRegionManifest_StoreFile::release_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.SnapshotRegionManifest.StoreFile.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotRegionManifest_StoreFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SnapshotRegionManifest.StoreFile.name)
}

// optional .hbase.pb.Reference reference = 2;
inline bool SnapshotRegionManifest_StoreFile::has_reference() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::hbase::pb::Reference& SnapshotRegionManifest_StoreFile::reference() const {
  const ::hbase::pb::Reference* p = reference_;
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotRegionManifest.StoreFile.reference)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::Reference*>(
      &::hbase::pb::_Reference_default_instance_);
}
inline ::hbase::pb::Reference* SnapshotRegionManifest_StoreFile::release_reference() {
  // @@protoc_insertion_point(field_release:hbase.pb.SnapshotRegionManifest.StoreFile.reference)
  _has_bits_[0] &= ~0x00000002u;
  ::hbase::pb::Reference* temp = reference_;
  reference_ = nullptr;
  return temp;
}
inline ::hbase::pb::Reference* SnapshotRegionManifest_StoreFile::mutable_reference() {
  _has_bits_[0] |= 0x00000002u;
  if (reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::Reference>(GetArenaNoVirtual());
    reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotRegionManifest.StoreFile.reference)
  return reference_;
}
inline void SnapshotRegionManifest_StoreFile::set_allocated_reference(::hbase::pb::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_);
  }
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reference_ = reference;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SnapshotRegionManifest.StoreFile.reference)
}

// optional uint64 file_size = 3;
inline bool SnapshotRegionManifest_StoreFile::has_file_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnapshotRegionManifest_StoreFile::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotRegionManifest_StoreFile::file_size() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotRegionManifest.StoreFile.file_size)
  return file_size_;
}
inline void SnapshotRegionManifest_StoreFile::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  file_size_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.SnapshotRegionManifest.StoreFile.file_size)
}

// -------------------------------------------------------------------

// SnapshotRegionManifest_FamilyFiles

// required bytes family_name = 1;
inline bool SnapshotRegionManifest_FamilyFiles::has_family_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotRegionManifest_FamilyFiles::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SnapshotRegionManifest_FamilyFiles::family_name() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotRegionManifest.FamilyFiles.family_name)
  return family_name_.GetNoArena();
}
inline void SnapshotRegionManifest_FamilyFiles::set_family_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  family_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.SnapshotRegionManifest.FamilyFiles.family_name)
}
inline void SnapshotRegionManifest_FamilyFiles::set_family_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  family_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.SnapshotRegionManifest.FamilyFiles.family_name)
}
inline void SnapshotRegionManifest_FamilyFiles::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  family_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.SnapshotRegionManifest.FamilyFiles.family_name)
}
inline void SnapshotRegionManifest_FamilyFiles::set_family_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  family_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.SnapshotRegionManifest.FamilyFiles.family_name)
}
inline std::string* SnapshotRegionManifest_FamilyFiles::mutable_family_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotRegionManifest.FamilyFiles.family_name)
  return family_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotRegionManifest_FamilyFiles::release_family_name() {
  // @@protoc_insertion_point(field_release:hbase.pb.SnapshotRegionManifest.FamilyFiles.family_name)
  if (!has_family_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return family_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotRegionManifest_FamilyFiles::set_allocated_family_name(std::string* family_name) {
  if (family_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  family_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SnapshotRegionManifest.FamilyFiles.family_name)
}

// repeated .hbase.pb.SnapshotRegionManifest.StoreFile store_files = 2;
inline int SnapshotRegionManifest_FamilyFiles::store_files_size() const {
  return store_files_.size();
}
inline void SnapshotRegionManifest_FamilyFiles::clear_store_files() {
  store_files_.Clear();
}
inline ::hbase::pb::SnapshotRegionManifest_StoreFile* SnapshotRegionManifest_FamilyFiles::mutable_store_files(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotRegionManifest.FamilyFiles.store_files)
  return store_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile >*
SnapshotRegionManifest_FamilyFiles::mutable_store_files() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.SnapshotRegionManifest.FamilyFiles.store_files)
  return &store_files_;
}
inline const ::hbase::pb::SnapshotRegionManifest_StoreFile& SnapshotRegionManifest_FamilyFiles::store_files(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotRegionManifest.FamilyFiles.store_files)
  return store_files_.Get(index);
}
inline ::hbase::pb::SnapshotRegionManifest_StoreFile* SnapshotRegionManifest_FamilyFiles::add_store_files() {
  // @@protoc_insertion_point(field_add:hbase.pb.SnapshotRegionManifest.FamilyFiles.store_files)
  return store_files_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_StoreFile >&
SnapshotRegionManifest_FamilyFiles::store_files() const {
  // @@protoc_insertion_point(field_list:hbase.pb.SnapshotRegionManifest.FamilyFiles.store_files)
  return store_files_;
}

// -------------------------------------------------------------------

// SnapshotRegionManifest

// optional int32 version = 1;
inline bool SnapshotRegionManifest::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapshotRegionManifest::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SnapshotRegionManifest::version() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotRegionManifest.version)
  return version_;
}
inline void SnapshotRegionManifest::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.SnapshotRegionManifest.version)
}

// required .hbase.pb.RegionInfo region_info = 2;
inline bool SnapshotRegionManifest::has_region_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::RegionInfo& SnapshotRegionManifest::region_info() const {
  const ::hbase::pb::RegionInfo* p = region_info_;
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotRegionManifest.region_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::RegionInfo*>(
      &::hbase::pb::_RegionInfo_default_instance_);
}
inline ::hbase::pb::RegionInfo* SnapshotRegionManifest::release_region_info() {
  // @@protoc_insertion_point(field_release:hbase.pb.SnapshotRegionManifest.region_info)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::RegionInfo* temp = region_info_;
  region_info_ = nullptr;
  return temp;
}
inline ::hbase::pb::RegionInfo* SnapshotRegionManifest::mutable_region_info() {
  _has_bits_[0] |= 0x00000001u;
  if (region_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::RegionInfo>(GetArenaNoVirtual());
    region_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotRegionManifest.region_info)
  return region_info_;
}
inline void SnapshotRegionManifest::set_allocated_region_info(::hbase::pb::RegionInfo* region_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_info_);
  }
  if (region_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  region_info_ = region_info;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SnapshotRegionManifest.region_info)
}

// repeated .hbase.pb.SnapshotRegionManifest.FamilyFiles family_files = 3;
inline int SnapshotRegionManifest::family_files_size() const {
  return family_files_.size();
}
inline void SnapshotRegionManifest::clear_family_files() {
  family_files_.Clear();
}
inline ::hbase::pb::SnapshotRegionManifest_FamilyFiles* SnapshotRegionManifest::mutable_family_files(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotRegionManifest.family_files)
  return family_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >*
SnapshotRegionManifest::mutable_family_files() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.SnapshotRegionManifest.family_files)
  return &family_files_;
}
inline const ::hbase::pb::SnapshotRegionManifest_FamilyFiles& SnapshotRegionManifest::family_files(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotRegionManifest.family_files)
  return family_files_.Get(index);
}
inline ::hbase::pb::SnapshotRegionManifest_FamilyFiles* SnapshotRegionManifest::add_family_files() {
  // @@protoc_insertion_point(field_add:hbase.pb.SnapshotRegionManifest.family_files)
  return family_files_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest_FamilyFiles >&
SnapshotRegionManifest::family_files() const {
  // @@protoc_insertion_point(field_list:hbase.pb.SnapshotRegionManifest.family_files)
  return family_files_;
}

// -------------------------------------------------------------------

// SnapshotDataManifest

// required .hbase.pb.TableSchema table_schema = 1;
inline bool SnapshotDataManifest::has_table_schema() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::hbase::pb::TableSchema& SnapshotDataManifest::table_schema() const {
  const ::hbase::pb::TableSchema* p = table_schema_;
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotDataManifest.table_schema)
  return p != nullptr ? *p : *reinterpret_cast<const ::hbase::pb::TableSchema*>(
      &::hbase::pb::_TableSchema_default_instance_);
}
inline ::hbase::pb::TableSchema* SnapshotDataManifest::release_table_schema() {
  // @@protoc_insertion_point(field_release:hbase.pb.SnapshotDataManifest.table_schema)
  _has_bits_[0] &= ~0x00000001u;
  ::hbase::pb::TableSchema* temp = table_schema_;
  table_schema_ = nullptr;
  return temp;
}
inline ::hbase::pb::TableSchema* SnapshotDataManifest::mutable_table_schema() {
  _has_bits_[0] |= 0x00000001u;
  if (table_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::hbase::pb::TableSchema>(GetArenaNoVirtual());
    table_schema_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotDataManifest.table_schema)
  return table_schema_;
}
inline void SnapshotDataManifest::set_allocated_table_schema(::hbase::pb::TableSchema* table_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema_);
  }
  if (table_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      table_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_schema, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_schema_ = table_schema;
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SnapshotDataManifest.table_schema)
}

// repeated .hbase.pb.SnapshotRegionManifest region_manifests = 2;
inline int SnapshotDataManifest::region_manifests_size() const {
  return region_manifests_.size();
}
inline void SnapshotDataManifest::clear_region_manifests() {
  region_manifests_.Clear();
}
inline ::hbase::pb::SnapshotRegionManifest* SnapshotDataManifest::mutable_region_manifests(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.SnapshotDataManifest.region_manifests)
  return region_manifests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest >*
SnapshotDataManifest::mutable_region_manifests() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.SnapshotDataManifest.region_manifests)
  return &region_manifests_;
}
inline const ::hbase::pb::SnapshotRegionManifest& SnapshotDataManifest::region_manifests(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.SnapshotDataManifest.region_manifests)
  return region_manifests_.Get(index);
}
inline ::hbase::pb::SnapshotRegionManifest* SnapshotDataManifest::add_region_manifests() {
  // @@protoc_insertion_point(field_add:hbase.pb.SnapshotDataManifest.region_manifests)
  return region_manifests_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::SnapshotRegionManifest >&
SnapshotDataManifest::region_manifests() const {
  // @@protoc_insertion_point(field_list:hbase.pb.SnapshotDataManifest.region_manifests)
  return region_manifests_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hbase::pb::SnapshotFileInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hbase::pb::SnapshotFileInfo_Type>() {
  return ::hbase::pb::SnapshotFileInfo_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Snapshot_2eproto
