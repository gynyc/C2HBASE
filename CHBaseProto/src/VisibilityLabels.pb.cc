// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VisibilityLabels.proto

#include "VisibilityLabels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionActionResult_Client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_VisibilityLabels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserAuthorizations_VisibilityLabels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_VisibilityLabels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisibilityLabel_VisibilityLabels_2eproto;
namespace hbase {
namespace pb {
class VisibilityLabelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisibilityLabelsRequest> _instance;
} _VisibilityLabelsRequest_default_instance_;
class VisibilityLabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisibilityLabel> _instance;
} _VisibilityLabel_default_instance_;
class VisibilityLabelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisibilityLabelsResponse> _instance;
} _VisibilityLabelsResponse_default_instance_;
class SetAuthsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAuthsRequest> _instance;
} _SetAuthsRequest_default_instance_;
class UserAuthorizationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserAuthorizations> _instance;
} _UserAuthorizations_default_instance_;
class MultiUserAuthorizationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiUserAuthorizations> _instance;
} _MultiUserAuthorizations_default_instance_;
class GetAuthsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthsRequest> _instance;
} _GetAuthsRequest_default_instance_;
class GetAuthsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAuthsResponse> _instance;
} _GetAuthsResponse_default_instance_;
class ListLabelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLabelsRequest> _instance;
} _ListLabelsRequest_default_instance_;
class ListLabelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLabelsResponse> _instance;
} _ListLabelsResponse_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_GetAuthsRequest_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetAuthsRequest_default_instance_;
    new (ptr) ::hbase::pb::GetAuthsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetAuthsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAuthsRequest_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAuthsRequest_VisibilityLabels_2eproto}, {}};

static void InitDefaultsscc_info_GetAuthsResponse_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_GetAuthsResponse_default_instance_;
    new (ptr) ::hbase::pb::GetAuthsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::GetAuthsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAuthsResponse_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAuthsResponse_VisibilityLabels_2eproto}, {}};

static void InitDefaultsscc_info_ListLabelsRequest_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ListLabelsRequest_default_instance_;
    new (ptr) ::hbase::pb::ListLabelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ListLabelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLabelsRequest_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListLabelsRequest_VisibilityLabels_2eproto}, {}};

static void InitDefaultsscc_info_ListLabelsResponse_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ListLabelsResponse_default_instance_;
    new (ptr) ::hbase::pb::ListLabelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ListLabelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLabelsResponse_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ListLabelsResponse_VisibilityLabels_2eproto}, {}};

static void InitDefaultsscc_info_MultiUserAuthorizations_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MultiUserAuthorizations_default_instance_;
    new (ptr) ::hbase::pb::MultiUserAuthorizations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MultiUserAuthorizations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiUserAuthorizations_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MultiUserAuthorizations_VisibilityLabels_2eproto}, {
      &scc_info_UserAuthorizations_VisibilityLabels_2eproto.base,}};

static void InitDefaultsscc_info_SetAuthsRequest_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SetAuthsRequest_default_instance_;
    new (ptr) ::hbase::pb::SetAuthsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SetAuthsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAuthsRequest_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetAuthsRequest_VisibilityLabels_2eproto}, {}};

static void InitDefaultsscc_info_UserAuthorizations_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_UserAuthorizations_default_instance_;
    new (ptr) ::hbase::pb::UserAuthorizations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::UserAuthorizations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserAuthorizations_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserAuthorizations_VisibilityLabels_2eproto}, {}};

static void InitDefaultsscc_info_VisibilityLabel_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_VisibilityLabel_default_instance_;
    new (ptr) ::hbase::pb::VisibilityLabel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::VisibilityLabel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisibilityLabel_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VisibilityLabel_VisibilityLabels_2eproto}, {}};

static void InitDefaultsscc_info_VisibilityLabelsRequest_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_VisibilityLabelsRequest_default_instance_;
    new (ptr) ::hbase::pb::VisibilityLabelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::VisibilityLabelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisibilityLabelsRequest_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VisibilityLabelsRequest_VisibilityLabels_2eproto}, {
      &scc_info_VisibilityLabel_VisibilityLabels_2eproto.base,}};

static void InitDefaultsscc_info_VisibilityLabelsResponse_VisibilityLabels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_VisibilityLabelsResponse_default_instance_;
    new (ptr) ::hbase::pb::VisibilityLabelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::VisibilityLabelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisibilityLabelsResponse_VisibilityLabels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VisibilityLabelsResponse_VisibilityLabels_2eproto}, {
      &scc_info_RegionActionResult_Client_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_VisibilityLabels_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_VisibilityLabels_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_VisibilityLabels_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_VisibilityLabels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabelsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabelsRequest, vislabel_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabel, label_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabel, ordinal_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabelsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::VisibilityLabelsResponse, result_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SetAuthsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SetAuthsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SetAuthsRequest, user_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SetAuthsRequest, auth_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UserAuthorizations, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UserAuthorizations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UserAuthorizations, user_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::UserAuthorizations, auth_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiUserAuthorizations, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiUserAuthorizations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MultiUserAuthorizations, userauths_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetAuthsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetAuthsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetAuthsRequest, user_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetAuthsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetAuthsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetAuthsResponse, user_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::GetAuthsResponse, auth_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ListLabelsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ListLabelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ListLabelsRequest, regex_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ListLabelsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ListLabelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ListLabelsResponse, label_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hbase::pb::VisibilityLabelsRequest)},
  { 7, 14, sizeof(::hbase::pb::VisibilityLabel)},
  { 16, 22, sizeof(::hbase::pb::VisibilityLabelsResponse)},
  { 23, 30, sizeof(::hbase::pb::SetAuthsRequest)},
  { 32, 39, sizeof(::hbase::pb::UserAuthorizations)},
  { 41, 47, sizeof(::hbase::pb::MultiUserAuthorizations)},
  { 48, 54, sizeof(::hbase::pb::GetAuthsRequest)},
  { 55, 62, sizeof(::hbase::pb::GetAuthsResponse)},
  { 64, 70, sizeof(::hbase::pb::ListLabelsRequest)},
  { 71, 77, sizeof(::hbase::pb::ListLabelsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_VisibilityLabelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_VisibilityLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_VisibilityLabelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SetAuthsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_UserAuthorizations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MultiUserAuthorizations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetAuthsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_GetAuthsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ListLabelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ListLabelsResponse_default_instance_),
};

const char descriptor_table_protodef_VisibilityLabels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026VisibilityLabels.proto\022\010hbase.pb\032\014Clie"
  "nt.proto\"F\n\027VisibilityLabelsRequest\022+\n\010v"
  "isLabel\030\001 \003(\0132\031.hbase.pb.VisibilityLabel"
  "\"1\n\017VisibilityLabel\022\r\n\005label\030\001 \002(\014\022\017\n\007or"
  "dinal\030\002 \001(\r\"H\n\030VisibilityLabelsResponse\022"
  ",\n\006result\030\001 \003(\0132\034.hbase.pb.RegionActionR"
  "esult\"-\n\017SetAuthsRequest\022\014\n\004user\030\001 \002(\014\022\014"
  "\n\004auth\030\002 \003(\014\"0\n\022UserAuthorizations\022\014\n\004us"
  "er\030\001 \002(\014\022\014\n\004auth\030\002 \003(\r\"J\n\027MultiUserAutho"
  "rizations\022/\n\tuserAuths\030\001 \003(\0132\034.hbase.pb."
  "UserAuthorizations\"\037\n\017GetAuthsRequest\022\014\n"
  "\004user\030\001 \002(\014\".\n\020GetAuthsResponse\022\014\n\004user\030"
  "\001 \002(\014\022\014\n\004auth\030\002 \003(\014\"\"\n\021ListLabelsRequest"
  "\022\r\n\005regex\030\001 \001(\t\"#\n\022ListLabelsResponse\022\r\n"
  "\005label\030\001 \003(\0142\221\003\n\027VisibilityLabelsService"
  "\022R\n\taddLabels\022!.hbase.pb.VisibilityLabel"
  "sRequest\032\".hbase.pb.VisibilityLabelsResp"
  "onse\022I\n\010setAuths\022\031.hbase.pb.SetAuthsRequ"
  "est\032\".hbase.pb.VisibilityLabelsResponse\022"
  "K\n\nclearAuths\022\031.hbase.pb.SetAuthsRequest"
  "\032\".hbase.pb.VisibilityLabelsResponse\022A\n\010"
  "getAuths\022\031.hbase.pb.GetAuthsRequest\032\032.hb"
  "ase.pb.GetAuthsResponse\022G\n\nlistLabels\022\033."
  "hbase.pb.ListLabelsRequest\032\034.hbase.pb.Li"
  "stLabelsResponseBL\n*org.apache.hadoop.hb"
  "ase.protobuf.generatedB\026VisibilityLabels"
  "ProtosH\001\210\001\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_VisibilityLabels_2eproto_deps[1] = {
  &::descriptor_table_Client_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_VisibilityLabels_2eproto_sccs[10] = {
  &scc_info_GetAuthsRequest_VisibilityLabels_2eproto.base,
  &scc_info_GetAuthsResponse_VisibilityLabels_2eproto.base,
  &scc_info_ListLabelsRequest_VisibilityLabels_2eproto.base,
  &scc_info_ListLabelsResponse_VisibilityLabels_2eproto.base,
  &scc_info_MultiUserAuthorizations_VisibilityLabels_2eproto.base,
  &scc_info_SetAuthsRequest_VisibilityLabels_2eproto.base,
  &scc_info_UserAuthorizations_VisibilityLabels_2eproto.base,
  &scc_info_VisibilityLabel_VisibilityLabels_2eproto.base,
  &scc_info_VisibilityLabelsRequest_VisibilityLabels_2eproto.base,
  &scc_info_VisibilityLabelsResponse_VisibilityLabels_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_VisibilityLabels_2eproto_once;
static bool descriptor_table_VisibilityLabels_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VisibilityLabels_2eproto = {
  &descriptor_table_VisibilityLabels_2eproto_initialized, descriptor_table_protodef_VisibilityLabels_2eproto, "VisibilityLabels.proto", 1054,
  &descriptor_table_VisibilityLabels_2eproto_once, descriptor_table_VisibilityLabels_2eproto_sccs, descriptor_table_VisibilityLabels_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_VisibilityLabels_2eproto::offsets,
  file_level_metadata_VisibilityLabels_2eproto, 10, file_level_enum_descriptors_VisibilityLabels_2eproto, file_level_service_descriptors_VisibilityLabels_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_VisibilityLabels_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_VisibilityLabels_2eproto), true);
namespace hbase {
namespace pb {

// ===================================================================

void VisibilityLabelsRequest::InitAsDefaultInstance() {
}
class VisibilityLabelsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<VisibilityLabelsRequest>()._has_bits_);
};

VisibilityLabelsRequest::VisibilityLabelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.VisibilityLabelsRequest)
}
VisibilityLabelsRequest::VisibilityLabelsRequest(const VisibilityLabelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      vislabel_(from.vislabel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.VisibilityLabelsRequest)
}

void VisibilityLabelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisibilityLabelsRequest_VisibilityLabels_2eproto.base);
}

VisibilityLabelsRequest::~VisibilityLabelsRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.VisibilityLabelsRequest)
  SharedDtor();
}

void VisibilityLabelsRequest::SharedDtor() {
}

void VisibilityLabelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisibilityLabelsRequest& VisibilityLabelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisibilityLabelsRequest_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void VisibilityLabelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.VisibilityLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vislabel_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VisibilityLabelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.VisibilityLabel visLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vislabel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VisibilityLabelsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.VisibilityLabelsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.VisibilityLabel visLabel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vislabel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.VisibilityLabelsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.VisibilityLabelsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VisibilityLabelsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.VisibilityLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.VisibilityLabel visLabel = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vislabel_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vislabel(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.VisibilityLabelsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* VisibilityLabelsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.VisibilityLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.VisibilityLabel visLabel = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vislabel_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vislabel(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.VisibilityLabelsRequest)
  return target;
}

size_t VisibilityLabelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.VisibilityLabelsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.VisibilityLabel visLabel = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vislabel_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vislabel(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisibilityLabelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.VisibilityLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VisibilityLabelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisibilityLabelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.VisibilityLabelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.VisibilityLabelsRequest)
    MergeFrom(*source);
  }
}

void VisibilityLabelsRequest::MergeFrom(const VisibilityLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.VisibilityLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vislabel_.MergeFrom(from.vislabel_);
}

void VisibilityLabelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.VisibilityLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisibilityLabelsRequest::CopyFrom(const VisibilityLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.VisibilityLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilityLabelsRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->vislabel())) return false;
  return true;
}

void VisibilityLabelsRequest::InternalSwap(VisibilityLabelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&vislabel_)->InternalSwap(CastToBase(&other->vislabel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisibilityLabelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisibilityLabel::InitAsDefaultInstance() {
}
class VisibilityLabel::_Internal {
 public:
  using HasBits = decltype(std::declval<VisibilityLabel>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VisibilityLabel::VisibilityLabel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.VisibilityLabel)
}
VisibilityLabel::VisibilityLabel(const VisibilityLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ordinal_ = from.ordinal_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.VisibilityLabel)
}

void VisibilityLabel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisibilityLabel_VisibilityLabels_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordinal_ = 0u;
}

VisibilityLabel::~VisibilityLabel() {
  // @@protoc_insertion_point(destructor:hbase.pb.VisibilityLabel)
  SharedDtor();
}

void VisibilityLabel::SharedDtor() {
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VisibilityLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisibilityLabel& VisibilityLabel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisibilityLabel_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void VisibilityLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.VisibilityLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmptyNoArena();
  }
  ordinal_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VisibilityLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_label(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ordinal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VisibilityLabel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.VisibilityLabel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes label = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ordinal = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ordinal(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.VisibilityLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.VisibilityLabel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VisibilityLabel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.VisibilityLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->label(), output);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->ordinal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.VisibilityLabel)
}

::PROTOBUF_NAMESPACE_ID::uint8* VisibilityLabel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.VisibilityLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes label = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->label(), target);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->ordinal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.VisibilityLabel)
  return target;
}

size_t VisibilityLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.VisibilityLabel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes label = 1;
  if (has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->label());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ordinal = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ordinal());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisibilityLabel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.VisibilityLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const VisibilityLabel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisibilityLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.VisibilityLabel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.VisibilityLabel)
    MergeFrom(*source);
  }
}

void VisibilityLabel::MergeFrom(const VisibilityLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.VisibilityLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisibilityLabel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.VisibilityLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisibilityLabel::CopyFrom(const VisibilityLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.VisibilityLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilityLabel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void VisibilityLabel::InternalSwap(VisibilityLabel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ordinal_, other->ordinal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisibilityLabel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisibilityLabelsResponse::InitAsDefaultInstance() {
}
class VisibilityLabelsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<VisibilityLabelsResponse>()._has_bits_);
};

void VisibilityLabelsResponse::clear_result() {
  result_.Clear();
}
VisibilityLabelsResponse::VisibilityLabelsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.VisibilityLabelsResponse)
}
VisibilityLabelsResponse::VisibilityLabelsResponse(const VisibilityLabelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      result_(from.result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.VisibilityLabelsResponse)
}

void VisibilityLabelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisibilityLabelsResponse_VisibilityLabels_2eproto.base);
}

VisibilityLabelsResponse::~VisibilityLabelsResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.VisibilityLabelsResponse)
  SharedDtor();
}

void VisibilityLabelsResponse::SharedDtor() {
}

void VisibilityLabelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisibilityLabelsResponse& VisibilityLabelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisibilityLabelsResponse_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void VisibilityLabelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.VisibilityLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VisibilityLabelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.RegionActionResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VisibilityLabelsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.VisibilityLabelsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.RegionActionResult result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.VisibilityLabelsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.VisibilityLabelsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VisibilityLabelsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.VisibilityLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionActionResult result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->result(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.VisibilityLabelsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* VisibilityLabelsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.VisibilityLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionActionResult result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->result(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.VisibilityLabelsResponse)
  return target;
}

size_t VisibilityLabelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.VisibilityLabelsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.RegionActionResult result = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->result_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->result(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisibilityLabelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.VisibilityLabelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VisibilityLabelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisibilityLabelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.VisibilityLabelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.VisibilityLabelsResponse)
    MergeFrom(*source);
  }
}

void VisibilityLabelsResponse::MergeFrom(const VisibilityLabelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.VisibilityLabelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
}

void VisibilityLabelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.VisibilityLabelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisibilityLabelsResponse::CopyFrom(const VisibilityLabelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.VisibilityLabelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibilityLabelsResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void VisibilityLabelsResponse::InternalSwap(VisibilityLabelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&result_)->InternalSwap(CastToBase(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisibilityLabelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAuthsRequest::InitAsDefaultInstance() {
}
class SetAuthsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetAuthsRequest>()._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetAuthsRequest::SetAuthsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SetAuthsRequest)
}
SetAuthsRequest::SetAuthsRequest(const SetAuthsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      auth_(from.auth_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SetAuthsRequest)
}

void SetAuthsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAuthsRequest_VisibilityLabels_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetAuthsRequest::~SetAuthsRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.SetAuthsRequest)
  SharedDtor();
}

void SetAuthsRequest::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAuthsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAuthsRequest& SetAuthsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAuthsRequest_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void SetAuthsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SetAuthsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAuthsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_auth(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAuthsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SetAuthsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes auth = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SetAuthsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SetAuthsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAuthsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SetAuthsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user(), output);
  }

  // repeated bytes auth = 2;
  for (int i = 0, n = this->auth_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->auth(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SetAuthsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAuthsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SetAuthsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes user = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // repeated bytes auth = 2;
  for (int i = 0, n = this->auth_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->auth(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SetAuthsRequest)
  return target;
}

size_t SetAuthsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SetAuthsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes user = 1;
  if (has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->user());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes auth = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->auth_size());
  for (int i = 0, n = this->auth_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->auth(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAuthsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SetAuthsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAuthsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAuthsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SetAuthsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SetAuthsRequest)
    MergeFrom(*source);
  }
}

void SetAuthsRequest::MergeFrom(const SetAuthsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SetAuthsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_.MergeFrom(from.auth_);
  if (from.has_user()) {
    _has_bits_[0] |= 0x00000001u;
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void SetAuthsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SetAuthsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAuthsRequest::CopyFrom(const SetAuthsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SetAuthsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAuthsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SetAuthsRequest::InternalSwap(SetAuthsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_.InternalSwap(CastToBase(&other->auth_));
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAuthsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserAuthorizations::InitAsDefaultInstance() {
}
class UserAuthorizations::_Internal {
 public:
  using HasBits = decltype(std::declval<UserAuthorizations>()._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserAuthorizations::UserAuthorizations()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.UserAuthorizations)
}
UserAuthorizations::UserAuthorizations(const UserAuthorizations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      auth_(from.auth_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.UserAuthorizations)
}

void UserAuthorizations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserAuthorizations_VisibilityLabels_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserAuthorizations::~UserAuthorizations() {
  // @@protoc_insertion_point(destructor:hbase.pb.UserAuthorizations)
  SharedDtor();
}

void UserAuthorizations::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserAuthorizations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserAuthorizations& UserAuthorizations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserAuthorizations_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void UserAuthorizations::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.UserAuthorizations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserAuthorizations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_auth(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_auth(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserAuthorizations::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.UserAuthorizations)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 auth = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_auth())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_auth())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.UserAuthorizations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.UserAuthorizations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserAuthorizations::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.UserAuthorizations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user(), output);
  }

  // repeated uint32 auth = 2;
  for (int i = 0, n = this->auth_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      2, this->auth(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.UserAuthorizations)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserAuthorizations::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.UserAuthorizations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes user = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // repeated uint32 auth = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->auth_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.UserAuthorizations)
  return target;
}

size_t UserAuthorizations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.UserAuthorizations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes user = 1;
  if (has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->user());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 auth = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->auth_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->auth_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAuthorizations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.UserAuthorizations)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAuthorizations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserAuthorizations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.UserAuthorizations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.UserAuthorizations)
    MergeFrom(*source);
  }
}

void UserAuthorizations::MergeFrom(const UserAuthorizations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.UserAuthorizations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_.MergeFrom(from.auth_);
  if (from.has_user()) {
    _has_bits_[0] |= 0x00000001u;
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void UserAuthorizations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.UserAuthorizations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAuthorizations::CopyFrom(const UserAuthorizations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.UserAuthorizations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAuthorizations::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserAuthorizations::InternalSwap(UserAuthorizations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_.InternalSwap(&other->auth_);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAuthorizations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiUserAuthorizations::InitAsDefaultInstance() {
}
class MultiUserAuthorizations::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiUserAuthorizations>()._has_bits_);
};

MultiUserAuthorizations::MultiUserAuthorizations()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MultiUserAuthorizations)
}
MultiUserAuthorizations::MultiUserAuthorizations(const MultiUserAuthorizations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      userauths_(from.userauths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MultiUserAuthorizations)
}

void MultiUserAuthorizations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiUserAuthorizations_VisibilityLabels_2eproto.base);
}

MultiUserAuthorizations::~MultiUserAuthorizations() {
  // @@protoc_insertion_point(destructor:hbase.pb.MultiUserAuthorizations)
  SharedDtor();
}

void MultiUserAuthorizations::SharedDtor() {
}

void MultiUserAuthorizations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiUserAuthorizations& MultiUserAuthorizations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiUserAuthorizations_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void MultiUserAuthorizations::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MultiUserAuthorizations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userauths_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultiUserAuthorizations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hbase.pb.UserAuthorizations userAuths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_userauths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultiUserAuthorizations::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MultiUserAuthorizations)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hbase.pb.UserAuthorizations userAuths = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_userauths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MultiUserAuthorizations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MultiUserAuthorizations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultiUserAuthorizations::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MultiUserAuthorizations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.UserAuthorizations userAuths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->userauths_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->userauths(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MultiUserAuthorizations)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiUserAuthorizations::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MultiUserAuthorizations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hbase.pb.UserAuthorizations userAuths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->userauths_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->userauths(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MultiUserAuthorizations)
  return target;
}

size_t MultiUserAuthorizations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MultiUserAuthorizations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.UserAuthorizations userAuths = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->userauths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->userauths(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiUserAuthorizations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MultiUserAuthorizations)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiUserAuthorizations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiUserAuthorizations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MultiUserAuthorizations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MultiUserAuthorizations)
    MergeFrom(*source);
  }
}

void MultiUserAuthorizations::MergeFrom(const MultiUserAuthorizations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MultiUserAuthorizations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userauths_.MergeFrom(from.userauths_);
}

void MultiUserAuthorizations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MultiUserAuthorizations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiUserAuthorizations::CopyFrom(const MultiUserAuthorizations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MultiUserAuthorizations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiUserAuthorizations::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->userauths())) return false;
  return true;
}

void MultiUserAuthorizations::InternalSwap(MultiUserAuthorizations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&userauths_)->InternalSwap(CastToBase(&other->userauths_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiUserAuthorizations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAuthsRequest::InitAsDefaultInstance() {
}
class GetAuthsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAuthsRequest>()._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetAuthsRequest::GetAuthsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetAuthsRequest)
}
GetAuthsRequest::GetAuthsRequest(const GetAuthsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetAuthsRequest)
}

void GetAuthsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthsRequest_VisibilityLabels_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAuthsRequest::~GetAuthsRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetAuthsRequest)
  SharedDtor();
}

void GetAuthsRequest::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAuthsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthsRequest& GetAuthsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthsRequest_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void GetAuthsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetAuthsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAuthsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAuthsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetAuthsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetAuthsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetAuthsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAuthsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetAuthsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetAuthsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetAuthsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes user = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetAuthsRequest)
  return target;
}

size_t GetAuthsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetAuthsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes user = 1;
  if (has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->user());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetAuthsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetAuthsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetAuthsRequest)
    MergeFrom(*source);
  }
}

void GetAuthsRequest::MergeFrom(const GetAuthsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetAuthsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _has_bits_[0] |= 0x00000001u;
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void GetAuthsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetAuthsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthsRequest::CopyFrom(const GetAuthsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetAuthsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetAuthsRequest::InternalSwap(GetAuthsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAuthsResponse::InitAsDefaultInstance() {
}
class GetAuthsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAuthsResponse>()._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetAuthsResponse::GetAuthsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.GetAuthsResponse)
}
GetAuthsResponse::GetAuthsResponse(const GetAuthsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      auth_(from.auth_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.GetAuthsResponse)
}

void GetAuthsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAuthsResponse_VisibilityLabels_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAuthsResponse::~GetAuthsResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.GetAuthsResponse)
  SharedDtor();
}

void GetAuthsResponse::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAuthsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAuthsResponse& GetAuthsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAuthsResponse_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void GetAuthsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.GetAuthsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAuthsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_auth(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAuthsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.GetAuthsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes auth = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.GetAuthsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.GetAuthsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAuthsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.GetAuthsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user(), output);
  }

  // repeated bytes auth = 2;
  for (int i = 0, n = this->auth_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->auth(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.GetAuthsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAuthsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.GetAuthsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes user = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // repeated bytes auth = 2;
  for (int i = 0, n = this->auth_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->auth(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.GetAuthsResponse)
  return target;
}

size_t GetAuthsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.GetAuthsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes user = 1;
  if (has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->user());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes auth = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->auth_size());
  for (int i = 0, n = this->auth_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->auth(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAuthsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.GetAuthsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAuthsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAuthsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.GetAuthsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.GetAuthsResponse)
    MergeFrom(*source);
  }
}

void GetAuthsResponse::MergeFrom(const GetAuthsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.GetAuthsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auth_.MergeFrom(from.auth_);
  if (from.has_user()) {
    _has_bits_[0] |= 0x00000001u;
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void GetAuthsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.GetAuthsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAuthsResponse::CopyFrom(const GetAuthsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.GetAuthsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAuthsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetAuthsResponse::InternalSwap(GetAuthsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auth_.InternalSwap(CastToBase(&other->auth_));
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAuthsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListLabelsRequest::InitAsDefaultInstance() {
}
class ListLabelsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListLabelsRequest>()._has_bits_);
  static void set_has_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ListLabelsRequest::ListLabelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ListLabelsRequest)
}
ListLabelsRequest::ListLabelsRequest(const ListLabelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_regex()) {
    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ListLabelsRequest)
}

void ListLabelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLabelsRequest_VisibilityLabels_2eproto.base);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListLabelsRequest::~ListLabelsRequest() {
  // @@protoc_insertion_point(destructor:hbase.pb.ListLabelsRequest)
  SharedDtor();
}

void ListLabelsRequest::SharedDtor() {
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListLabelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLabelsRequest& ListLabelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLabelsRequest_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void ListLabelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ListLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    regex_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListLabelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string regex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_regex(), ptr, ctx, "hbase.pb.ListLabelsRequest.regex");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListLabelsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ListLabelsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string regex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regex().data(), static_cast<int>(this->regex().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ListLabelsRequest.regex");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ListLabelsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ListLabelsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListLabelsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ListLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string regex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ListLabelsRequest.regex");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->regex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ListLabelsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLabelsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ListLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string regex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ListLabelsRequest.regex");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->regex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ListLabelsRequest)
  return target;
}

size_t ListLabelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ListLabelsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string regex = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->regex());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLabelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ListLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLabelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLabelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ListLabelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ListLabelsRequest)
    MergeFrom(*source);
  }
}

void ListLabelsRequest::MergeFrom(const ListLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ListLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_regex()) {
    _has_bits_[0] |= 0x00000001u;
    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
}

void ListLabelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ListLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLabelsRequest::CopyFrom(const ListLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ListLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabelsRequest::IsInitialized() const {
  return true;
}

void ListLabelsRequest::InternalSwap(ListLabelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLabelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListLabelsResponse::InitAsDefaultInstance() {
}
class ListLabelsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ListLabelsResponse>()._has_bits_);
};

ListLabelsResponse::ListLabelsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ListLabelsResponse)
}
ListLabelsResponse::ListLabelsResponse(const ListLabelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      label_(from.label_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ListLabelsResponse)
}

void ListLabelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLabelsResponse_VisibilityLabels_2eproto.base);
}

ListLabelsResponse::~ListLabelsResponse() {
  // @@protoc_insertion_point(destructor:hbase.pb.ListLabelsResponse)
  SharedDtor();
}

void ListLabelsResponse::SharedDtor() {
}

void ListLabelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLabelsResponse& ListLabelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLabelsResponse_VisibilityLabels_2eproto.base);
  return *internal_default_instance();
}


void ListLabelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ListLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListLabelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_label(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListLabelsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ListLabelsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes label = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ListLabelsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ListLabelsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListLabelsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ListLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes label = 1;
  for (int i = 0, n = this->label_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->label(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ListLabelsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLabelsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ListLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes label = 1;
  for (int i = 0, n = this->label_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->label(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ListLabelsResponse)
  return target;
}

size_t ListLabelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ListLabelsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes label = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->label_size());
  for (int i = 0, n = this->label_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->label(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLabelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ListLabelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLabelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLabelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ListLabelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ListLabelsResponse)
    MergeFrom(*source);
  }
}

void ListLabelsResponse::MergeFrom(const ListLabelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ListLabelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_.MergeFrom(from.label_);
}

void ListLabelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ListLabelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLabelsResponse::CopyFrom(const ListLabelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ListLabelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabelsResponse::IsInitialized() const {
  return true;
}

void ListLabelsResponse::InternalSwap(ListLabelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.InternalSwap(CastToBase(&other->label_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLabelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::VisibilityLabelsRequest* Arena::CreateMaybeMessage< ::hbase::pb::VisibilityLabelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::VisibilityLabelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::VisibilityLabel* Arena::CreateMaybeMessage< ::hbase::pb::VisibilityLabel >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::VisibilityLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::VisibilityLabelsResponse* Arena::CreateMaybeMessage< ::hbase::pb::VisibilityLabelsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::VisibilityLabelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SetAuthsRequest* Arena::CreateMaybeMessage< ::hbase::pb::SetAuthsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SetAuthsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::UserAuthorizations* Arena::CreateMaybeMessage< ::hbase::pb::UserAuthorizations >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::UserAuthorizations >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::MultiUserAuthorizations* Arena::CreateMaybeMessage< ::hbase::pb::MultiUserAuthorizations >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MultiUserAuthorizations >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetAuthsRequest* Arena::CreateMaybeMessage< ::hbase::pb::GetAuthsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetAuthsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::GetAuthsResponse* Arena::CreateMaybeMessage< ::hbase::pb::GetAuthsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::GetAuthsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ListLabelsRequest* Arena::CreateMaybeMessage< ::hbase::pb::ListLabelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ListLabelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ListLabelsResponse* Arena::CreateMaybeMessage< ::hbase::pb::ListLabelsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ListLabelsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
