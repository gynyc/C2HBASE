// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VisibilityLabels.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VisibilityLabels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VisibilityLabels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VisibilityLabels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VisibilityLabels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VisibilityLabels_2eproto;
namespace hbase {
namespace pb {
class GetAuthsRequest;
class GetAuthsRequestDefaultTypeInternal;
extern GetAuthsRequestDefaultTypeInternal _GetAuthsRequest_default_instance_;
class GetAuthsResponse;
class GetAuthsResponseDefaultTypeInternal;
extern GetAuthsResponseDefaultTypeInternal _GetAuthsResponse_default_instance_;
class ListLabelsRequest;
class ListLabelsRequestDefaultTypeInternal;
extern ListLabelsRequestDefaultTypeInternal _ListLabelsRequest_default_instance_;
class ListLabelsResponse;
class ListLabelsResponseDefaultTypeInternal;
extern ListLabelsResponseDefaultTypeInternal _ListLabelsResponse_default_instance_;
class MultiUserAuthorizations;
class MultiUserAuthorizationsDefaultTypeInternal;
extern MultiUserAuthorizationsDefaultTypeInternal _MultiUserAuthorizations_default_instance_;
class SetAuthsRequest;
class SetAuthsRequestDefaultTypeInternal;
extern SetAuthsRequestDefaultTypeInternal _SetAuthsRequest_default_instance_;
class UserAuthorizations;
class UserAuthorizationsDefaultTypeInternal;
extern UserAuthorizationsDefaultTypeInternal _UserAuthorizations_default_instance_;
class VisibilityLabel;
class VisibilityLabelDefaultTypeInternal;
extern VisibilityLabelDefaultTypeInternal _VisibilityLabel_default_instance_;
class VisibilityLabelsRequest;
class VisibilityLabelsRequestDefaultTypeInternal;
extern VisibilityLabelsRequestDefaultTypeInternal _VisibilityLabelsRequest_default_instance_;
class VisibilityLabelsResponse;
class VisibilityLabelsResponseDefaultTypeInternal;
extern VisibilityLabelsResponseDefaultTypeInternal _VisibilityLabelsResponse_default_instance_;
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> ::hbase::pb::GetAuthsRequest* Arena::CreateMaybeMessage<::hbase::pb::GetAuthsRequest>(Arena*);
template<> ::hbase::pb::GetAuthsResponse* Arena::CreateMaybeMessage<::hbase::pb::GetAuthsResponse>(Arena*);
template<> ::hbase::pb::ListLabelsRequest* Arena::CreateMaybeMessage<::hbase::pb::ListLabelsRequest>(Arena*);
template<> ::hbase::pb::ListLabelsResponse* Arena::CreateMaybeMessage<::hbase::pb::ListLabelsResponse>(Arena*);
template<> ::hbase::pb::MultiUserAuthorizations* Arena::CreateMaybeMessage<::hbase::pb::MultiUserAuthorizations>(Arena*);
template<> ::hbase::pb::SetAuthsRequest* Arena::CreateMaybeMessage<::hbase::pb::SetAuthsRequest>(Arena*);
template<> ::hbase::pb::UserAuthorizations* Arena::CreateMaybeMessage<::hbase::pb::UserAuthorizations>(Arena*);
template<> ::hbase::pb::VisibilityLabel* Arena::CreateMaybeMessage<::hbase::pb::VisibilityLabel>(Arena*);
template<> ::hbase::pb::VisibilityLabelsRequest* Arena::CreateMaybeMessage<::hbase::pb::VisibilityLabelsRequest>(Arena*);
template<> ::hbase::pb::VisibilityLabelsResponse* Arena::CreateMaybeMessage<::hbase::pb::VisibilityLabelsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hbase {
namespace pb {

// ===================================================================

class VisibilityLabelsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.VisibilityLabelsRequest) */ {
 public:
  VisibilityLabelsRequest();
  virtual ~VisibilityLabelsRequest();

  VisibilityLabelsRequest(const VisibilityLabelsRequest& from);
  VisibilityLabelsRequest(VisibilityLabelsRequest&& from) noexcept
    : VisibilityLabelsRequest() {
    *this = ::std::move(from);
  }

  inline VisibilityLabelsRequest& operator=(const VisibilityLabelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibilityLabelsRequest& operator=(VisibilityLabelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisibilityLabelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisibilityLabelsRequest* internal_default_instance() {
    return reinterpret_cast<const VisibilityLabelsRequest*>(
               &_VisibilityLabelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VisibilityLabelsRequest& a, VisibilityLabelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VisibilityLabelsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisibilityLabelsRequest* New() const final {
    return CreateMaybeMessage<VisibilityLabelsRequest>(nullptr);
  }

  VisibilityLabelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisibilityLabelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisibilityLabelsRequest& from);
  void MergeFrom(const VisibilityLabelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisibilityLabelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.VisibilityLabelsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisLabelFieldNumber = 1,
  };
  // repeated .hbase.pb.VisibilityLabel visLabel = 1;
  int vislabel_size() const;
  void clear_vislabel();
  ::hbase::pb::VisibilityLabel* mutable_vislabel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::VisibilityLabel >*
      mutable_vislabel();
  const ::hbase::pb::VisibilityLabel& vislabel(int index) const;
  ::hbase::pb::VisibilityLabel* add_vislabel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::VisibilityLabel >&
      vislabel() const;

  // @@protoc_insertion_point(class_scope:hbase.pb.VisibilityLabelsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::VisibilityLabel > vislabel_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// -------------------------------------------------------------------

class VisibilityLabel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.VisibilityLabel) */ {
 public:
  VisibilityLabel();
  virtual ~VisibilityLabel();

  VisibilityLabel(const VisibilityLabel& from);
  VisibilityLabel(VisibilityLabel&& from) noexcept
    : VisibilityLabel() {
    *this = ::std::move(from);
  }

  inline VisibilityLabel& operator=(const VisibilityLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibilityLabel& operator=(VisibilityLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisibilityLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisibilityLabel* internal_default_instance() {
    return reinterpret_cast<const VisibilityLabel*>(
               &_VisibilityLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VisibilityLabel& a, VisibilityLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(VisibilityLabel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisibilityLabel* New() const final {
    return CreateMaybeMessage<VisibilityLabel>(nullptr);
  }

  VisibilityLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisibilityLabel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisibilityLabel& from);
  void MergeFrom(const VisibilityLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisibilityLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.VisibilityLabel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kOrdinalFieldNumber = 2,
  };
  // required bytes label = 1;
  bool has_label() const;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const void* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // optional uint32 ordinal = 2;
  bool has_ordinal() const;
  void clear_ordinal();
  ::PROTOBUF_NAMESPACE_ID::uint32 ordinal() const;
  void set_ordinal(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:hbase.pb.VisibilityLabel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ordinal_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// -------------------------------------------------------------------

class VisibilityLabelsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.VisibilityLabelsResponse) */ {
 public:
  VisibilityLabelsResponse();
  virtual ~VisibilityLabelsResponse();

  VisibilityLabelsResponse(const VisibilityLabelsResponse& from);
  VisibilityLabelsResponse(VisibilityLabelsResponse&& from) noexcept
    : VisibilityLabelsResponse() {
    *this = ::std::move(from);
  }

  inline VisibilityLabelsResponse& operator=(const VisibilityLabelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibilityLabelsResponse& operator=(VisibilityLabelsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisibilityLabelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisibilityLabelsResponse* internal_default_instance() {
    return reinterpret_cast<const VisibilityLabelsResponse*>(
               &_VisibilityLabelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VisibilityLabelsResponse& a, VisibilityLabelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VisibilityLabelsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisibilityLabelsResponse* New() const final {
    return CreateMaybeMessage<VisibilityLabelsResponse>(nullptr);
  }

  VisibilityLabelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisibilityLabelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisibilityLabelsResponse& from);
  void MergeFrom(const VisibilityLabelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisibilityLabelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.VisibilityLabelsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // repeated .hbase.pb.RegionActionResult result = 1;
  int result_size() const;
  void clear_result();
  ::hbase::pb::RegionActionResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionActionResult >*
      mutable_result();
  const ::hbase::pb::RegionActionResult& result(int index) const;
  ::hbase::pb::RegionActionResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionActionResult >&
      result() const;

  // @@protoc_insertion_point(class_scope:hbase.pb.VisibilityLabelsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionActionResult > result_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// -------------------------------------------------------------------

class SetAuthsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.SetAuthsRequest) */ {
 public:
  SetAuthsRequest();
  virtual ~SetAuthsRequest();

  SetAuthsRequest(const SetAuthsRequest& from);
  SetAuthsRequest(SetAuthsRequest&& from) noexcept
    : SetAuthsRequest() {
    *this = ::std::move(from);
  }

  inline SetAuthsRequest& operator=(const SetAuthsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAuthsRequest& operator=(SetAuthsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAuthsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAuthsRequest* internal_default_instance() {
    return reinterpret_cast<const SetAuthsRequest*>(
               &_SetAuthsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetAuthsRequest& a, SetAuthsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAuthsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAuthsRequest* New() const final {
    return CreateMaybeMessage<SetAuthsRequest>(nullptr);
  }

  SetAuthsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAuthsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAuthsRequest& from);
  void MergeFrom(const SetAuthsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAuthsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.SetAuthsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated bytes auth = 2;
  int auth_size() const;
  void clear_auth();
  const std::string& auth(int index) const;
  std::string* mutable_auth(int index);
  void set_auth(int index, const std::string& value);
  void set_auth(int index, std::string&& value);
  void set_auth(int index, const char* value);
  void set_auth(int index, const void* value, size_t size);
  std::string* add_auth();
  void add_auth(const std::string& value);
  void add_auth(std::string&& value);
  void add_auth(const char* value);
  void add_auth(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& auth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_auth();

  // required bytes user = 1;
  bool has_user() const;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const void* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // @@protoc_insertion_point(class_scope:hbase.pb.SetAuthsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// -------------------------------------------------------------------

class UserAuthorizations :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.UserAuthorizations) */ {
 public:
  UserAuthorizations();
  virtual ~UserAuthorizations();

  UserAuthorizations(const UserAuthorizations& from);
  UserAuthorizations(UserAuthorizations&& from) noexcept
    : UserAuthorizations() {
    *this = ::std::move(from);
  }

  inline UserAuthorizations& operator=(const UserAuthorizations& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAuthorizations& operator=(UserAuthorizations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAuthorizations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAuthorizations* internal_default_instance() {
    return reinterpret_cast<const UserAuthorizations*>(
               &_UserAuthorizations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserAuthorizations& a, UserAuthorizations& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAuthorizations* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAuthorizations* New() const final {
    return CreateMaybeMessage<UserAuthorizations>(nullptr);
  }

  UserAuthorizations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAuthorizations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAuthorizations& from);
  void MergeFrom(const UserAuthorizations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAuthorizations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.UserAuthorizations";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated uint32 auth = 2;
  int auth_size() const;
  void clear_auth();
  ::PROTOBUF_NAMESPACE_ID::uint32 auth(int index) const;
  void set_auth(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_auth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      auth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_auth();

  // required bytes user = 1;
  bool has_user() const;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const void* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // @@protoc_insertion_point(class_scope:hbase.pb.UserAuthorizations)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// -------------------------------------------------------------------

class MultiUserAuthorizations :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.MultiUserAuthorizations) */ {
 public:
  MultiUserAuthorizations();
  virtual ~MultiUserAuthorizations();

  MultiUserAuthorizations(const MultiUserAuthorizations& from);
  MultiUserAuthorizations(MultiUserAuthorizations&& from) noexcept
    : MultiUserAuthorizations() {
    *this = ::std::move(from);
  }

  inline MultiUserAuthorizations& operator=(const MultiUserAuthorizations& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiUserAuthorizations& operator=(MultiUserAuthorizations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiUserAuthorizations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiUserAuthorizations* internal_default_instance() {
    return reinterpret_cast<const MultiUserAuthorizations*>(
               &_MultiUserAuthorizations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MultiUserAuthorizations& a, MultiUserAuthorizations& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiUserAuthorizations* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiUserAuthorizations* New() const final {
    return CreateMaybeMessage<MultiUserAuthorizations>(nullptr);
  }

  MultiUserAuthorizations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiUserAuthorizations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiUserAuthorizations& from);
  void MergeFrom(const MultiUserAuthorizations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiUserAuthorizations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.MultiUserAuthorizations";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAuthsFieldNumber = 1,
  };
  // repeated .hbase.pb.UserAuthorizations userAuths = 1;
  int userauths_size() const;
  void clear_userauths();
  ::hbase::pb::UserAuthorizations* mutable_userauths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UserAuthorizations >*
      mutable_userauths();
  const ::hbase::pb::UserAuthorizations& userauths(int index) const;
  ::hbase::pb::UserAuthorizations* add_userauths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UserAuthorizations >&
      userauths() const;

  // @@protoc_insertion_point(class_scope:hbase.pb.MultiUserAuthorizations)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UserAuthorizations > userauths_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// -------------------------------------------------------------------

class GetAuthsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetAuthsRequest) */ {
 public:
  GetAuthsRequest();
  virtual ~GetAuthsRequest();

  GetAuthsRequest(const GetAuthsRequest& from);
  GetAuthsRequest(GetAuthsRequest&& from) noexcept
    : GetAuthsRequest() {
    *this = ::std::move(from);
  }

  inline GetAuthsRequest& operator=(const GetAuthsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthsRequest& operator=(GetAuthsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAuthsRequest*>(
               &_GetAuthsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetAuthsRequest& a, GetAuthsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthsRequest* New() const final {
    return CreateMaybeMessage<GetAuthsRequest>(nullptr);
  }

  GetAuthsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthsRequest& from);
  void MergeFrom(const GetAuthsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetAuthsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // required bytes user = 1;
  bool has_user() const;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const void* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetAuthsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// -------------------------------------------------------------------

class GetAuthsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.GetAuthsResponse) */ {
 public:
  GetAuthsResponse();
  virtual ~GetAuthsResponse();

  GetAuthsResponse(const GetAuthsResponse& from);
  GetAuthsResponse(GetAuthsResponse&& from) noexcept
    : GetAuthsResponse() {
    *this = ::std::move(from);
  }

  inline GetAuthsResponse& operator=(const GetAuthsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthsResponse& operator=(GetAuthsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAuthsResponse*>(
               &_GetAuthsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetAuthsResponse& a, GetAuthsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthsResponse* New() const final {
    return CreateMaybeMessage<GetAuthsResponse>(nullptr);
  }

  GetAuthsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthsResponse& from);
  void MergeFrom(const GetAuthsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.GetAuthsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated bytes auth = 2;
  int auth_size() const;
  void clear_auth();
  const std::string& auth(int index) const;
  std::string* mutable_auth(int index);
  void set_auth(int index, const std::string& value);
  void set_auth(int index, std::string&& value);
  void set_auth(int index, const char* value);
  void set_auth(int index, const void* value, size_t size);
  std::string* add_auth();
  void add_auth(const std::string& value);
  void add_auth(std::string&& value);
  void add_auth(const char* value);
  void add_auth(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& auth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_auth();

  // required bytes user = 1;
  bool has_user() const;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const void* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);

  // @@protoc_insertion_point(class_scope:hbase.pb.GetAuthsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// -------------------------------------------------------------------

class ListLabelsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ListLabelsRequest) */ {
 public:
  ListLabelsRequest();
  virtual ~ListLabelsRequest();

  ListLabelsRequest(const ListLabelsRequest& from);
  ListLabelsRequest(ListLabelsRequest&& from) noexcept
    : ListLabelsRequest() {
    *this = ::std::move(from);
  }

  inline ListLabelsRequest& operator=(const ListLabelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabelsRequest& operator=(ListLabelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLabelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLabelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLabelsRequest*>(
               &_ListLabelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListLabelsRequest& a, ListLabelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLabelsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLabelsRequest* New() const final {
    return CreateMaybeMessage<ListLabelsRequest>(nullptr);
  }

  ListLabelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLabelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLabelsRequest& from);
  void MergeFrom(const ListLabelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLabelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ListLabelsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegexFieldNumber = 1,
  };
  // optional string regex = 1;
  bool has_regex() const;
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);

  // @@protoc_insertion_point(class_scope:hbase.pb.ListLabelsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// -------------------------------------------------------------------

class ListLabelsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hbase.pb.ListLabelsResponse) */ {
 public:
  ListLabelsResponse();
  virtual ~ListLabelsResponse();

  ListLabelsResponse(const ListLabelsResponse& from);
  ListLabelsResponse(ListLabelsResponse&& from) noexcept
    : ListLabelsResponse() {
    *this = ::std::move(from);
  }

  inline ListLabelsResponse& operator=(const ListLabelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabelsResponse& operator=(ListLabelsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLabelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLabelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListLabelsResponse*>(
               &_ListLabelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListLabelsResponse& a, ListLabelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLabelsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLabelsResponse* New() const final {
    return CreateMaybeMessage<ListLabelsResponse>(nullptr);
  }

  ListLabelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLabelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLabelsResponse& from);
  void MergeFrom(const ListLabelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLabelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hbase.pb.ListLabelsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VisibilityLabels_2eproto);
    return ::descriptor_table_VisibilityLabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // repeated bytes label = 1;
  int label_size() const;
  void clear_label();
  const std::string& label(int index) const;
  std::string* mutable_label(int index);
  void set_label(int index, const std::string& value);
  void set_label(int index, std::string&& value);
  void set_label(int index, const char* value);
  void set_label(int index, const void* value, size_t size);
  std::string* add_label();
  void add_label(const std::string& value);
  void add_label(std::string&& value);
  void add_label(const char* value);
  void add_label(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& label() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_label();

  // @@protoc_insertion_point(class_scope:hbase.pb.ListLabelsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> label_;
  friend struct ::TableStruct_VisibilityLabels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VisibilityLabelsRequest

// repeated .hbase.pb.VisibilityLabel visLabel = 1;
inline int VisibilityLabelsRequest::vislabel_size() const {
  return vislabel_.size();
}
inline void VisibilityLabelsRequest::clear_vislabel() {
  vislabel_.Clear();
}
inline ::hbase::pb::VisibilityLabel* VisibilityLabelsRequest::mutable_vislabel(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.VisibilityLabelsRequest.visLabel)
  return vislabel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::VisibilityLabel >*
VisibilityLabelsRequest::mutable_vislabel() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.VisibilityLabelsRequest.visLabel)
  return &vislabel_;
}
inline const ::hbase::pb::VisibilityLabel& VisibilityLabelsRequest::vislabel(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.VisibilityLabelsRequest.visLabel)
  return vislabel_.Get(index);
}
inline ::hbase::pb::VisibilityLabel* VisibilityLabelsRequest::add_vislabel() {
  // @@protoc_insertion_point(field_add:hbase.pb.VisibilityLabelsRequest.visLabel)
  return vislabel_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::VisibilityLabel >&
VisibilityLabelsRequest::vislabel() const {
  // @@protoc_insertion_point(field_list:hbase.pb.VisibilityLabelsRequest.visLabel)
  return vislabel_;
}

// -------------------------------------------------------------------

// VisibilityLabel

// required bytes label = 1;
inline bool VisibilityLabel::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisibilityLabel::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VisibilityLabel::label() const {
  // @@protoc_insertion_point(field_get:hbase.pb.VisibilityLabel.label)
  return label_.GetNoArena();
}
inline void VisibilityLabel::set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.VisibilityLabel.label)
}
inline void VisibilityLabel::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.VisibilityLabel.label)
}
inline void VisibilityLabel::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.VisibilityLabel.label)
}
inline void VisibilityLabel::set_label(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.VisibilityLabel.label)
}
inline std::string* VisibilityLabel::mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.VisibilityLabel.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VisibilityLabel::release_label() {
  // @@protoc_insertion_point(field_release:hbase.pb.VisibilityLabel.label)
  if (!has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VisibilityLabel::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.VisibilityLabel.label)
}

// optional uint32 ordinal = 2;
inline bool VisibilityLabel::has_ordinal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisibilityLabel::clear_ordinal() {
  ordinal_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibilityLabel::ordinal() const {
  // @@protoc_insertion_point(field_get:hbase.pb.VisibilityLabel.ordinal)
  return ordinal_;
}
inline void VisibilityLabel::set_ordinal(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ordinal_ = value;
  // @@protoc_insertion_point(field_set:hbase.pb.VisibilityLabel.ordinal)
}

// -------------------------------------------------------------------

// VisibilityLabelsResponse

// repeated .hbase.pb.RegionActionResult result = 1;
inline int VisibilityLabelsResponse::result_size() const {
  return result_.size();
}
inline ::hbase::pb::RegionActionResult* VisibilityLabelsResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.VisibilityLabelsResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionActionResult >*
VisibilityLabelsResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.VisibilityLabelsResponse.result)
  return &result_;
}
inline const ::hbase::pb::RegionActionResult& VisibilityLabelsResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.VisibilityLabelsResponse.result)
  return result_.Get(index);
}
inline ::hbase::pb::RegionActionResult* VisibilityLabelsResponse::add_result() {
  // @@protoc_insertion_point(field_add:hbase.pb.VisibilityLabelsResponse.result)
  return result_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::RegionActionResult >&
VisibilityLabelsResponse::result() const {
  // @@protoc_insertion_point(field_list:hbase.pb.VisibilityLabelsResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// SetAuthsRequest

// required bytes user = 1;
inline bool SetAuthsRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetAuthsRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SetAuthsRequest::user() const {
  // @@protoc_insertion_point(field_get:hbase.pb.SetAuthsRequest.user)
  return user_.GetNoArena();
}
inline void SetAuthsRequest::set_user(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.SetAuthsRequest.user)
}
inline void SetAuthsRequest::set_user(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.SetAuthsRequest.user)
}
inline void SetAuthsRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.SetAuthsRequest.user)
}
inline void SetAuthsRequest::set_user(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.SetAuthsRequest.user)
}
inline std::string* SetAuthsRequest::mutable_user() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.SetAuthsRequest.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAuthsRequest::release_user() {
  // @@protoc_insertion_point(field_release:hbase.pb.SetAuthsRequest.user)
  if (!has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAuthsRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.SetAuthsRequest.user)
}

// repeated bytes auth = 2;
inline int SetAuthsRequest::auth_size() const {
  return auth_.size();
}
inline void SetAuthsRequest::clear_auth() {
  auth_.Clear();
}
inline const std::string& SetAuthsRequest::auth(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.SetAuthsRequest.auth)
  return auth_.Get(index);
}
inline std::string* SetAuthsRequest::mutable_auth(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.SetAuthsRequest.auth)
  return auth_.Mutable(index);
}
inline void SetAuthsRequest::set_auth(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.SetAuthsRequest.auth)
  auth_.Mutable(index)->assign(value);
}
inline void SetAuthsRequest::set_auth(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.SetAuthsRequest.auth)
  auth_.Mutable(index)->assign(std::move(value));
}
inline void SetAuthsRequest::set_auth(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hbase.pb.SetAuthsRequest.auth)
}
inline void SetAuthsRequest::set_auth(int index, const void* value, size_t size) {
  auth_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.SetAuthsRequest.auth)
}
inline std::string* SetAuthsRequest::add_auth() {
  // @@protoc_insertion_point(field_add_mutable:hbase.pb.SetAuthsRequest.auth)
  return auth_.Add();
}
inline void SetAuthsRequest::add_auth(const std::string& value) {
  auth_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hbase.pb.SetAuthsRequest.auth)
}
inline void SetAuthsRequest::add_auth(std::string&& value) {
  auth_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hbase.pb.SetAuthsRequest.auth)
}
inline void SetAuthsRequest::add_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hbase.pb.SetAuthsRequest.auth)
}
inline void SetAuthsRequest::add_auth(const void* value, size_t size) {
  auth_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hbase.pb.SetAuthsRequest.auth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetAuthsRequest::auth() const {
  // @@protoc_insertion_point(field_list:hbase.pb.SetAuthsRequest.auth)
  return auth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SetAuthsRequest::mutable_auth() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.SetAuthsRequest.auth)
  return &auth_;
}

// -------------------------------------------------------------------

// UserAuthorizations

// required bytes user = 1;
inline bool UserAuthorizations::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAuthorizations::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserAuthorizations::user() const {
  // @@protoc_insertion_point(field_get:hbase.pb.UserAuthorizations.user)
  return user_.GetNoArena();
}
inline void UserAuthorizations::set_user(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.UserAuthorizations.user)
}
inline void UserAuthorizations::set_user(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.UserAuthorizations.user)
}
inline void UserAuthorizations::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.UserAuthorizations.user)
}
inline void UserAuthorizations::set_user(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.UserAuthorizations.user)
}
inline std::string* UserAuthorizations::mutable_user() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.UserAuthorizations.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserAuthorizations::release_user() {
  // @@protoc_insertion_point(field_release:hbase.pb.UserAuthorizations.user)
  if (!has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserAuthorizations::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.UserAuthorizations.user)
}

// repeated uint32 auth = 2;
inline int UserAuthorizations::auth_size() const {
  return auth_.size();
}
inline void UserAuthorizations::clear_auth() {
  auth_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserAuthorizations::auth(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.UserAuthorizations.auth)
  return auth_.Get(index);
}
inline void UserAuthorizations::set_auth(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  auth_.Set(index, value);
  // @@protoc_insertion_point(field_set:hbase.pb.UserAuthorizations.auth)
}
inline void UserAuthorizations::add_auth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  auth_.Add(value);
  // @@protoc_insertion_point(field_add:hbase.pb.UserAuthorizations.auth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UserAuthorizations::auth() const {
  // @@protoc_insertion_point(field_list:hbase.pb.UserAuthorizations.auth)
  return auth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UserAuthorizations::mutable_auth() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.UserAuthorizations.auth)
  return &auth_;
}

// -------------------------------------------------------------------

// MultiUserAuthorizations

// repeated .hbase.pb.UserAuthorizations userAuths = 1;
inline int MultiUserAuthorizations::userauths_size() const {
  return userauths_.size();
}
inline void MultiUserAuthorizations::clear_userauths() {
  userauths_.Clear();
}
inline ::hbase::pb::UserAuthorizations* MultiUserAuthorizations::mutable_userauths(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.MultiUserAuthorizations.userAuths)
  return userauths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UserAuthorizations >*
MultiUserAuthorizations::mutable_userauths() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.MultiUserAuthorizations.userAuths)
  return &userauths_;
}
inline const ::hbase::pb::UserAuthorizations& MultiUserAuthorizations::userauths(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.MultiUserAuthorizations.userAuths)
  return userauths_.Get(index);
}
inline ::hbase::pb::UserAuthorizations* MultiUserAuthorizations::add_userauths() {
  // @@protoc_insertion_point(field_add:hbase.pb.MultiUserAuthorizations.userAuths)
  return userauths_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hbase::pb::UserAuthorizations >&
MultiUserAuthorizations::userauths() const {
  // @@protoc_insertion_point(field_list:hbase.pb.MultiUserAuthorizations.userAuths)
  return userauths_;
}

// -------------------------------------------------------------------

// GetAuthsRequest

// required bytes user = 1;
inline bool GetAuthsRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAuthsRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAuthsRequest::user() const {
  // @@protoc_insertion_point(field_get:hbase.pb.GetAuthsRequest.user)
  return user_.GetNoArena();
}
inline void GetAuthsRequest::set_user(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.GetAuthsRequest.user)
}
inline void GetAuthsRequest::set_user(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.GetAuthsRequest.user)
}
inline void GetAuthsRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.GetAuthsRequest.user)
}
inline void GetAuthsRequest::set_user(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.GetAuthsRequest.user)
}
inline std::string* GetAuthsRequest::mutable_user() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetAuthsRequest.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAuthsRequest::release_user() {
  // @@protoc_insertion_point(field_release:hbase.pb.GetAuthsRequest.user)
  if (!has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAuthsRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GetAuthsRequest.user)
}

// -------------------------------------------------------------------

// GetAuthsResponse

// required bytes user = 1;
inline bool GetAuthsResponse::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAuthsResponse::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetAuthsResponse::user() const {
  // @@protoc_insertion_point(field_get:hbase.pb.GetAuthsResponse.user)
  return user_.GetNoArena();
}
inline void GetAuthsResponse::set_user(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.GetAuthsResponse.user)
}
inline void GetAuthsResponse::set_user(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.GetAuthsResponse.user)
}
inline void GetAuthsResponse::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.GetAuthsResponse.user)
}
inline void GetAuthsResponse::set_user(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.GetAuthsResponse.user)
}
inline std::string* GetAuthsResponse::mutable_user() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetAuthsResponse.user)
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAuthsResponse::release_user() {
  // @@protoc_insertion_point(field_release:hbase.pb.GetAuthsResponse.user)
  if (!has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAuthsResponse::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.GetAuthsResponse.user)
}

// repeated bytes auth = 2;
inline int GetAuthsResponse::auth_size() const {
  return auth_.size();
}
inline void GetAuthsResponse::clear_auth() {
  auth_.Clear();
}
inline const std::string& GetAuthsResponse::auth(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.GetAuthsResponse.auth)
  return auth_.Get(index);
}
inline std::string* GetAuthsResponse::mutable_auth(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.GetAuthsResponse.auth)
  return auth_.Mutable(index);
}
inline void GetAuthsResponse::set_auth(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.GetAuthsResponse.auth)
  auth_.Mutable(index)->assign(value);
}
inline void GetAuthsResponse::set_auth(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.GetAuthsResponse.auth)
  auth_.Mutable(index)->assign(std::move(value));
}
inline void GetAuthsResponse::set_auth(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hbase.pb.GetAuthsResponse.auth)
}
inline void GetAuthsResponse::set_auth(int index, const void* value, size_t size) {
  auth_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.GetAuthsResponse.auth)
}
inline std::string* GetAuthsResponse::add_auth() {
  // @@protoc_insertion_point(field_add_mutable:hbase.pb.GetAuthsResponse.auth)
  return auth_.Add();
}
inline void GetAuthsResponse::add_auth(const std::string& value) {
  auth_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hbase.pb.GetAuthsResponse.auth)
}
inline void GetAuthsResponse::add_auth(std::string&& value) {
  auth_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hbase.pb.GetAuthsResponse.auth)
}
inline void GetAuthsResponse::add_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  auth_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hbase.pb.GetAuthsResponse.auth)
}
inline void GetAuthsResponse::add_auth(const void* value, size_t size) {
  auth_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hbase.pb.GetAuthsResponse.auth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAuthsResponse::auth() const {
  // @@protoc_insertion_point(field_list:hbase.pb.GetAuthsResponse.auth)
  return auth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAuthsResponse::mutable_auth() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.GetAuthsResponse.auth)
  return &auth_;
}

// -------------------------------------------------------------------

// ListLabelsRequest

// optional string regex = 1;
inline bool ListLabelsRequest::has_regex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListLabelsRequest::clear_regex() {
  regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListLabelsRequest::regex() const {
  // @@protoc_insertion_point(field_get:hbase.pb.ListLabelsRequest.regex)
  return regex_.GetNoArena();
}
inline void ListLabelsRequest::set_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hbase.pb.ListLabelsRequest.regex)
}
inline void ListLabelsRequest::set_regex(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hbase.pb.ListLabelsRequest.regex)
}
inline void ListLabelsRequest::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hbase.pb.ListLabelsRequest.regex)
}
inline void ListLabelsRequest::set_regex(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ListLabelsRequest.regex)
}
inline std::string* ListLabelsRequest::mutable_regex() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hbase.pb.ListLabelsRequest.regex)
  return regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListLabelsRequest::release_regex() {
  // @@protoc_insertion_point(field_release:hbase.pb.ListLabelsRequest.regex)
  if (!has_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return regex_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListLabelsRequest::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex);
  // @@protoc_insertion_point(field_set_allocated:hbase.pb.ListLabelsRequest.regex)
}

// -------------------------------------------------------------------

// ListLabelsResponse

// repeated bytes label = 1;
inline int ListLabelsResponse::label_size() const {
  return label_.size();
}
inline void ListLabelsResponse::clear_label() {
  label_.Clear();
}
inline const std::string& ListLabelsResponse::label(int index) const {
  // @@protoc_insertion_point(field_get:hbase.pb.ListLabelsResponse.label)
  return label_.Get(index);
}
inline std::string* ListLabelsResponse::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:hbase.pb.ListLabelsResponse.label)
  return label_.Mutable(index);
}
inline void ListLabelsResponse::set_label(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.ListLabelsResponse.label)
  label_.Mutable(index)->assign(value);
}
inline void ListLabelsResponse::set_label(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hbase.pb.ListLabelsResponse.label)
  label_.Mutable(index)->assign(std::move(value));
}
inline void ListLabelsResponse::set_label(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hbase.pb.ListLabelsResponse.label)
}
inline void ListLabelsResponse::set_label(int index, const void* value, size_t size) {
  label_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hbase.pb.ListLabelsResponse.label)
}
inline std::string* ListLabelsResponse::add_label() {
  // @@protoc_insertion_point(field_add_mutable:hbase.pb.ListLabelsResponse.label)
  return label_.Add();
}
inline void ListLabelsResponse::add_label(const std::string& value) {
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hbase.pb.ListLabelsResponse.label)
}
inline void ListLabelsResponse::add_label(std::string&& value) {
  label_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hbase.pb.ListLabelsResponse.label)
}
inline void ListLabelsResponse::add_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hbase.pb.ListLabelsResponse.label)
}
inline void ListLabelsResponse::add_label(const void* value, size_t size) {
  label_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hbase.pb.ListLabelsResponse.label)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListLabelsResponse::label() const {
  // @@protoc_insertion_point(field_list:hbase.pb.ListLabelsResponse.label)
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListLabelsResponse::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:hbase.pb.ListLabelsResponse.label)
  return &label_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hbase

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VisibilityLabels_2eproto
