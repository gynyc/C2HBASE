// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WAL.proto

#include "WAL.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_WAL_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FamilyScope_WAL_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WAL_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushDescriptor_StoreFlushDescriptor_WAL_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerName_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_WAL_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreDescriptor_WAL_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableName_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UUID_HBase_2eproto;
namespace hbase {
namespace pb {
class WALHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WALHeader> _instance;
} _WALHeader_default_instance_;
class WALKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WALKey> _instance;
} _WALKey_default_instance_;
class FamilyScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FamilyScope> _instance;
} _FamilyScope_default_instance_;
class CompactionDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompactionDescriptor> _instance;
} _CompactionDescriptor_default_instance_;
class FlushDescriptor_StoreFlushDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushDescriptor_StoreFlushDescriptor> _instance;
} _FlushDescriptor_StoreFlushDescriptor_default_instance_;
class FlushDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushDescriptor> _instance;
} _FlushDescriptor_default_instance_;
class StoreDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreDescriptor> _instance;
} _StoreDescriptor_default_instance_;
class BulkLoadDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkLoadDescriptor> _instance;
} _BulkLoadDescriptor_default_instance_;
class RegionEventDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionEventDescriptor> _instance;
} _RegionEventDescriptor_default_instance_;
class WALTrailerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WALTrailer> _instance;
} _WALTrailer_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_BulkLoadDescriptor_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_BulkLoadDescriptor_default_instance_;
    new (ptr) ::hbase::pb::BulkLoadDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::BulkLoadDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BulkLoadDescriptor_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BulkLoadDescriptor_WAL_2eproto}, {
      &scc_info_TableName_HBase_2eproto.base,
      &scc_info_StoreDescriptor_WAL_2eproto.base,}};

static void InitDefaultsscc_info_CompactionDescriptor_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_CompactionDescriptor_default_instance_;
    new (ptr) ::hbase::pb::CompactionDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::CompactionDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactionDescriptor_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CompactionDescriptor_WAL_2eproto}, {}};

static void InitDefaultsscc_info_FamilyScope_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FamilyScope_default_instance_;
    new (ptr) ::hbase::pb::FamilyScope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FamilyScope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FamilyScope_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FamilyScope_WAL_2eproto}, {}};

static void InitDefaultsscc_info_FlushDescriptor_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FlushDescriptor_default_instance_;
    new (ptr) ::hbase::pb::FlushDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FlushDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlushDescriptor_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FlushDescriptor_WAL_2eproto}, {
      &scc_info_FlushDescriptor_StoreFlushDescriptor_WAL_2eproto.base,}};

static void InitDefaultsscc_info_FlushDescriptor_StoreFlushDescriptor_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_FlushDescriptor_StoreFlushDescriptor_default_instance_;
    new (ptr) ::hbase::pb::FlushDescriptor_StoreFlushDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::FlushDescriptor_StoreFlushDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushDescriptor_StoreFlushDescriptor_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FlushDescriptor_StoreFlushDescriptor_WAL_2eproto}, {}};

static void InitDefaultsscc_info_RegionEventDescriptor_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_RegionEventDescriptor_default_instance_;
    new (ptr) ::hbase::pb::RegionEventDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::RegionEventDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionEventDescriptor_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegionEventDescriptor_WAL_2eproto}, {
      &scc_info_StoreDescriptor_WAL_2eproto.base,
      &scc_info_ServerName_HBase_2eproto.base,}};

static void InitDefaultsscc_info_StoreDescriptor_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_StoreDescriptor_default_instance_;
    new (ptr) ::hbase::pb::StoreDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::StoreDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreDescriptor_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StoreDescriptor_WAL_2eproto}, {}};

static void InitDefaultsscc_info_WALHeader_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_WALHeader_default_instance_;
    new (ptr) ::hbase::pb::WALHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::WALHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WALHeader_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WALHeader_WAL_2eproto}, {}};

static void InitDefaultsscc_info_WALKey_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_WALKey_default_instance_;
    new (ptr) ::hbase::pb::WALKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::WALKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WALKey_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WALKey_WAL_2eproto}, {
      &scc_info_UUID_HBase_2eproto.base,
      &scc_info_FamilyScope_WAL_2eproto.base,}};

static void InitDefaultsscc_info_WALTrailer_WAL_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_WALTrailer_default_instance_;
    new (ptr) ::hbase::pb::WALTrailer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::WALTrailer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WALTrailer_WAL_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WALTrailer_WAL_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_WAL_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_WAL_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_WAL_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_WAL_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALHeader, has_compression_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALHeader, encryption_key_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALHeader, has_tag_compression_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALHeader, writer_cls_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALHeader, cell_codec_cls_name_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, encoded_region_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, table_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, log_sequence_number_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, write_time_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, scopes_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, following_kv_count_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, cluster_ids_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, noncegroup_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, nonce_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALKey, orig_sequence_number_),
  0,
  1,
  3,
  4,
  2,
  ~0u,
  8,
  ~0u,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FamilyScope, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FamilyScope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FamilyScope, family_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FamilyScope, scope_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactionDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactionDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactionDescriptor, table_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactionDescriptor, encoded_region_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactionDescriptor, family_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactionDescriptor, compaction_input_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactionDescriptor, compaction_output_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactionDescriptor, store_home_dir_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::CompactionDescriptor, region_name_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor_StoreFlushDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor_StoreFlushDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor_StoreFlushDescriptor, family_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor_StoreFlushDescriptor, store_home_dir_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor_StoreFlushDescriptor, flush_output_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor, action_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor, table_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor, encoded_region_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor, flush_sequence_number_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor, store_flushes_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::FlushDescriptor, region_name_),
  4,
  0,
  1,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreDescriptor, family_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreDescriptor, store_home_dir_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreDescriptor, store_file_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::StoreDescriptor, store_file_size_bytes_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadDescriptor, table_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadDescriptor, encoded_region_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadDescriptor, stores_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::BulkLoadDescriptor, bulkload_seq_num_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionEventDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionEventDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionEventDescriptor, event_type_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionEventDescriptor, table_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionEventDescriptor, encoded_region_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionEventDescriptor, log_sequence_number_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionEventDescriptor, stores_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionEventDescriptor, server_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::RegionEventDescriptor, region_name_),
  5,
  0,
  1,
  4,
  ~0u,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALTrailer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::WALTrailer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::hbase::pb::WALHeader)},
  { 15, 31, sizeof(::hbase::pb::WALKey)},
  { 42, 49, sizeof(::hbase::pb::FamilyScope)},
  { 51, 63, sizeof(::hbase::pb::CompactionDescriptor)},
  { 70, 78, sizeof(::hbase::pb::FlushDescriptor_StoreFlushDescriptor)},
  { 81, 92, sizeof(::hbase::pb::FlushDescriptor)},
  { 98, 107, sizeof(::hbase::pb::StoreDescriptor)},
  { 111, 120, sizeof(::hbase::pb::BulkLoadDescriptor)},
  { 124, 136, sizeof(::hbase::pb::RegionEventDescriptor)},
  { 143, 148, sizeof(::hbase::pb::WALTrailer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_WALHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_WALKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FamilyScope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_CompactionDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FlushDescriptor_StoreFlushDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_FlushDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_StoreDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_BulkLoadDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_RegionEventDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_WALTrailer_default_instance_),
};

const char descriptor_table_protodef_WAL_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tWAL.proto\022\010hbase.pb\032\013HBase.proto\"\217\001\n\tW"
  "ALHeader\022\027\n\017has_compression\030\001 \001(\010\022\026\n\016enc"
  "ryption_key\030\002 \001(\014\022\033\n\023has_tag_compression"
  "\030\003 \001(\010\022\027\n\017writer_cls_name\030\004 \001(\t\022\033\n\023cell_"
  "codec_cls_name\030\005 \001(\t\"\273\002\n\006WALKey\022\033\n\023encod"
  "ed_region_name\030\001 \002(\014\022\022\n\ntable_name\030\002 \002(\014"
  "\022\033\n\023log_sequence_number\030\003 \002(\004\022\022\n\nwrite_t"
  "ime\030\004 \002(\004\022&\n\ncluster_id\030\005 \001(\0132\016.hbase.pb"
  ".UUIDB\002\030\001\022%\n\006scopes\030\006 \003(\0132\025.hbase.pb.Fam"
  "ilyScope\022\032\n\022following_kv_count\030\007 \001(\r\022#\n\013"
  "cluster_ids\030\010 \003(\0132\016.hbase.pb.UUID\022\022\n\nnon"
  "ceGroup\030\t \001(\004\022\r\n\005nonce\030\n \001(\004\022\034\n\024orig_seq"
  "uence_number\030\013 \001(\004\"F\n\013FamilyScope\022\016\n\006fam"
  "ily\030\001 \002(\014\022\'\n\nscope_type\030\002 \002(\0162\023.hbase.pb"
  ".ScopeType\"\276\001\n\024CompactionDescriptor\022\022\n\nt"
  "able_name\030\001 \002(\014\022\033\n\023encoded_region_name\030\002"
  " \002(\014\022\023\n\013family_name\030\003 \002(\014\022\030\n\020compaction_"
  "input\030\004 \003(\t\022\031\n\021compaction_output\030\005 \003(\t\022\026"
  "\n\016store_home_dir\030\006 \002(\t\022\023\n\013region_name\030\007 "
  "\001(\014\"\244\003\n\017FlushDescriptor\0225\n\006action\030\001 \002(\0162"
  "%.hbase.pb.FlushDescriptor.FlushAction\022\022"
  "\n\ntable_name\030\002 \002(\014\022\033\n\023encoded_region_nam"
  "e\030\003 \002(\014\022\035\n\025flush_sequence_number\030\004 \001(\004\022E"
  "\n\rstore_flushes\030\005 \003(\0132..hbase.pb.FlushDe"
  "scriptor.StoreFlushDescriptor\022\023\n\013region_"
  "name\030\006 \001(\014\032Y\n\024StoreFlushDescriptor\022\023\n\013fa"
  "mily_name\030\001 \002(\014\022\026\n\016store_home_dir\030\002 \002(\t\022"
  "\024\n\014flush_output\030\003 \003(\t\"S\n\013FlushAction\022\017\n\013"
  "START_FLUSH\020\000\022\020\n\014COMMIT_FLUSH\020\001\022\017\n\013ABORT"
  "_FLUSH\020\002\022\020\n\014CANNOT_FLUSH\020\003\"q\n\017StoreDescr"
  "iptor\022\023\n\013family_name\030\001 \002(\014\022\026\n\016store_home"
  "_dir\030\002 \002(\t\022\022\n\nstore_file\030\003 \003(\t\022\035\n\025store_"
  "file_size_bytes\030\004 \001(\004\"\237\001\n\022BulkLoadDescri"
  "ptor\022\'\n\ntable_name\030\001 \002(\0132\023.hbase.pb.Tabl"
  "eName\022\033\n\023encoded_region_name\030\002 \002(\014\022)\n\006st"
  "ores\030\003 \003(\0132\031.hbase.pb.StoreDescriptor\022\030\n"
  "\020bulkload_seq_num\030\004 \002(\003\"\272\002\n\025RegionEventD"
  "escriptor\022=\n\nevent_type\030\001 \002(\0162).hbase.pb"
  ".RegionEventDescriptor.EventType\022\022\n\ntabl"
  "e_name\030\002 \002(\014\022\033\n\023encoded_region_name\030\003 \002("
  "\014\022\033\n\023log_sequence_number\030\004 \001(\004\022)\n\006stores"
  "\030\005 \003(\0132\031.hbase.pb.StoreDescriptor\022$\n\006ser"
  "ver\030\006 \001(\0132\024.hbase.pb.ServerName\022\023\n\013regio"
  "n_name\030\007 \001(\014\".\n\tEventType\022\017\n\013REGION_OPEN"
  "\020\000\022\020\n\014REGION_CLOSE\020\001\"\014\n\nWALTrailer*F\n\tSc"
  "opeType\022\033\n\027REPLICATION_SCOPE_LOCAL\020\000\022\034\n\030"
  "REPLICATION_SCOPE_GLOBAL\020\001B\?\n*org.apache"
  ".hadoop.hbase.protobuf.generatedB\tWALPro"
  "tosH\001\210\001\000\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_WAL_2eproto_deps[1] = {
  &::descriptor_table_HBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_WAL_2eproto_sccs[10] = {
  &scc_info_BulkLoadDescriptor_WAL_2eproto.base,
  &scc_info_CompactionDescriptor_WAL_2eproto.base,
  &scc_info_FamilyScope_WAL_2eproto.base,
  &scc_info_FlushDescriptor_WAL_2eproto.base,
  &scc_info_FlushDescriptor_StoreFlushDescriptor_WAL_2eproto.base,
  &scc_info_RegionEventDescriptor_WAL_2eproto.base,
  &scc_info_StoreDescriptor_WAL_2eproto.base,
  &scc_info_WALHeader_WAL_2eproto.base,
  &scc_info_WALKey_WAL_2eproto.base,
  &scc_info_WALTrailer_WAL_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_WAL_2eproto_once;
static bool descriptor_table_WAL_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WAL_2eproto = {
  &descriptor_table_WAL_2eproto_initialized, descriptor_table_protodef_WAL_2eproto, "WAL.proto", 1931,
  &descriptor_table_WAL_2eproto_once, descriptor_table_WAL_2eproto_sccs, descriptor_table_WAL_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_WAL_2eproto::offsets,
  file_level_metadata_WAL_2eproto, 10, file_level_enum_descriptors_WAL_2eproto, file_level_service_descriptors_WAL_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_WAL_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_WAL_2eproto), true);
namespace hbase {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlushDescriptor_FlushAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WAL_2eproto);
  return file_level_enum_descriptors_WAL_2eproto[0];
}
bool FlushDescriptor_FlushAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FlushDescriptor_FlushAction FlushDescriptor::START_FLUSH;
constexpr FlushDescriptor_FlushAction FlushDescriptor::COMMIT_FLUSH;
constexpr FlushDescriptor_FlushAction FlushDescriptor::ABORT_FLUSH;
constexpr FlushDescriptor_FlushAction FlushDescriptor::CANNOT_FLUSH;
constexpr FlushDescriptor_FlushAction FlushDescriptor::FlushAction_MIN;
constexpr FlushDescriptor_FlushAction FlushDescriptor::FlushAction_MAX;
constexpr int FlushDescriptor::FlushAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionEventDescriptor_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WAL_2eproto);
  return file_level_enum_descriptors_WAL_2eproto[1];
}
bool RegionEventDescriptor_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegionEventDescriptor_EventType RegionEventDescriptor::REGION_OPEN;
constexpr RegionEventDescriptor_EventType RegionEventDescriptor::REGION_CLOSE;
constexpr RegionEventDescriptor_EventType RegionEventDescriptor::EventType_MIN;
constexpr RegionEventDescriptor_EventType RegionEventDescriptor::EventType_MAX;
constexpr int RegionEventDescriptor::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScopeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_WAL_2eproto);
  return file_level_enum_descriptors_WAL_2eproto[2];
}
bool ScopeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void WALHeader::InitAsDefaultInstance() {
}
class WALHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<WALHeader>()._has_bits_);
  static void set_has_has_compression(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_tag_compression(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_writer_cls_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cell_codec_cls_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WALHeader::WALHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.WALHeader)
}
WALHeader::WALHeader(const WALHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_key()) {
    encryption_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
  }
  writer_cls_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_writer_cls_name()) {
    writer_cls_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.writer_cls_name_);
  }
  cell_codec_cls_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cell_codec_cls_name()) {
    cell_codec_cls_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cell_codec_cls_name_);
  }
  ::memcpy(&has_compression_, &from.has_compression_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_tag_compression_) -
    reinterpret_cast<char*>(&has_compression_)) + sizeof(has_tag_compression_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.WALHeader)
}

void WALHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WALHeader_WAL_2eproto.base);
  encryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  writer_cls_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_codec_cls_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&has_compression_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_tag_compression_) -
      reinterpret_cast<char*>(&has_compression_)) + sizeof(has_tag_compression_));
}

WALHeader::~WALHeader() {
  // @@protoc_insertion_point(destructor:hbase.pb.WALHeader)
  SharedDtor();
}

void WALHeader::SharedDtor() {
  encryption_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  writer_cls_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_codec_cls_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WALHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WALHeader& WALHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WALHeader_WAL_2eproto.base);
  return *internal_default_instance();
}


void WALHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.WALHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      encryption_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      writer_cls_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      cell_codec_cls_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&has_compression_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_tag_compression_) -
      reinterpret_cast<char*>(&has_compression_)) + sizeof(has_tag_compression_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WALHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_compression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_compression(&has_bits);
          has_compression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes encryption_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encryption_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_tag_compression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_has_tag_compression(&has_bits);
          has_tag_compression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string writer_cls_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_writer_cls_name(), ptr, ctx, "hbase.pb.WALHeader.writer_cls_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cell_codec_cls_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cell_codec_cls_name(), ptr, ctx, "hbase.pb.WALHeader.cell_codec_cls_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WALHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.WALHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_compression = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_has_compression(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_compression_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encryption_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_tag_compression = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_has_tag_compression(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_tag_compression_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string writer_cls_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_writer_cls_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->writer_cls_name().data(), static_cast<int>(this->writer_cls_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.WALHeader.writer_cls_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cell_codec_cls_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cell_codec_cls_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cell_codec_cls_name().data(), static_cast<int>(this->cell_codec_cls_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.WALHeader.cell_codec_cls_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.WALHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.WALHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WALHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.WALHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_compression = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->has_compression(), output);
  }

  // optional bytes encryption_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->encryption_key(), output);
  }

  // optional bool has_tag_compression = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->has_tag_compression(), output);
  }

  // optional string writer_cls_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->writer_cls_name().data(), static_cast<int>(this->writer_cls_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.WALHeader.writer_cls_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->writer_cls_name(), output);
  }

  // optional string cell_codec_cls_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_codec_cls_name().data(), static_cast<int>(this->cell_codec_cls_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.WALHeader.cell_codec_cls_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cell_codec_cls_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.WALHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* WALHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.WALHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_compression = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->has_compression(), target);
  }

  // optional bytes encryption_key = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->encryption_key(), target);
  }

  // optional bool has_tag_compression = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->has_tag_compression(), target);
  }

  // optional string writer_cls_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->writer_cls_name().data(), static_cast<int>(this->writer_cls_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.WALHeader.writer_cls_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->writer_cls_name(), target);
  }

  // optional string cell_codec_cls_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_codec_cls_name().data(), static_cast<int>(this->cell_codec_cls_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.WALHeader.cell_codec_cls_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->cell_codec_cls_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.WALHeader)
  return target;
}

size_t WALHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.WALHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes encryption_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->encryption_key());
    }

    // optional string writer_cls_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->writer_cls_name());
    }

    // optional string cell_codec_cls_name = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cell_codec_cls_name());
    }

    // optional bool has_compression = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool has_tag_compression = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WALHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.WALHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const WALHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WALHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.WALHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.WALHeader)
    MergeFrom(*source);
  }
}

void WALHeader::MergeFrom(const WALHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.WALHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encryption_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      writer_cls_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.writer_cls_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      cell_codec_cls_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cell_codec_cls_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      has_compression_ = from.has_compression_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_tag_compression_ = from.has_tag_compression_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WALHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.WALHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WALHeader::CopyFrom(const WALHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.WALHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALHeader::IsInitialized() const {
  return true;
}

void WALHeader::InternalSwap(WALHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encryption_key_.Swap(&other->encryption_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  writer_cls_name_.Swap(&other->writer_cls_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cell_codec_cls_name_.Swap(&other->cell_codec_cls_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(has_compression_, other->has_compression_);
  swap(has_tag_compression_, other->has_tag_compression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WALHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WALKey::InitAsDefaultInstance() {
  ::hbase::pb::_WALKey_default_instance_._instance.get_mutable()->cluster_id_ = const_cast< ::hbase::pb::UUID*>(
      ::hbase::pb::UUID::internal_default_instance());
}
class WALKey::_Internal {
 public:
  using HasBits = decltype(std::declval<WALKey>()._has_bits_);
  static void set_has_encoded_region_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_log_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_write_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hbase::pb::UUID& cluster_id(const WALKey* msg);
  static void set_has_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_following_kv_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_noncegroup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_orig_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hbase::pb::UUID&
WALKey::_Internal::cluster_id(const WALKey* msg) {
  return *msg->cluster_id_;
}
void WALKey::clear_cluster_id() {
  if (cluster_id_ != nullptr) cluster_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void WALKey::clear_cluster_ids() {
  cluster_ids_.Clear();
}
WALKey::WALKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.WALKey)
}
WALKey::WALKey(const WALKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      scopes_(from.scopes_),
      cluster_ids_(from.cluster_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encoded_region_name()) {
    encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
  }
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_cluster_id()) {
    cluster_id_ = new ::hbase::pb::UUID(*from.cluster_id_);
  } else {
    cluster_id_ = nullptr;
  }
  ::memcpy(&log_sequence_number_, &from.log_sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&following_kv_count_) -
    reinterpret_cast<char*>(&log_sequence_number_)) + sizeof(following_kv_count_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.WALKey)
}

void WALKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WALKey_WAL_2eproto.base);
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&following_kv_count_) -
      reinterpret_cast<char*>(&cluster_id_)) + sizeof(following_kv_count_));
}

WALKey::~WALKey() {
  // @@protoc_insertion_point(destructor:hbase.pb.WALKey)
  SharedDtor();
}

void WALKey::SharedDtor() {
  encoded_region_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cluster_id_;
}

void WALKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WALKey& WALKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WALKey_WAL_2eproto.base);
  return *internal_default_instance();
}


void WALKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.WALKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  cluster_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      encoded_region_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cluster_id_ != nullptr);
      cluster_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&log_sequence_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orig_sequence_number_) -
        reinterpret_cast<char*>(&log_sequence_number_)) + sizeof(orig_sequence_number_));
  }
  following_kv_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WALKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes encoded_region_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encoded_region_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_table_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 log_sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_log_sequence_number(&has_bits);
          log_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 write_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_write_time(&has_bits);
          write_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.UUID cluster_id = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cluster_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.FamilyScope scopes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_scopes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional uint32 following_kv_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_following_kv_count(&has_bits);
          following_kv_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.UUID cluster_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cluster_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional uint64 nonceGroup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_noncegroup(&has_bits);
          noncegroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nonce = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_nonce(&has_bits);
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 orig_sequence_number = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_orig_sequence_number(&has_bits);
          orig_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WALKey::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.WALKey)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes encoded_region_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes table_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 log_sequence_number = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_log_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 write_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_write_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.UUID cluster_id = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.FamilyScope scopes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_scopes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 following_kv_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_following_kv_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &following_kv_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.UUID cluster_ids = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cluster_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nonceGroup = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_noncegroup(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &noncegroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nonce = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_nonce(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 orig_sequence_number = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_orig_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orig_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.WALKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.WALKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WALKey::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.WALKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes encoded_region_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->encoded_region_name(), output);
  }

  // required bytes table_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->table_name(), output);
  }

  // required uint64 log_sequence_number = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->log_sequence_number(), output);
  }

  // required uint64 write_time = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->write_time(), output);
  }

  // optional .hbase.pb.UUID cluster_id = 5 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::cluster_id(this), output);
  }

  // repeated .hbase.pb.FamilyScope scopes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scopes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->scopes(static_cast<int>(i)),
      output);
  }

  // optional uint32 following_kv_count = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->following_kv_count(), output);
  }

  // repeated .hbase.pb.UUID cluster_ids = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_ids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->cluster_ids(static_cast<int>(i)),
      output);
  }

  // optional uint64 nonceGroup = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->noncegroup(), output);
  }

  // optional uint64 nonce = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->nonce(), output);
  }

  // optional uint64 orig_sequence_number = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->orig_sequence_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.WALKey)
}

::PROTOBUF_NAMESPACE_ID::uint8* WALKey::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.WALKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes encoded_region_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->encoded_region_name(), target);
  }

  // required bytes table_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->table_name(), target);
  }

  // required uint64 log_sequence_number = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->log_sequence_number(), target);
  }

  // required uint64 write_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->write_time(), target);
  }

  // optional .hbase.pb.UUID cluster_id = 5 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::cluster_id(this), target);
  }

  // repeated .hbase.pb.FamilyScope scopes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scopes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->scopes(static_cast<int>(i)), target);
  }

  // optional uint32 following_kv_count = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->following_kv_count(), target);
  }

  // repeated .hbase.pb.UUID cluster_ids = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_ids_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->cluster_ids(static_cast<int>(i)), target);
  }

  // optional uint64 nonceGroup = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->noncegroup(), target);
  }

  // optional uint64 nonce = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->nonce(), target);
  }

  // optional uint64 orig_sequence_number = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->orig_sequence_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.WALKey)
  return target;
}

size_t WALKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.WALKey)
  size_t total_size = 0;

  if (has_encoded_region_name()) {
    // required bytes encoded_region_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());
  }

  if (has_table_name()) {
    // required bytes table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->table_name());
  }

  if (has_log_sequence_number()) {
    // required uint64 log_sequence_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->log_sequence_number());
  }

  if (has_write_time()) {
    // required uint64 write_time = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->write_time());
  }

  return total_size;
}
size_t WALKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.WALKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required bytes encoded_region_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());

    // required bytes table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->table_name());

    // required uint64 log_sequence_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->log_sequence_number());

    // required uint64 write_time = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->write_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.FamilyScope scopes = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->scopes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->scopes(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.UUID cluster_ids = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->cluster_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cluster_ids(static_cast<int>(i)));
    }
  }

  // optional .hbase.pb.UUID cluster_id = 5 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cluster_id_);
  }

  if (cached_has_bits & 0x000000e0u) {
    // optional uint64 nonceGroup = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->noncegroup());
    }

    // optional uint64 nonce = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

    // optional uint64 orig_sequence_number = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->orig_sequence_number());
    }

  }
  // optional uint32 following_kv_count = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->following_kv_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WALKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.WALKey)
  GOOGLE_DCHECK_NE(&from, this);
  const WALKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WALKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.WALKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.WALKey)
    MergeFrom(*source);
  }
}

void WALKey::MergeFrom(const WALKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.WALKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  cluster_ids_.MergeFrom(from.cluster_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cluster_id()->::hbase::pb::UUID::MergeFrom(from.cluster_id());
    }
    if (cached_has_bits & 0x00000008u) {
      log_sequence_number_ = from.log_sequence_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      write_time_ = from.write_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      noncegroup_ = from.noncegroup_;
    }
    if (cached_has_bits & 0x00000040u) {
      nonce_ = from.nonce_;
    }
    if (cached_has_bits & 0x00000080u) {
      orig_sequence_number_ = from.orig_sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_following_kv_count(from.following_kv_count());
  }
}

void WALKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.WALKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WALKey::CopyFrom(const WALKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.WALKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->scopes())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->cluster_ids())) return false;
  if (has_cluster_id()) {
    if (!this->cluster_id_->IsInitialized()) return false;
  }
  return true;
}

void WALKey::InternalSwap(WALKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&scopes_)->InternalSwap(CastToBase(&other->scopes_));
  CastToBase(&cluster_ids_)->InternalSwap(CastToBase(&other->cluster_ids_));
  encoded_region_name_.Swap(&other->encoded_region_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cluster_id_, other->cluster_id_);
  swap(log_sequence_number_, other->log_sequence_number_);
  swap(write_time_, other->write_time_);
  swap(noncegroup_, other->noncegroup_);
  swap(nonce_, other->nonce_);
  swap(orig_sequence_number_, other->orig_sequence_number_);
  swap(following_kv_count_, other->following_kv_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WALKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FamilyScope::InitAsDefaultInstance() {
}
class FamilyScope::_Internal {
 public:
  using HasBits = decltype(std::declval<FamilyScope>()._has_bits_);
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scope_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FamilyScope::FamilyScope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FamilyScope)
}
FamilyScope::FamilyScope(const FamilyScope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family()) {
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  scope_type_ = from.scope_type_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FamilyScope)
}

void FamilyScope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FamilyScope_WAL_2eproto.base);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_type_ = 0;
}

FamilyScope::~FamilyScope() {
  // @@protoc_insertion_point(destructor:hbase.pb.FamilyScope)
  SharedDtor();
}

void FamilyScope::SharedDtor() {
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FamilyScope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FamilyScope& FamilyScope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FamilyScope_WAL_2eproto.base);
  return *internal_default_instance();
}


void FamilyScope::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FamilyScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    family_.ClearNonDefaultToEmptyNoArena();
  }
  scope_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FamilyScope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.ScopeType scope_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::ScopeType_IsValid(val))) {
            set_scope_type(static_cast<::hbase::pb::ScopeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FamilyScope::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FamilyScope)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.ScopeType scope_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::ScopeType_IsValid(value)) {
            set_scope_type(static_cast< ::hbase::pb::ScopeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FamilyScope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FamilyScope)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FamilyScope::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FamilyScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->family(), output);
  }

  // required .hbase.pb.ScopeType scope_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->scope_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FamilyScope)
}

::PROTOBUF_NAMESPACE_ID::uint8* FamilyScope::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FamilyScope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->family(), target);
  }

  // required .hbase.pb.ScopeType scope_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->scope_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FamilyScope)
  return target;
}

size_t FamilyScope::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.FamilyScope)
  size_t total_size = 0;

  if (has_family()) {
    // required bytes family = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());
  }

  if (has_scope_type()) {
    // required .hbase.pb.ScopeType scope_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->scope_type());
  }

  return total_size;
}
size_t FamilyScope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FamilyScope)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes family = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family());

    // required .hbase.pb.ScopeType scope_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->scope_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FamilyScope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FamilyScope)
  GOOGLE_DCHECK_NE(&from, this);
  const FamilyScope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FamilyScope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FamilyScope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FamilyScope)
    MergeFrom(*source);
  }
}

void FamilyScope::MergeFrom(const FamilyScope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FamilyScope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
    }
    if (cached_has_bits & 0x00000002u) {
      scope_type_ = from.scope_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FamilyScope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FamilyScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FamilyScope::CopyFrom(const FamilyScope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FamilyScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FamilyScope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FamilyScope::InternalSwap(FamilyScope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scope_type_, other->scope_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FamilyScope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompactionDescriptor::InitAsDefaultInstance() {
}
class CompactionDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<CompactionDescriptor>()._has_bits_);
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encoded_region_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_family_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_store_home_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_region_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CompactionDescriptor::CompactionDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.CompactionDescriptor)
}
CompactionDescriptor::CompactionDescriptor(const CompactionDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      compaction_input_(from.compaction_input_),
      compaction_output_(from.compaction_output_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encoded_region_name()) {
    encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
  }
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family_name()) {
    family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
  store_home_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_home_dir()) {
    store_home_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_home_dir_);
  }
  region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_region_name()) {
    region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_name_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.CompactionDescriptor)
}

void CompactionDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompactionDescriptor_WAL_2eproto.base);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_home_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompactionDescriptor::~CompactionDescriptor() {
  // @@protoc_insertion_point(destructor:hbase.pb.CompactionDescriptor)
  SharedDtor();
}

void CompactionDescriptor::SharedDtor() {
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoded_region_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  family_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_home_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompactionDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactionDescriptor& CompactionDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompactionDescriptor_WAL_2eproto.base);
  return *internal_default_instance();
}


void CompactionDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.CompactionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compaction_input_.Clear();
  compaction_output_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      encoded_region_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      family_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      store_home_dir_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      region_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompactionDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_table_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes encoded_region_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encoded_region_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes family_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string compaction_input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_compaction_input(), ptr, ctx, "hbase.pb.CompactionDescriptor.compaction_input");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated string compaction_output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_compaction_output(), ptr, ctx, "hbase.pb.CompactionDescriptor.compaction_output");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // required string store_home_dir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_store_home_dir(), ptr, ctx, "hbase.pb.CompactionDescriptor.store_home_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes region_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_region_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompactionDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.CompactionDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes encoded_region_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes family_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string compaction_input = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_compaction_input()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compaction_input(this->compaction_input_size() - 1).data(),
            static_cast<int>(this->compaction_input(this->compaction_input_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.CompactionDescriptor.compaction_input");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string compaction_output = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_compaction_output()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compaction_output(this->compaction_output_size() - 1).data(),
            static_cast<int>(this->compaction_output(this->compaction_output_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.CompactionDescriptor.compaction_output");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string store_home_dir = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_store_home_dir()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->store_home_dir().data(), static_cast<int>(this->store_home_dir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.CompactionDescriptor.store_home_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes region_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.CompactionDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.CompactionDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompactionDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.CompactionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table_name(), output);
  }

  // required bytes encoded_region_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->encoded_region_name(), output);
  }

  // required bytes family_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->family_name(), output);
  }

  // repeated string compaction_input = 4;
  for (int i = 0, n = this->compaction_input_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compaction_input(i).data(), static_cast<int>(this->compaction_input(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CompactionDescriptor.compaction_input");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->compaction_input(i), output);
  }

  // repeated string compaction_output = 5;
  for (int i = 0, n = this->compaction_output_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compaction_output(i).data(), static_cast<int>(this->compaction_output(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CompactionDescriptor.compaction_output");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->compaction_output(i), output);
  }

  // required string store_home_dir = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_home_dir().data(), static_cast<int>(this->store_home_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CompactionDescriptor.store_home_dir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->store_home_dir(), output);
  }

  // optional bytes region_name = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->region_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.CompactionDescriptor)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompactionDescriptor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.CompactionDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // required bytes encoded_region_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_region_name(), target);
  }

  // required bytes family_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->family_name(), target);
  }

  // repeated string compaction_input = 4;
  for (int i = 0, n = this->compaction_input_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compaction_input(i).data(), static_cast<int>(this->compaction_input(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CompactionDescriptor.compaction_input");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->compaction_input(i), target);
  }

  // repeated string compaction_output = 5;
  for (int i = 0, n = this->compaction_output_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compaction_output(i).data(), static_cast<int>(this->compaction_output(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CompactionDescriptor.compaction_output");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->compaction_output(i), target);
  }

  // required string store_home_dir = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_home_dir().data(), static_cast<int>(this->store_home_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.CompactionDescriptor.store_home_dir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->store_home_dir(), target);
  }

  // optional bytes region_name = 7;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->region_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.CompactionDescriptor)
  return target;
}

size_t CompactionDescriptor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.CompactionDescriptor)
  size_t total_size = 0;

  if (has_table_name()) {
    // required bytes table_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->table_name());
  }

  if (has_encoded_region_name()) {
    // required bytes encoded_region_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());
  }

  if (has_family_name()) {
    // required bytes family_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family_name());
  }

  if (has_store_home_dir()) {
    // required string store_home_dir = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->store_home_dir());
  }

  return total_size;
}
size_t CompactionDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.CompactionDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes table_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->table_name());

    // required bytes encoded_region_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());

    // required bytes family_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family_name());

    // required string store_home_dir = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->store_home_dir());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string compaction_input = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->compaction_input_size());
  for (int i = 0, n = this->compaction_input_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->compaction_input(i));
  }

  // repeated string compaction_output = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->compaction_output_size());
  for (int i = 0, n = this->compaction_output_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->compaction_output(i));
  }

  // optional bytes region_name = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->region_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactionDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.CompactionDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactionDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompactionDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.CompactionDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.CompactionDescriptor)
    MergeFrom(*source);
  }
}

void CompactionDescriptor::MergeFrom(const CompactionDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.CompactionDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compaction_input_.MergeFrom(from.compaction_input_);
  compaction_output_.MergeFrom(from.compaction_output_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      store_home_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_home_dir_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_name_);
    }
  }
}

void CompactionDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.CompactionDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionDescriptor::CopyFrom(const CompactionDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.CompactionDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CompactionDescriptor::InternalSwap(CompactionDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  compaction_input_.InternalSwap(CastToBase(&other->compaction_input_));
  compaction_output_.InternalSwap(CastToBase(&other->compaction_output_));
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encoded_region_name_.Swap(&other->encoded_region_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  family_name_.Swap(&other->family_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  store_home_dir_.Swap(&other->store_home_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_name_.Swap(&other->region_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushDescriptor_StoreFlushDescriptor::InitAsDefaultInstance() {
}
class FlushDescriptor_StoreFlushDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FlushDescriptor_StoreFlushDescriptor>()._has_bits_);
  static void set_has_family_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_store_home_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FlushDescriptor_StoreFlushDescriptor::FlushDescriptor_StoreFlushDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
}
FlushDescriptor_StoreFlushDescriptor::FlushDescriptor_StoreFlushDescriptor(const FlushDescriptor_StoreFlushDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      flush_output_(from.flush_output_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family_name()) {
    family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
  store_home_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_home_dir()) {
    store_home_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_home_dir_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
}

void FlushDescriptor_StoreFlushDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushDescriptor_StoreFlushDescriptor_WAL_2eproto.base);
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_home_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FlushDescriptor_StoreFlushDescriptor::~FlushDescriptor_StoreFlushDescriptor() {
  // @@protoc_insertion_point(destructor:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  SharedDtor();
}

void FlushDescriptor_StoreFlushDescriptor::SharedDtor() {
  family_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_home_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlushDescriptor_StoreFlushDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushDescriptor_StoreFlushDescriptor& FlushDescriptor_StoreFlushDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushDescriptor_StoreFlushDescriptor_WAL_2eproto.base);
  return *internal_default_instance();
}


void FlushDescriptor_StoreFlushDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flush_output_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      family_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      store_home_dir_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushDescriptor_StoreFlushDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes family_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string store_home_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_store_home_dir(), ptr, ctx, "hbase.pb.FlushDescriptor.StoreFlushDescriptor.store_home_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string flush_output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_flush_output(), ptr, ctx, "hbase.pb.FlushDescriptor.StoreFlushDescriptor.flush_output");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushDescriptor_StoreFlushDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string store_home_dir = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_store_home_dir()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->store_home_dir().data(), static_cast<int>(this->store_home_dir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.FlushDescriptor.StoreFlushDescriptor.store_home_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string flush_output = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_flush_output()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flush_output(this->flush_output_size() - 1).data(),
            static_cast<int>(this->flush_output(this->flush_output_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.FlushDescriptor.StoreFlushDescriptor.flush_output");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushDescriptor_StoreFlushDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->family_name(), output);
  }

  // required string store_home_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_home_dir().data(), static_cast<int>(this->store_home_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.FlushDescriptor.StoreFlushDescriptor.store_home_dir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->store_home_dir(), output);
  }

  // repeated string flush_output = 3;
  for (int i = 0, n = this->flush_output_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flush_output(i).data(), static_cast<int>(this->flush_output(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.FlushDescriptor.StoreFlushDescriptor.flush_output");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->flush_output(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushDescriptor_StoreFlushDescriptor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->family_name(), target);
  }

  // required string store_home_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_home_dir().data(), static_cast<int>(this->store_home_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.FlushDescriptor.StoreFlushDescriptor.store_home_dir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->store_home_dir(), target);
  }

  // repeated string flush_output = 3;
  for (int i = 0, n = this->flush_output_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flush_output(i).data(), static_cast<int>(this->flush_output(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.FlushDescriptor.StoreFlushDescriptor.flush_output");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->flush_output(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  return target;
}

size_t FlushDescriptor_StoreFlushDescriptor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  size_t total_size = 0;

  if (has_family_name()) {
    // required bytes family_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family_name());
  }

  if (has_store_home_dir()) {
    // required string store_home_dir = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->store_home_dir());
  }

  return total_size;
}
size_t FlushDescriptor_StoreFlushDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes family_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family_name());

    // required string store_home_dir = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->store_home_dir());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string flush_output = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->flush_output_size());
  for (int i = 0, n = this->flush_output_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->flush_output(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushDescriptor_StoreFlushDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushDescriptor_StoreFlushDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushDescriptor_StoreFlushDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
    MergeFrom(*source);
  }
}

void FlushDescriptor_StoreFlushDescriptor::MergeFrom(const FlushDescriptor_StoreFlushDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flush_output_.MergeFrom(from.flush_output_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      store_home_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_home_dir_);
    }
  }
}

void FlushDescriptor_StoreFlushDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushDescriptor_StoreFlushDescriptor::CopyFrom(const FlushDescriptor_StoreFlushDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FlushDescriptor.StoreFlushDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDescriptor_StoreFlushDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FlushDescriptor_StoreFlushDescriptor::InternalSwap(FlushDescriptor_StoreFlushDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  flush_output_.InternalSwap(CastToBase(&other->flush_output_));
  family_name_.Swap(&other->family_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  store_home_dir_.Swap(&other->store_home_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushDescriptor_StoreFlushDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlushDescriptor::InitAsDefaultInstance() {
}
class FlushDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<FlushDescriptor>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encoded_region_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flush_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_region_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FlushDescriptor::FlushDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.FlushDescriptor)
}
FlushDescriptor::FlushDescriptor(const FlushDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      store_flushes_(from.store_flushes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encoded_region_name()) {
    encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
  }
  region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_region_name()) {
    region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_name_);
  }
  ::memcpy(&flush_sequence_number_, &from.flush_sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&flush_sequence_number_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.FlushDescriptor)
}

void FlushDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlushDescriptor_WAL_2eproto.base);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flush_sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&flush_sequence_number_)) + sizeof(action_));
}

FlushDescriptor::~FlushDescriptor() {
  // @@protoc_insertion_point(destructor:hbase.pb.FlushDescriptor)
  SharedDtor();
}

void FlushDescriptor::SharedDtor() {
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoded_region_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlushDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushDescriptor& FlushDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushDescriptor_WAL_2eproto.base);
  return *internal_default_instance();
}


void FlushDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.FlushDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_flushes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      encoded_region_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      region_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&flush_sequence_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&flush_sequence_number_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlushDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::FlushDescriptor_FlushAction_IsValid(val))) {
            set_action(static_cast<::hbase::pb::FlushDescriptor_FlushAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_table_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes encoded_region_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encoded_region_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 flush_sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_flush_sequence_number(&has_bits);
          flush_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.FlushDescriptor.StoreFlushDescriptor store_flushes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_store_flushes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional bytes region_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_region_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlushDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.FlushDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::FlushDescriptor_FlushAction_IsValid(value)) {
            set_action(static_cast< ::hbase::pb::FlushDescriptor_FlushAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes table_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes encoded_region_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 flush_sequence_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_flush_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.FlushDescriptor.StoreFlushDescriptor store_flushes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_store_flushes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes region_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.FlushDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.FlushDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlushDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.FlushDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required bytes table_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->table_name(), output);
  }

  // required bytes encoded_region_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encoded_region_name(), output);
  }

  // optional uint64 flush_sequence_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->flush_sequence_number(), output);
  }

  // repeated .hbase.pb.FlushDescriptor.StoreFlushDescriptor store_flushes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_flushes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->store_flushes(static_cast<int>(i)),
      output);
  }

  // optional bytes region_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->region_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.FlushDescriptor)
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushDescriptor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.FlushDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // required bytes table_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->table_name(), target);
  }

  // required bytes encoded_region_name = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->encoded_region_name(), target);
  }

  // optional uint64 flush_sequence_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->flush_sequence_number(), target);
  }

  // repeated .hbase.pb.FlushDescriptor.StoreFlushDescriptor store_flushes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_flushes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->store_flushes(static_cast<int>(i)), target);
  }

  // optional bytes region_name = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->region_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.FlushDescriptor)
  return target;
}

size_t FlushDescriptor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.FlushDescriptor)
  size_t total_size = 0;

  if (has_table_name()) {
    // required bytes table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->table_name());
  }

  if (has_encoded_region_name()) {
    // required bytes encoded_region_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());
  }

  if (has_action()) {
    // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  return total_size;
}
size_t FlushDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.FlushDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required bytes table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->table_name());

    // required bytes encoded_region_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());

    // required .hbase.pb.FlushDescriptor.FlushAction action = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.FlushDescriptor.StoreFlushDescriptor store_flushes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->store_flushes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->store_flushes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional bytes region_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->region_name());
    }

    // optional uint64 flush_sequence_number = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->flush_sequence_number());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.FlushDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FlushDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlushDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.FlushDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.FlushDescriptor)
    MergeFrom(*source);
  }
}

void FlushDescriptor::MergeFrom(const FlushDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.FlushDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_flushes_.MergeFrom(from.store_flushes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      flush_sequence_number_ = from.flush_sequence_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlushDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.FlushDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushDescriptor::CopyFrom(const FlushDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.FlushDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->store_flushes())) return false;
  return true;
}

void FlushDescriptor::InternalSwap(FlushDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&store_flushes_)->InternalSwap(CastToBase(&other->store_flushes_));
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encoded_region_name_.Swap(&other->encoded_region_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_name_.Swap(&other->region_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flush_sequence_number_, other->flush_sequence_number_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreDescriptor::InitAsDefaultInstance() {
}
class StoreDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreDescriptor>()._has_bits_);
  static void set_has_family_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_store_home_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_store_file_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StoreDescriptor::StoreDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.StoreDescriptor)
}
StoreDescriptor::StoreDescriptor(const StoreDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      store_file_(from.store_file_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_family_name()) {
    family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
  }
  store_home_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_home_dir()) {
    store_home_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_home_dir_);
  }
  store_file_size_bytes_ = from.store_file_size_bytes_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.StoreDescriptor)
}

void StoreDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreDescriptor_WAL_2eproto.base);
  family_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_home_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_file_size_bytes_ = PROTOBUF_ULONGLONG(0);
}

StoreDescriptor::~StoreDescriptor() {
  // @@protoc_insertion_point(destructor:hbase.pb.StoreDescriptor)
  SharedDtor();
}

void StoreDescriptor::SharedDtor() {
  family_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_home_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StoreDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreDescriptor& StoreDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreDescriptor_WAL_2eproto.base);
  return *internal_default_instance();
}


void StoreDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.StoreDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  store_file_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      family_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      store_home_dir_.ClearNonDefaultToEmptyNoArena();
    }
  }
  store_file_size_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes family_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_family_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string store_home_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_store_home_dir(), ptr, ctx, "hbase.pb.StoreDescriptor.store_home_dir");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string store_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_store_file(), ptr, ctx, "hbase.pb.StoreDescriptor.store_file");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional uint64 store_file_size_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_store_file_size_bytes(&has_bits);
          store_file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.StoreDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes family_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_family_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string store_home_dir = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_store_home_dir()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->store_home_dir().data(), static_cast<int>(this->store_home_dir().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.StoreDescriptor.store_home_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string store_file = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_store_file()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->store_file(this->store_file_size() - 1).data(),
            static_cast<int>(this->store_file(this->store_file_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.StoreDescriptor.store_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 store_file_size_bytes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_store_file_size_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_file_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.StoreDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.StoreDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.StoreDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->family_name(), output);
  }

  // required string store_home_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_home_dir().data(), static_cast<int>(this->store_home_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.StoreDescriptor.store_home_dir");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->store_home_dir(), output);
  }

  // repeated string store_file = 3;
  for (int i = 0, n = this->store_file_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_file(i).data(), static_cast<int>(this->store_file(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.StoreDescriptor.store_file");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->store_file(i), output);
  }

  // optional uint64 store_file_size_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->store_file_size_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.StoreDescriptor)
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreDescriptor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.StoreDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes family_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->family_name(), target);
  }

  // required string store_home_dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_home_dir().data(), static_cast<int>(this->store_home_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.StoreDescriptor.store_home_dir");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->store_home_dir(), target);
  }

  // repeated string store_file = 3;
  for (int i = 0, n = this->store_file_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_file(i).data(), static_cast<int>(this->store_file(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.StoreDescriptor.store_file");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->store_file(i), target);
  }

  // optional uint64 store_file_size_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->store_file_size_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.StoreDescriptor)
  return target;
}

size_t StoreDescriptor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.StoreDescriptor)
  size_t total_size = 0;

  if (has_family_name()) {
    // required bytes family_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family_name());
  }

  if (has_store_home_dir()) {
    // required string store_home_dir = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->store_home_dir());
  }

  return total_size;
}
size_t StoreDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.StoreDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes family_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->family_name());

    // required string store_home_dir = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->store_home_dir());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string store_file = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->store_file_size());
  for (int i = 0, n = this->store_file_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->store_file(i));
  }

  // optional uint64 store_file_size_bytes = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->store_file_size_bytes());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.StoreDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.StoreDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.StoreDescriptor)
    MergeFrom(*source);
  }
}

void StoreDescriptor::MergeFrom(const StoreDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.StoreDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_file_.MergeFrom(from.store_file_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      family_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      store_home_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_home_dir_);
    }
    if (cached_has_bits & 0x00000004u) {
      store_file_size_bytes_ = from.store_file_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoreDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.StoreDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreDescriptor::CopyFrom(const StoreDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.StoreDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StoreDescriptor::InternalSwap(StoreDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  store_file_.InternalSwap(CastToBase(&other->store_file_));
  family_name_.Swap(&other->family_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  store_home_dir_.Swap(&other->store_home_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(store_file_size_bytes_, other->store_file_size_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkLoadDescriptor::InitAsDefaultInstance() {
  ::hbase::pb::_BulkLoadDescriptor_default_instance_._instance.get_mutable()->table_name_ = const_cast< ::hbase::pb::TableName*>(
      ::hbase::pb::TableName::internal_default_instance());
}
class BulkLoadDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkLoadDescriptor>()._has_bits_);
  static const ::hbase::pb::TableName& table_name(const BulkLoadDescriptor* msg);
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encoded_region_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bulkload_seq_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::TableName&
BulkLoadDescriptor::_Internal::table_name(const BulkLoadDescriptor* msg) {
  return *msg->table_name_;
}
void BulkLoadDescriptor::clear_table_name() {
  if (table_name_ != nullptr) table_name_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
BulkLoadDescriptor::BulkLoadDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.BulkLoadDescriptor)
}
BulkLoadDescriptor::BulkLoadDescriptor(const BulkLoadDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stores_(from.stores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encoded_region_name()) {
    encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
  }
  if (from.has_table_name()) {
    table_name_ = new ::hbase::pb::TableName(*from.table_name_);
  } else {
    table_name_ = nullptr;
  }
  bulkload_seq_num_ = from.bulkload_seq_num_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.BulkLoadDescriptor)
}

void BulkLoadDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkLoadDescriptor_WAL_2eproto.base);
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&table_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bulkload_seq_num_) -
      reinterpret_cast<char*>(&table_name_)) + sizeof(bulkload_seq_num_));
}

BulkLoadDescriptor::~BulkLoadDescriptor() {
  // @@protoc_insertion_point(destructor:hbase.pb.BulkLoadDescriptor)
  SharedDtor();
}

void BulkLoadDescriptor::SharedDtor() {
  encoded_region_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete table_name_;
}

void BulkLoadDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkLoadDescriptor& BulkLoadDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkLoadDescriptor_WAL_2eproto.base);
  return *internal_default_instance();
}


void BulkLoadDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.BulkLoadDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stores_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      encoded_region_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_name_ != nullptr);
      table_name_->Clear();
    }
  }
  bulkload_seq_num_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BulkLoadDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.TableName table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_table_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes encoded_region_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encoded_region_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.StoreDescriptor stores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // required int64 bulkload_seq_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bulkload_seq_num(&has_bits);
          bulkload_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulkLoadDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.BulkLoadDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.TableName table_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes encoded_region_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.StoreDescriptor stores = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bulkload_seq_num = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_bulkload_seq_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bulkload_seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.BulkLoadDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.BulkLoadDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BulkLoadDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.BulkLoadDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.TableName table_name = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::table_name(this), output);
  }

  // required bytes encoded_region_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->encoded_region_name(), output);
  }

  // repeated .hbase.pb.StoreDescriptor stores = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stores_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->stores(static_cast<int>(i)),
      output);
  }

  // required int64 bulkload_seq_num = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->bulkload_seq_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.BulkLoadDescriptor)
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkLoadDescriptor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.BulkLoadDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.TableName table_name = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::table_name(this), target);
  }

  // required bytes encoded_region_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_region_name(), target);
  }

  // repeated .hbase.pb.StoreDescriptor stores = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stores_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->stores(static_cast<int>(i)), target);
  }

  // required int64 bulkload_seq_num = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->bulkload_seq_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.BulkLoadDescriptor)
  return target;
}

size_t BulkLoadDescriptor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.BulkLoadDescriptor)
  size_t total_size = 0;

  if (has_encoded_region_name()) {
    // required bytes encoded_region_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());
  }

  if (has_table_name()) {
    // required .hbase.pb.TableName table_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_name_);
  }

  if (has_bulkload_seq_num()) {
    // required int64 bulkload_seq_num = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bulkload_seq_num());
  }

  return total_size;
}
size_t BulkLoadDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.BulkLoadDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes encoded_region_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());

    // required .hbase.pb.TableName table_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_name_);

    // required int64 bulkload_seq_num = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bulkload_seq_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.StoreDescriptor stores = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stores(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkLoadDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.BulkLoadDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkLoadDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkLoadDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.BulkLoadDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.BulkLoadDescriptor)
    MergeFrom(*source);
  }
}

void BulkLoadDescriptor::MergeFrom(const BulkLoadDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.BulkLoadDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stores_.MergeFrom(from.stores_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      bulkload_seq_num_ = from.bulkload_seq_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BulkLoadDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.BulkLoadDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkLoadDescriptor::CopyFrom(const BulkLoadDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.BulkLoadDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkLoadDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->stores())) return false;
  if (has_table_name()) {
    if (!this->table_name_->IsInitialized()) return false;
  }
  return true;
}

void BulkLoadDescriptor::InternalSwap(BulkLoadDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stores_)->InternalSwap(CastToBase(&other->stores_));
  encoded_region_name_.Swap(&other->encoded_region_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(table_name_, other->table_name_);
  swap(bulkload_seq_num_, other->bulkload_seq_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkLoadDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionEventDescriptor::InitAsDefaultInstance() {
  ::hbase::pb::_RegionEventDescriptor_default_instance_._instance.get_mutable()->server_ = const_cast< ::hbase::pb::ServerName*>(
      ::hbase::pb::ServerName::internal_default_instance());
}
class RegionEventDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionEventDescriptor>()._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encoded_region_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_log_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hbase::pb::ServerName& server(const RegionEventDescriptor* msg);
  static void set_has_server(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_region_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::ServerName&
RegionEventDescriptor::_Internal::server(const RegionEventDescriptor* msg) {
  return *msg->server_;
}
void RegionEventDescriptor::clear_server() {
  if (server_ != nullptr) server_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
RegionEventDescriptor::RegionEventDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.RegionEventDescriptor)
}
RegionEventDescriptor::RegionEventDescriptor(const RegionEventDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stores_(from.stores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_encoded_region_name()) {
    encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
  }
  region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_region_name()) {
    region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_name_);
  }
  if (from.has_server()) {
    server_ = new ::hbase::pb::ServerName(*from.server_);
  } else {
    server_ = nullptr;
  }
  ::memcpy(&log_sequence_number_, &from.log_sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&log_sequence_number_)) + sizeof(event_type_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.RegionEventDescriptor)
}

void RegionEventDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionEventDescriptor_WAL_2eproto.base);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoded_region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&server_)) + sizeof(event_type_));
}

RegionEventDescriptor::~RegionEventDescriptor() {
  // @@protoc_insertion_point(destructor:hbase.pb.RegionEventDescriptor)
  SharedDtor();
}

void RegionEventDescriptor::SharedDtor() {
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoded_region_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
}

void RegionEventDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionEventDescriptor& RegionEventDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionEventDescriptor_WAL_2eproto.base);
  return *internal_default_instance();
}


void RegionEventDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.RegionEventDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stores_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      encoded_region_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      region_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(server_ != nullptr);
      server_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&log_sequence_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_type_) -
        reinterpret_cast<char*>(&log_sequence_number_)) + sizeof(event_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionEventDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::RegionEventDescriptor_EventType_IsValid(val))) {
            set_event_type(static_cast<::hbase::pb::RegionEventDescriptor_EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes table_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_table_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes encoded_region_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_encoded_region_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 log_sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_log_sequence_number(&has_bits);
          log_sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.StoreDescriptor stores = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.ServerName server = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes region_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_region_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionEventDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.RegionEventDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::RegionEventDescriptor_EventType_IsValid(value)) {
            set_event_type(static_cast< ::hbase::pb::RegionEventDescriptor_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes table_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes encoded_region_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_region_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 log_sequence_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_log_sequence_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.StoreDescriptor stores = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.ServerName server = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes region_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.RegionEventDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.RegionEventDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionEventDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.RegionEventDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // required bytes table_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->table_name(), output);
  }

  // required bytes encoded_region_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encoded_region_name(), output);
  }

  // optional uint64 log_sequence_number = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->log_sequence_number(), output);
  }

  // repeated .hbase.pb.StoreDescriptor stores = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stores_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->stores(static_cast<int>(i)),
      output);
  }

  // optional .hbase.pb.ServerName server = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::server(this), output);
  }

  // optional bytes region_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->region_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.RegionEventDescriptor)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionEventDescriptor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.RegionEventDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // required bytes table_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->table_name(), target);
  }

  // required bytes encoded_region_name = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->encoded_region_name(), target);
  }

  // optional uint64 log_sequence_number = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_sequence_number(), target);
  }

  // repeated .hbase.pb.StoreDescriptor stores = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stores_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->stores(static_cast<int>(i)), target);
  }

  // optional .hbase.pb.ServerName server = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::server(this), target);
  }

  // optional bytes region_name = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        7, this->region_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.RegionEventDescriptor)
  return target;
}

size_t RegionEventDescriptor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.RegionEventDescriptor)
  size_t total_size = 0;

  if (has_table_name()) {
    // required bytes table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->table_name());
  }

  if (has_encoded_region_name()) {
    // required bytes encoded_region_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());
  }

  if (has_event_type()) {
    // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event_type());
  }

  return total_size;
}
size_t RegionEventDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.RegionEventDescriptor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required bytes table_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->table_name());

    // required bytes encoded_region_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->encoded_region_name());

    // required .hbase.pb.RegionEventDescriptor.EventType event_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->event_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.StoreDescriptor stores = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->stores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stores(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional bytes region_name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->region_name());
    }

    // optional .hbase.pb.ServerName server = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional uint64 log_sequence_number = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->log_sequence_number());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionEventDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.RegionEventDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionEventDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionEventDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.RegionEventDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.RegionEventDescriptor)
    MergeFrom(*source);
  }
}

void RegionEventDescriptor::MergeFrom(const RegionEventDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.RegionEventDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stores_.MergeFrom(from.stores_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      table_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      encoded_region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoded_region_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      region_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_server()->::hbase::pb::ServerName::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000010u) {
      log_sequence_number_ = from.log_sequence_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      event_type_ = from.event_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionEventDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.RegionEventDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionEventDescriptor::CopyFrom(const RegionEventDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.RegionEventDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionEventDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->stores())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void RegionEventDescriptor::InternalSwap(RegionEventDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stores_)->InternalSwap(CastToBase(&other->stores_));
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encoded_region_name_.Swap(&other->encoded_region_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  region_name_.Swap(&other->region_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(log_sequence_number_, other->log_sequence_number_);
  swap(event_type_, other->event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionEventDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WALTrailer::InitAsDefaultInstance() {
}
class WALTrailer::_Internal {
 public:
  using HasBits = decltype(std::declval<WALTrailer>()._has_bits_);
};

WALTrailer::WALTrailer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.WALTrailer)
}
WALTrailer::WALTrailer(const WALTrailer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hbase.pb.WALTrailer)
}

void WALTrailer::SharedCtor() {
}

WALTrailer::~WALTrailer() {
  // @@protoc_insertion_point(destructor:hbase.pb.WALTrailer)
  SharedDtor();
}

void WALTrailer::SharedDtor() {
}

void WALTrailer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WALTrailer& WALTrailer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WALTrailer_WAL_2eproto.base);
  return *internal_default_instance();
}


void WALTrailer::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.WALTrailer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WALTrailer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WALTrailer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.WALTrailer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.WALTrailer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.WALTrailer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WALTrailer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.WALTrailer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.WALTrailer)
}

::PROTOBUF_NAMESPACE_ID::uint8* WALTrailer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.WALTrailer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.WALTrailer)
  return target;
}

size_t WALTrailer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.WALTrailer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WALTrailer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.WALTrailer)
  GOOGLE_DCHECK_NE(&from, this);
  const WALTrailer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WALTrailer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.WALTrailer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.WALTrailer)
    MergeFrom(*source);
  }
}

void WALTrailer::MergeFrom(const WALTrailer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.WALTrailer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WALTrailer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.WALTrailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WALTrailer::CopyFrom(const WALTrailer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.WALTrailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALTrailer::IsInitialized() const {
  return true;
}

void WALTrailer::InternalSwap(WALTrailer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WALTrailer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::WALHeader* Arena::CreateMaybeMessage< ::hbase::pb::WALHeader >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::WALHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::WALKey* Arena::CreateMaybeMessage< ::hbase::pb::WALKey >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::WALKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FamilyScope* Arena::CreateMaybeMessage< ::hbase::pb::FamilyScope >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FamilyScope >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::CompactionDescriptor* Arena::CreateMaybeMessage< ::hbase::pb::CompactionDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::CompactionDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FlushDescriptor_StoreFlushDescriptor* Arena::CreateMaybeMessage< ::hbase::pb::FlushDescriptor_StoreFlushDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FlushDescriptor_StoreFlushDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::FlushDescriptor* Arena::CreateMaybeMessage< ::hbase::pb::FlushDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::FlushDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::StoreDescriptor* Arena::CreateMaybeMessage< ::hbase::pb::StoreDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::StoreDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::BulkLoadDescriptor* Arena::CreateMaybeMessage< ::hbase::pb::BulkLoadDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::BulkLoadDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::RegionEventDescriptor* Arena::CreateMaybeMessage< ::hbase::pb::RegionEventDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::RegionEventDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::WALTrailer* Arena::CreateMaybeMessage< ::hbase::pb::WALTrailer >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::WALTrailer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
