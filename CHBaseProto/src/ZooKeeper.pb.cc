// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZooKeeper.proto

#include "ZooKeeper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BytesBytesPair_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameStringPair_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerName_HBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZooKeeper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TableCF_ZooKeeper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableName_HBase_2eproto;
namespace hbase {
namespace pb {
class MetaRegionServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaRegionServer> _instance;
} _MetaRegionServer_default_instance_;
class MasterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Master> _instance;
} _Master_default_instance_;
class ClusterUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterUp> _instance;
} _ClusterUp_default_instance_;
class SplitLogTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitLogTask> _instance;
} _SplitLogTask_default_instance_;
class DeprecatedTableStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeprecatedTableState> _instance;
} _DeprecatedTableState_default_instance_;
class TableCFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableCF> _instance;
} _TableCF_default_instance_;
class ReplicationPeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicationPeer> _instance;
} _ReplicationPeer_default_instance_;
class ReplicationStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicationState> _instance;
} _ReplicationState_default_instance_;
class ReplicationHLogPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplicationHLogPosition> _instance;
} _ReplicationHLogPosition_default_instance_;
class SwitchStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwitchState> _instance;
} _SwitchState_default_instance_;
}  // namespace pb
}  // namespace hbase
static void InitDefaultsscc_info_ClusterUp_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ClusterUp_default_instance_;
    new (ptr) ::hbase::pb::ClusterUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ClusterUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClusterUp_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClusterUp_ZooKeeper_2eproto}, {}};

static void InitDefaultsscc_info_DeprecatedTableState_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_DeprecatedTableState_default_instance_;
    new (ptr) ::hbase::pb::DeprecatedTableState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::DeprecatedTableState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeprecatedTableState_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeprecatedTableState_ZooKeeper_2eproto}, {}};

static void InitDefaultsscc_info_Master_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_Master_default_instance_;
    new (ptr) ::hbase::pb::Master();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::Master::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Master_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Master_ZooKeeper_2eproto}, {
      &scc_info_ServerName_HBase_2eproto.base,}};

static void InitDefaultsscc_info_MetaRegionServer_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_MetaRegionServer_default_instance_;
    new (ptr) ::hbase::pb::MetaRegionServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::MetaRegionServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetaRegionServer_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MetaRegionServer_ZooKeeper_2eproto}, {
      &scc_info_ServerName_HBase_2eproto.base,}};

static void InitDefaultsscc_info_ReplicationHLogPosition_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ReplicationHLogPosition_default_instance_;
    new (ptr) ::hbase::pb::ReplicationHLogPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ReplicationHLogPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicationHLogPosition_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReplicationHLogPosition_ZooKeeper_2eproto}, {}};

static void InitDefaultsscc_info_ReplicationPeer_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ReplicationPeer_default_instance_;
    new (ptr) ::hbase::pb::ReplicationPeer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ReplicationPeer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReplicationPeer_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ReplicationPeer_ZooKeeper_2eproto}, {
      &scc_info_BytesBytesPair_HBase_2eproto.base,
      &scc_info_NameStringPair_HBase_2eproto.base,
      &scc_info_TableCF_ZooKeeper_2eproto.base,}};

static void InitDefaultsscc_info_ReplicationState_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_ReplicationState_default_instance_;
    new (ptr) ::hbase::pb::ReplicationState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::ReplicationState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplicationState_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReplicationState_ZooKeeper_2eproto}, {}};

static void InitDefaultsscc_info_SplitLogTask_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SplitLogTask_default_instance_;
    new (ptr) ::hbase::pb::SplitLogTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SplitLogTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SplitLogTask_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SplitLogTask_ZooKeeper_2eproto}, {
      &scc_info_ServerName_HBase_2eproto.base,}};

static void InitDefaultsscc_info_SwitchState_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_SwitchState_default_instance_;
    new (ptr) ::hbase::pb::SwitchState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::SwitchState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwitchState_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SwitchState_ZooKeeper_2eproto}, {}};

static void InitDefaultsscc_info_TableCF_ZooKeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hbase::pb::_TableCF_default_instance_;
    new (ptr) ::hbase::pb::TableCF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hbase::pb::TableCF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TableCF_ZooKeeper_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TableCF_ZooKeeper_2eproto}, {
      &scc_info_TableName_HBase_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ZooKeeper_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ZooKeeper_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ZooKeeper_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ZooKeeper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MetaRegionServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MetaRegionServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MetaRegionServer, server_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MetaRegionServer, rpc_version_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::MetaRegionServer, state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Master, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Master, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Master, master_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Master, rpc_version_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::Master, info_port_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ClusterUp, start_date_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitLogTask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitLogTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitLogTask, state_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SplitLogTask, server_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DeprecatedTableState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DeprecatedTableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::DeprecatedTableState, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TableCF, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TableCF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TableCF, table_name_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::TableCF, families_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationPeer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationPeer, clusterkey_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationPeer, replicationendpointimpl_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationPeer, data_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationPeer, configuration_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationPeer, table_cfs_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationPeer, namespaces_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationPeer, bandwidth_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationState, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationHLogPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationHLogPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::ReplicationHLogPosition, position_),
  0,
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SwitchState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SwitchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hbase::pb::SwitchState, enabled_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::hbase::pb::MetaRegionServer)},
  { 11, 19, sizeof(::hbase::pb::Master)},
  { 22, 28, sizeof(::hbase::pb::ClusterUp)},
  { 29, 36, sizeof(::hbase::pb::SplitLogTask)},
  { 38, 44, sizeof(::hbase::pb::DeprecatedTableState)},
  { 45, 52, sizeof(::hbase::pb::TableCF)},
  { 54, 66, sizeof(::hbase::pb::ReplicationPeer)},
  { 73, 79, sizeof(::hbase::pb::ReplicationState)},
  { 80, 86, sizeof(::hbase::pb::ReplicationHLogPosition)},
  { 87, 93, sizeof(::hbase::pb::SwitchState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_MetaRegionServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_Master_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ClusterUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SplitLogTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_DeprecatedTableState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_TableCF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ReplicationPeer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ReplicationState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_ReplicationHLogPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hbase::pb::_SwitchState_default_instance_),
};

const char descriptor_table_protodef_ZooKeeper_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ZooKeeper.proto\022\010hbase.pb\032\013HBase.proto"
  "\032\023ClusterStatus.proto\"y\n\020MetaRegionServe"
  "r\022$\n\006server\030\001 \002(\0132\024.hbase.pb.ServerName\022"
  "\023\n\013rpc_version\030\002 \001(\r\022*\n\005state\030\003 \001(\0162\033.hb"
  "ase.pb.RegionState.State\"V\n\006Master\022$\n\006ma"
  "ster\030\001 \002(\0132\024.hbase.pb.ServerName\022\023\n\013rpc_"
  "version\030\002 \001(\r\022\021\n\tinfo_port\030\003 \001(\r\"\037\n\tClus"
  "terUp\022\022\n\nstart_date\030\001 \002(\t\"\253\001\n\014SplitLogTa"
  "sk\022+\n\005state\030\001 \002(\0162\034.hbase.pb.SplitLogTas"
  "k.State\022)\n\013server_name\030\002 \002(\0132\024.hbase.pb."
  "ServerName\"C\n\005State\022\016\n\nUNASSIGNED\020\000\022\t\n\005O"
  "WNED\020\001\022\014\n\010RESIGNED\020\002\022\010\n\004DONE\020\003\022\007\n\003ERR\020\004\""
  "\225\001\n\024DeprecatedTableState\022<\n\005state\030\001 \002(\0162"
  "$.hbase.pb.DeprecatedTableState.State:\007E"
  "NABLED\"\?\n\005State\022\013\n\007ENABLED\020\000\022\014\n\010DISABLED"
  "\020\001\022\r\n\tDISABLING\020\002\022\014\n\010ENABLING\020\003\"D\n\007Table"
  "CF\022\'\n\ntable_name\030\001 \001(\0132\023.hbase.pb.TableN"
  "ame\022\020\n\010families\030\002 \003(\014\"\354\001\n\017ReplicationPee"
  "r\022\022\n\nclusterkey\030\001 \002(\t\022\037\n\027replicationEndp"
  "ointImpl\030\002 \001(\t\022&\n\004data\030\003 \003(\0132\030.hbase.pb."
  "BytesBytesPair\022/\n\rconfiguration\030\004 \003(\0132\030."
  "hbase.pb.NameStringPair\022$\n\ttable_cfs\030\005 \003"
  "(\0132\021.hbase.pb.TableCF\022\022\n\nnamespaces\030\006 \003("
  "\014\022\021\n\tbandwidth\030\007 \001(\003\"g\n\020ReplicationState"
  "\022/\n\005state\030\001 \002(\0162 .hbase.pb.ReplicationSt"
  "ate.State\"\"\n\005State\022\013\n\007ENABLED\020\000\022\014\n\010DISAB"
  "LED\020\001\"+\n\027ReplicationHLogPosition\022\020\n\010posi"
  "tion\030\001 \002(\003\"\036\n\013SwitchState\022\017\n\007enabled\030\001 \001"
  "(\010BE\n*org.apache.hadoop.hbase.protobuf.g"
  "eneratedB\017ZooKeeperProtosH\001\210\001\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ZooKeeper_2eproto_deps[2] = {
  &::descriptor_table_ClusterStatus_2eproto,
  &::descriptor_table_HBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ZooKeeper_2eproto_sccs[10] = {
  &scc_info_ClusterUp_ZooKeeper_2eproto.base,
  &scc_info_DeprecatedTableState_ZooKeeper_2eproto.base,
  &scc_info_Master_ZooKeeper_2eproto.base,
  &scc_info_MetaRegionServer_ZooKeeper_2eproto.base,
  &scc_info_ReplicationHLogPosition_ZooKeeper_2eproto.base,
  &scc_info_ReplicationPeer_ZooKeeper_2eproto.base,
  &scc_info_ReplicationState_ZooKeeper_2eproto.base,
  &scc_info_SplitLogTask_ZooKeeper_2eproto.base,
  &scc_info_SwitchState_ZooKeeper_2eproto.base,
  &scc_info_TableCF_ZooKeeper_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ZooKeeper_2eproto_once;
static bool descriptor_table_ZooKeeper_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZooKeeper_2eproto = {
  &descriptor_table_ZooKeeper_2eproto_initialized, descriptor_table_protodef_ZooKeeper_2eproto, "ZooKeeper.proto", 1193,
  &descriptor_table_ZooKeeper_2eproto_once, descriptor_table_ZooKeeper_2eproto_sccs, descriptor_table_ZooKeeper_2eproto_deps, 10, 2,
  schemas, file_default_instances, TableStruct_ZooKeeper_2eproto::offsets,
  file_level_metadata_ZooKeeper_2eproto, 10, file_level_enum_descriptors_ZooKeeper_2eproto, file_level_service_descriptors_ZooKeeper_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ZooKeeper_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ZooKeeper_2eproto), true);
namespace hbase {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SplitLogTask_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZooKeeper_2eproto);
  return file_level_enum_descriptors_ZooKeeper_2eproto[0];
}
bool SplitLogTask_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SplitLogTask_State SplitLogTask::UNASSIGNED;
constexpr SplitLogTask_State SplitLogTask::OWNED;
constexpr SplitLogTask_State SplitLogTask::RESIGNED;
constexpr SplitLogTask_State SplitLogTask::DONE;
constexpr SplitLogTask_State SplitLogTask::ERR;
constexpr SplitLogTask_State SplitLogTask::State_MIN;
constexpr SplitLogTask_State SplitLogTask::State_MAX;
constexpr int SplitLogTask::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeprecatedTableState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZooKeeper_2eproto);
  return file_level_enum_descriptors_ZooKeeper_2eproto[1];
}
bool DeprecatedTableState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeprecatedTableState_State DeprecatedTableState::ENABLED;
constexpr DeprecatedTableState_State DeprecatedTableState::DISABLED;
constexpr DeprecatedTableState_State DeprecatedTableState::DISABLING;
constexpr DeprecatedTableState_State DeprecatedTableState::ENABLING;
constexpr DeprecatedTableState_State DeprecatedTableState::State_MIN;
constexpr DeprecatedTableState_State DeprecatedTableState::State_MAX;
constexpr int DeprecatedTableState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReplicationState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZooKeeper_2eproto);
  return file_level_enum_descriptors_ZooKeeper_2eproto[2];
}
bool ReplicationState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReplicationState_State ReplicationState::ENABLED;
constexpr ReplicationState_State ReplicationState::DISABLED;
constexpr ReplicationState_State ReplicationState::State_MIN;
constexpr ReplicationState_State ReplicationState::State_MAX;
constexpr int ReplicationState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MetaRegionServer::InitAsDefaultInstance() {
  ::hbase::pb::_MetaRegionServer_default_instance_._instance.get_mutable()->server_ = const_cast< ::hbase::pb::ServerName*>(
      ::hbase::pb::ServerName::internal_default_instance());
}
class MetaRegionServer::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaRegionServer>()._has_bits_);
  static const ::hbase::pb::ServerName& server(const MetaRegionServer* msg);
  static void set_has_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rpc_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::ServerName&
MetaRegionServer::_Internal::server(const MetaRegionServer* msg) {
  return *msg->server_;
}
void MetaRegionServer::clear_server() {
  if (server_ != nullptr) server_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MetaRegionServer::MetaRegionServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.MetaRegionServer)
}
MetaRegionServer::MetaRegionServer(const MetaRegionServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::hbase::pb::ServerName(*from.server_);
  } else {
    server_ = nullptr;
  }
  ::memcpy(&rpc_version_, &from.rpc_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&rpc_version_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.MetaRegionServer)
}

void MetaRegionServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetaRegionServer_ZooKeeper_2eproto.base);
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&server_)) + sizeof(state_));
}

MetaRegionServer::~MetaRegionServer() {
  // @@protoc_insertion_point(destructor:hbase.pb.MetaRegionServer)
  SharedDtor();
}

void MetaRegionServer::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void MetaRegionServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaRegionServer& MetaRegionServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaRegionServer_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void MetaRegionServer::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.MetaRegionServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != nullptr);
    server_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&rpc_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&rpc_version_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetaRegionServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ServerName server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpc_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rpc_version(&has_bits);
          rpc_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hbase.pb.RegionState.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::RegionState_State_IsValid(val))) {
            set_state(static_cast<::hbase::pb::RegionState_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetaRegionServer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.MetaRegionServer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName server = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpc_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_rpc_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpc_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hbase.pb.RegionState.State state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::RegionState_State_IsValid(value)) {
            set_state(static_cast< ::hbase::pb::RegionState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.MetaRegionServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.MetaRegionServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetaRegionServer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.MetaRegionServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerName server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::server(this), output);
  }

  // optional uint32 rpc_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->rpc_version(), output);
  }

  // optional .hbase.pb.RegionState.State state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.MetaRegionServer)
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaRegionServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.MetaRegionServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerName server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::server(this), target);
  }

  // optional uint32 rpc_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->rpc_version(), target);
  }

  // optional .hbase.pb.RegionState.State state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.MetaRegionServer)
  return target;
}

size_t MetaRegionServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.MetaRegionServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.ServerName server = 1;
  if (has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 rpc_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rpc_version());
    }

    // optional .hbase.pb.RegionState.State state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaRegionServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.MetaRegionServer)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaRegionServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaRegionServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.MetaRegionServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.MetaRegionServer)
    MergeFrom(*source);
  }
}

void MetaRegionServer::MergeFrom(const MetaRegionServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.MetaRegionServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::hbase::pb::ServerName::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      rpc_version_ = from.rpc_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetaRegionServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.MetaRegionServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaRegionServer::CopyFrom(const MetaRegionServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.MetaRegionServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaRegionServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void MetaRegionServer::InternalSwap(MetaRegionServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_, other->server_);
  swap(rpc_version_, other->rpc_version_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaRegionServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Master::InitAsDefaultInstance() {
  ::hbase::pb::_Master_default_instance_._instance.get_mutable()->master_ = const_cast< ::hbase::pb::ServerName*>(
      ::hbase::pb::ServerName::internal_default_instance());
}
class Master::_Internal {
 public:
  using HasBits = decltype(std::declval<Master>()._has_bits_);
  static const ::hbase::pb::ServerName& master(const Master* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rpc_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hbase::pb::ServerName&
Master::_Internal::master(const Master* msg) {
  return *msg->master_;
}
void Master::clear_master() {
  if (master_ != nullptr) master_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Master::Master()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.Master)
}
Master::Master(const Master& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_master()) {
    master_ = new ::hbase::pb::ServerName(*from.master_);
  } else {
    master_ = nullptr;
  }
  ::memcpy(&rpc_version_, &from.rpc_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&info_port_) -
    reinterpret_cast<char*>(&rpc_version_)) + sizeof(info_port_));
  // @@protoc_insertion_point(copy_constructor:hbase.pb.Master)
}

void Master::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Master_ZooKeeper_2eproto.base);
  ::memset(&master_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_port_) -
      reinterpret_cast<char*>(&master_)) + sizeof(info_port_));
}

Master::~Master() {
  // @@protoc_insertion_point(destructor:hbase.pb.Master)
  SharedDtor();
}

void Master::SharedDtor() {
  if (this != internal_default_instance()) delete master_;
}

void Master::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Master& Master::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Master_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void Master::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.Master)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(master_ != nullptr);
    master_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&rpc_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&info_port_) -
        reinterpret_cast<char*>(&rpc_version_)) + sizeof(info_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Master::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ServerName master = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rpc_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rpc_version(&has_bits);
          rpc_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 info_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_info_port(&has_bits);
          info_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Master::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.Master)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ServerName master = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_master()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rpc_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_rpc_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rpc_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 info_port = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_info_port(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.Master)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.Master)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Master::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.Master)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerName master = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::master(this), output);
  }

  // optional uint32 rpc_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->rpc_version(), output);
  }

  // optional uint32 info_port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->info_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.Master)
}

::PROTOBUF_NAMESPACE_ID::uint8* Master::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.Master)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ServerName master = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::master(this), target);
  }

  // optional uint32 rpc_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->rpc_version(), target);
  }

  // optional uint32 info_port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->info_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.Master)
  return target;
}

size_t Master::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.Master)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.ServerName master = 1;
  if (has_master()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *master_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 rpc_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rpc_version());
    }

    // optional uint32 info_port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->info_port());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Master::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.Master)
  GOOGLE_DCHECK_NE(&from, this);
  const Master* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Master>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.Master)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.Master)
    MergeFrom(*source);
  }
}

void Master::MergeFrom(const Master& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.Master)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_master()->::hbase::pb::ServerName::MergeFrom(from.master());
    }
    if (cached_has_bits & 0x00000002u) {
      rpc_version_ = from.rpc_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      info_port_ = from.info_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Master::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.Master)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Master::CopyFrom(const Master& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.Master)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Master::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_master()) {
    if (!this->master_->IsInitialized()) return false;
  }
  return true;
}

void Master::InternalSwap(Master* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(master_, other->master_);
  swap(rpc_version_, other->rpc_version_);
  swap(info_port_, other->info_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Master::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClusterUp::InitAsDefaultInstance() {
}
class ClusterUp::_Internal {
 public:
  using HasBits = decltype(std::declval<ClusterUp>()._has_bits_);
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClusterUp::ClusterUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ClusterUp)
}
ClusterUp::ClusterUp(const ClusterUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_date()) {
    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ClusterUp)
}

void ClusterUp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterUp_ZooKeeper_2eproto.base);
  start_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClusterUp::~ClusterUp() {
  // @@protoc_insertion_point(destructor:hbase.pb.ClusterUp)
  SharedDtor();
}

void ClusterUp::SharedDtor() {
  start_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClusterUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterUp& ClusterUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterUp_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void ClusterUp::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ClusterUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    start_date_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClusterUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string start_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_start_date(), ptr, ctx, "hbase.pb.ClusterUp.start_date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClusterUp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ClusterUp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string start_date = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_date().data(), static_cast<int>(this->start_date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ClusterUp.start_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ClusterUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ClusterUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClusterUp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ClusterUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string start_date = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ClusterUp.start_date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ClusterUp)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterUp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ClusterUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string start_date = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ClusterUp.start_date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->start_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ClusterUp)
  return target;
}

size_t ClusterUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ClusterUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string start_date = 1;
  if (has_start_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->start_date());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ClusterUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ClusterUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ClusterUp)
    MergeFrom(*source);
  }
}

void ClusterUp::MergeFrom(const ClusterUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ClusterUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_date()) {
    _has_bits_[0] |= 0x00000001u;
    start_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
}

void ClusterUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ClusterUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterUp::CopyFrom(const ClusterUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ClusterUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ClusterUp::InternalSwap(ClusterUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_date_.Swap(&other->start_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitLogTask::InitAsDefaultInstance() {
  ::hbase::pb::_SplitLogTask_default_instance_._instance.get_mutable()->server_name_ = const_cast< ::hbase::pb::ServerName*>(
      ::hbase::pb::ServerName::internal_default_instance());
}
class SplitLogTask::_Internal {
 public:
  using HasBits = decltype(std::declval<SplitLogTask>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hbase::pb::ServerName& server_name(const SplitLogTask* msg);
  static void set_has_server_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::ServerName&
SplitLogTask::_Internal::server_name(const SplitLogTask* msg) {
  return *msg->server_name_;
}
void SplitLogTask::clear_server_name() {
  if (server_name_ != nullptr) server_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SplitLogTask::SplitLogTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SplitLogTask)
}
SplitLogTask::SplitLogTask(const SplitLogTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server_name()) {
    server_name_ = new ::hbase::pb::ServerName(*from.server_name_);
  } else {
    server_name_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SplitLogTask)
}

void SplitLogTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SplitLogTask_ZooKeeper_2eproto.base);
  ::memset(&server_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&server_name_)) + sizeof(state_));
}

SplitLogTask::~SplitLogTask() {
  // @@protoc_insertion_point(destructor:hbase.pb.SplitLogTask)
  SharedDtor();
}

void SplitLogTask::SharedDtor() {
  if (this != internal_default_instance()) delete server_name_;
}

void SplitLogTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitLogTask& SplitLogTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitLogTask_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void SplitLogTask::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SplitLogTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_name_ != nullptr);
    server_name_->Clear();
  }
  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitLogTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.SplitLogTask.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::SplitLogTask_State_IsValid(val))) {
            set_state(static_cast<::hbase::pb::SplitLogTask_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .hbase.pb.ServerName server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_server_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitLogTask::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SplitLogTask)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.SplitLogTask.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::SplitLogTask_State_IsValid(value)) {
            set_state(static_cast< ::hbase::pb::SplitLogTask_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hbase.pb.ServerName server_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SplitLogTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SplitLogTask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitLogTask::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SplitLogTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.SplitLogTask.State state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // required .hbase.pb.ServerName server_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::server_name(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SplitLogTask)
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitLogTask::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SplitLogTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.SplitLogTask.State state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // required .hbase.pb.ServerName server_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::server_name(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SplitLogTask)
  return target;
}

size_t SplitLogTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hbase.pb.SplitLogTask)
  size_t total_size = 0;

  if (has_server_name()) {
    // required .hbase.pb.ServerName server_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_name_);
  }

  if (has_state()) {
    // required .hbase.pb.SplitLogTask.State state = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t SplitLogTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SplitLogTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .hbase.pb.ServerName server_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_name_);

    // required .hbase.pb.SplitLogTask.State state = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitLogTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SplitLogTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitLogTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitLogTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SplitLogTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SplitLogTask)
    MergeFrom(*source);
  }
}

void SplitLogTask::MergeFrom(const SplitLogTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SplitLogTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server_name()->::hbase::pb::ServerName::MergeFrom(from.server_name());
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SplitLogTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SplitLogTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitLogTask::CopyFrom(const SplitLogTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SplitLogTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitLogTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_server_name()) {
    if (!this->server_name_->IsInitialized()) return false;
  }
  return true;
}

void SplitLogTask::InternalSwap(SplitLogTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_name_, other->server_name_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitLogTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeprecatedTableState::InitAsDefaultInstance() {
}
class DeprecatedTableState::_Internal {
 public:
  using HasBits = decltype(std::declval<DeprecatedTableState>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeprecatedTableState::DeprecatedTableState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.DeprecatedTableState)
}
DeprecatedTableState::DeprecatedTableState(const DeprecatedTableState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.DeprecatedTableState)
}

void DeprecatedTableState::SharedCtor() {
  state_ = 0;
}

DeprecatedTableState::~DeprecatedTableState() {
  // @@protoc_insertion_point(destructor:hbase.pb.DeprecatedTableState)
  SharedDtor();
}

void DeprecatedTableState::SharedDtor() {
}

void DeprecatedTableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeprecatedTableState& DeprecatedTableState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeprecatedTableState_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void DeprecatedTableState::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.DeprecatedTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeprecatedTableState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.DeprecatedTableState.State state = 1 [default = ENABLED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::DeprecatedTableState_State_IsValid(val))) {
            set_state(static_cast<::hbase::pb::DeprecatedTableState_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeprecatedTableState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.DeprecatedTableState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.DeprecatedTableState.State state = 1 [default = ENABLED];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::DeprecatedTableState_State_IsValid(value)) {
            set_state(static_cast< ::hbase::pb::DeprecatedTableState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.DeprecatedTableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.DeprecatedTableState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeprecatedTableState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.DeprecatedTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.DeprecatedTableState.State state = 1 [default = ENABLED];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.DeprecatedTableState)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeprecatedTableState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.DeprecatedTableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.DeprecatedTableState.State state = 1 [default = ENABLED];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.DeprecatedTableState)
  return target;
}

size_t DeprecatedTableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.DeprecatedTableState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.DeprecatedTableState.State state = 1 [default = ENABLED];
  if (has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeprecatedTableState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.DeprecatedTableState)
  GOOGLE_DCHECK_NE(&from, this);
  const DeprecatedTableState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeprecatedTableState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.DeprecatedTableState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.DeprecatedTableState)
    MergeFrom(*source);
  }
}

void DeprecatedTableState::MergeFrom(const DeprecatedTableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.DeprecatedTableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void DeprecatedTableState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.DeprecatedTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeprecatedTableState::CopyFrom(const DeprecatedTableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.DeprecatedTableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecatedTableState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DeprecatedTableState::InternalSwap(DeprecatedTableState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeprecatedTableState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableCF::InitAsDefaultInstance() {
  ::hbase::pb::_TableCF_default_instance_._instance.get_mutable()->table_name_ = const_cast< ::hbase::pb::TableName*>(
      ::hbase::pb::TableName::internal_default_instance());
}
class TableCF::_Internal {
 public:
  using HasBits = decltype(std::declval<TableCF>()._has_bits_);
  static const ::hbase::pb::TableName& table_name(const TableCF* msg);
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hbase::pb::TableName&
TableCF::_Internal::table_name(const TableCF* msg) {
  return *msg->table_name_;
}
void TableCF::clear_table_name() {
  if (table_name_ != nullptr) table_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TableCF::TableCF()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.TableCF)
}
TableCF::TableCF(const TableCF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      families_(from.families_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_name()) {
    table_name_ = new ::hbase::pb::TableName(*from.table_name_);
  } else {
    table_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hbase.pb.TableCF)
}

void TableCF::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableCF_ZooKeeper_2eproto.base);
  table_name_ = nullptr;
}

TableCF::~TableCF() {
  // @@protoc_insertion_point(destructor:hbase.pb.TableCF)
  SharedDtor();
}

void TableCF::SharedDtor() {
  if (this != internal_default_instance()) delete table_name_;
}

void TableCF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableCF& TableCF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableCF_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void TableCF::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.TableCF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  families_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_name_ != nullptr);
    table_name_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TableCF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hbase.pb.TableName table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_table_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes families = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_families(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TableCF::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.TableCF)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hbase.pb.TableName table_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes families = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_families()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.TableCF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.TableCF)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TableCF::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.TableCF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.TableName table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::table_name(this), output);
  }

  // repeated bytes families = 2;
  for (int i = 0, n = this->families_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->families(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.TableCF)
}

::PROTOBUF_NAMESPACE_ID::uint8* TableCF::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.TableCF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hbase.pb.TableName table_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::table_name(this), target);
  }

  // repeated bytes families = 2;
  for (int i = 0, n = this->families_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->families(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.TableCF)
  return target;
}

size_t TableCF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.TableCF)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes families = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->families_size());
  for (int i = 0, n = this->families_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->families(i));
  }

  // optional .hbase.pb.TableName table_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_name_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableCF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.TableCF)
  GOOGLE_DCHECK_NE(&from, this);
  const TableCF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableCF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.TableCF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.TableCF)
    MergeFrom(*source);
  }
}

void TableCF::MergeFrom(const TableCF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.TableCF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  families_.MergeFrom(from.families_);
  if (from.has_table_name()) {
    mutable_table_name()->::hbase::pb::TableName::MergeFrom(from.table_name());
  }
}

void TableCF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.TableCF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCF::CopyFrom(const TableCF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.TableCF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCF::IsInitialized() const {
  if (has_table_name()) {
    if (!this->table_name_->IsInitialized()) return false;
  }
  return true;
}

void TableCF::InternalSwap(TableCF* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  families_.InternalSwap(CastToBase(&other->families_));
  swap(table_name_, other->table_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicationPeer::InitAsDefaultInstance() {
}
class ReplicationPeer::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicationPeer>()._has_bits_);
  static void set_has_clusterkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_replicationendpointimpl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void ReplicationPeer::clear_data() {
  data_.Clear();
}
void ReplicationPeer::clear_configuration() {
  configuration_.Clear();
}
ReplicationPeer::ReplicationPeer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ReplicationPeer)
}
ReplicationPeer::ReplicationPeer(const ReplicationPeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_),
      configuration_(from.configuration_),
      table_cfs_(from.table_cfs_),
      namespaces_(from.namespaces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clusterkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_clusterkey()) {
    clusterkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clusterkey_);
  }
  replicationendpointimpl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_replicationendpointimpl()) {
    replicationendpointimpl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.replicationendpointimpl_);
  }
  bandwidth_ = from.bandwidth_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ReplicationPeer)
}

void ReplicationPeer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplicationPeer_ZooKeeper_2eproto.base);
  clusterkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  replicationendpointimpl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bandwidth_ = PROTOBUF_LONGLONG(0);
}

ReplicationPeer::~ReplicationPeer() {
  // @@protoc_insertion_point(destructor:hbase.pb.ReplicationPeer)
  SharedDtor();
}

void ReplicationPeer::SharedDtor() {
  clusterkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  replicationendpointimpl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplicationPeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicationPeer& ReplicationPeer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicationPeer_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void ReplicationPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ReplicationPeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  configuration_.Clear();
  table_cfs_.Clear();
  namespaces_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clusterkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      replicationendpointimpl_.ClearNonDefaultToEmptyNoArena();
    }
  }
  bandwidth_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplicationPeer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string clusterkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_clusterkey(), ptr, ctx, "hbase.pb.ReplicationPeer.clusterkey");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string replicationEndpointImpl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_replicationendpointimpl(), ptr, ctx, "hbase.pb.ReplicationPeer.replicationEndpointImpl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.BytesBytesPair data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.NameStringPair configuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .hbase.pb.TableCF table_cfs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_table_cfs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated bytes namespaces = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_namespaces(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional int64 bandwidth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bandwidth(&has_bits);
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplicationPeer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ReplicationPeer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clusterkey = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_clusterkey()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clusterkey().data(), static_cast<int>(this->clusterkey().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ReplicationPeer.clusterkey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string replicationEndpointImpl = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_replicationendpointimpl()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replicationendpointimpl().data(), static_cast<int>(this->replicationendpointimpl().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "hbase.pb.ReplicationPeer.replicationEndpointImpl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.BytesBytesPair data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.NameStringPair configuration = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hbase.pb.TableCF table_cfs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_table_cfs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes namespaces = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_namespaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bandwidth = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_bandwidth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ReplicationPeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ReplicationPeer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplicationPeer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ReplicationPeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clusterkey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clusterkey().data(), static_cast<int>(this->clusterkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicationPeer.clusterkey");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clusterkey(), output);
  }

  // optional string replicationEndpointImpl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replicationendpointimpl().data(), static_cast<int>(this->replicationendpointimpl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicationPeer.replicationEndpointImpl");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->replicationendpointimpl(), output);
  }

  // repeated .hbase.pb.BytesBytesPair data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->data(static_cast<int>(i)),
      output);
  }

  // repeated .hbase.pb.NameStringPair configuration = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configuration_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->configuration(static_cast<int>(i)),
      output);
  }

  // repeated .hbase.pb.TableCF table_cfs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->table_cfs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->table_cfs(static_cast<int>(i)),
      output);
  }

  // repeated bytes namespaces = 6;
  for (int i = 0, n = this->namespaces_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      6, this->namespaces(i), output);
  }

  // optional int64 bandwidth = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->bandwidth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ReplicationPeer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicationPeer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ReplicationPeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clusterkey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clusterkey().data(), static_cast<int>(this->clusterkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicationPeer.clusterkey");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->clusterkey(), target);
  }

  // optional string replicationEndpointImpl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replicationendpointimpl().data(), static_cast<int>(this->replicationendpointimpl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hbase.pb.ReplicationPeer.replicationEndpointImpl");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->replicationendpointimpl(), target);
  }

  // repeated .hbase.pb.BytesBytesPair data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->data(static_cast<int>(i)), target);
  }

  // repeated .hbase.pb.NameStringPair configuration = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configuration_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->configuration(static_cast<int>(i)), target);
  }

  // repeated .hbase.pb.TableCF table_cfs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->table_cfs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->table_cfs(static_cast<int>(i)), target);
  }

  // repeated bytes namespaces = 6;
  for (int i = 0, n = this->namespaces_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(6, this->namespaces(i), target);
  }

  // optional int64 bandwidth = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->bandwidth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ReplicationPeer)
  return target;
}

size_t ReplicationPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ReplicationPeer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string clusterkey = 1;
  if (has_clusterkey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->clusterkey());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hbase.pb.BytesBytesPair data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.NameStringPair configuration = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->configuration_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->configuration(static_cast<int>(i)));
    }
  }

  // repeated .hbase.pb.TableCF table_cfs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->table_cfs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->table_cfs(static_cast<int>(i)));
    }
  }

  // repeated bytes namespaces = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->namespaces_size());
  for (int i = 0, n = this->namespaces_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->namespaces(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string replicationEndpointImpl = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->replicationendpointimpl());
    }

    // optional int64 bandwidth = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bandwidth());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicationPeer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ReplicationPeer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicationPeer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicationPeer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ReplicationPeer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ReplicationPeer)
    MergeFrom(*source);
  }
}

void ReplicationPeer::MergeFrom(const ReplicationPeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ReplicationPeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  configuration_.MergeFrom(from.configuration_);
  table_cfs_.MergeFrom(from.table_cfs_);
  namespaces_.MergeFrom(from.namespaces_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      clusterkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clusterkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      replicationendpointimpl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.replicationendpointimpl_);
    }
    if (cached_has_bits & 0x00000004u) {
      bandwidth_ = from.bandwidth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplicationPeer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ReplicationPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicationPeer::CopyFrom(const ReplicationPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ReplicationPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationPeer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->data())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->configuration())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->table_cfs())) return false;
  return true;
}

void ReplicationPeer::InternalSwap(ReplicationPeer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  CastToBase(&configuration_)->InternalSwap(CastToBase(&other->configuration_));
  CastToBase(&table_cfs_)->InternalSwap(CastToBase(&other->table_cfs_));
  namespaces_.InternalSwap(CastToBase(&other->namespaces_));
  clusterkey_.Swap(&other->clusterkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  replicationendpointimpl_.Swap(&other->replicationendpointimpl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bandwidth_, other->bandwidth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicationPeer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicationState::InitAsDefaultInstance() {
}
class ReplicationState::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicationState>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReplicationState::ReplicationState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ReplicationState)
}
ReplicationState::ReplicationState(const ReplicationState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ReplicationState)
}

void ReplicationState::SharedCtor() {
  state_ = 0;
}

ReplicationState::~ReplicationState() {
  // @@protoc_insertion_point(destructor:hbase.pb.ReplicationState)
  SharedDtor();
}

void ReplicationState::SharedDtor() {
}

void ReplicationState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicationState& ReplicationState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicationState_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void ReplicationState::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ReplicationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplicationState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .hbase.pb.ReplicationState.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hbase::pb::ReplicationState_State_IsValid(val))) {
            set_state(static_cast<::hbase::pb::ReplicationState_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplicationState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ReplicationState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hbase.pb.ReplicationState.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hbase::pb::ReplicationState_State_IsValid(value)) {
            set_state(static_cast< ::hbase::pb::ReplicationState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ReplicationState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ReplicationState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplicationState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ReplicationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ReplicationState.State state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ReplicationState)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicationState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ReplicationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hbase.pb.ReplicationState.State state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ReplicationState)
  return target;
}

size_t ReplicationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ReplicationState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .hbase.pb.ReplicationState.State state = 1;
  if (has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicationState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ReplicationState)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicationState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicationState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ReplicationState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ReplicationState)
    MergeFrom(*source);
  }
}

void ReplicationState::MergeFrom(const ReplicationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ReplicationState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void ReplicationState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ReplicationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicationState::CopyFrom(const ReplicationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ReplicationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReplicationState::InternalSwap(ReplicationState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicationState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplicationHLogPosition::InitAsDefaultInstance() {
}
class ReplicationHLogPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicationHLogPosition>()._has_bits_);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReplicationHLogPosition::ReplicationHLogPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.ReplicationHLogPosition)
}
ReplicationHLogPosition::ReplicationHLogPosition(const ReplicationHLogPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.ReplicationHLogPosition)
}

void ReplicationHLogPosition::SharedCtor() {
  position_ = PROTOBUF_LONGLONG(0);
}

ReplicationHLogPosition::~ReplicationHLogPosition() {
  // @@protoc_insertion_point(destructor:hbase.pb.ReplicationHLogPosition)
  SharedDtor();
}

void ReplicationHLogPosition::SharedDtor() {
}

void ReplicationHLogPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplicationHLogPosition& ReplicationHLogPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplicationHLogPosition_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void ReplicationHLogPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.ReplicationHLogPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplicationHLogPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplicationHLogPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.ReplicationHLogPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.ReplicationHLogPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.ReplicationHLogPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplicationHLogPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.ReplicationHLogPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.ReplicationHLogPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicationHLogPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.ReplicationHLogPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.ReplicationHLogPosition)
  return target;
}

size_t ReplicationHLogPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.ReplicationHLogPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 position = 1;
  if (has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->position());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicationHLogPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.ReplicationHLogPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicationHLogPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicationHLogPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.ReplicationHLogPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.ReplicationHLogPosition)
    MergeFrom(*source);
  }
}

void ReplicationHLogPosition::MergeFrom(const ReplicationHLogPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.ReplicationHLogPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    set_position(from.position());
  }
}

void ReplicationHLogPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.ReplicationHLogPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicationHLogPosition::CopyFrom(const ReplicationHLogPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.ReplicationHLogPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicationHLogPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReplicationHLogPosition::InternalSwap(ReplicationHLogPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicationHLogPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwitchState::InitAsDefaultInstance() {
}
class SwitchState::_Internal {
 public:
  using HasBits = decltype(std::declval<SwitchState>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SwitchState::SwitchState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hbase.pb.SwitchState)
}
SwitchState::SwitchState(const SwitchState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:hbase.pb.SwitchState)
}

void SwitchState::SharedCtor() {
  enabled_ = false;
}

SwitchState::~SwitchState() {
  // @@protoc_insertion_point(destructor:hbase.pb.SwitchState)
  SharedDtor();
}

void SwitchState::SharedDtor() {
}

void SwitchState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwitchState& SwitchState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwitchState_ZooKeeper_2eproto.base);
  return *internal_default_instance();
}


void SwitchState::Clear() {
// @@protoc_insertion_point(message_clear_start:hbase.pb.SwitchState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SwitchState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SwitchState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:hbase.pb.SwitchState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hbase.pb.SwitchState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hbase.pb.SwitchState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SwitchState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hbase.pb.SwitchState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hbase.pb.SwitchState)
}

::PROTOBUF_NAMESPACE_ID::uint8* SwitchState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hbase.pb.SwitchState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hbase.pb.SwitchState)
  return target;
}

size_t SwitchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hbase.pb.SwitchState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwitchState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hbase.pb.SwitchState)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwitchState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hbase.pb.SwitchState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hbase.pb.SwitchState)
    MergeFrom(*source);
  }
}

void SwitchState::MergeFrom(const SwitchState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hbase.pb.SwitchState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void SwitchState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hbase.pb.SwitchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchState::CopyFrom(const SwitchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hbase.pb.SwitchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchState::IsInitialized() const {
  return true;
}

void SwitchState::InternalSwap(SwitchState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace hbase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hbase::pb::MetaRegionServer* Arena::CreateMaybeMessage< ::hbase::pb::MetaRegionServer >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::MetaRegionServer >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::Master* Arena::CreateMaybeMessage< ::hbase::pb::Master >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::Master >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ClusterUp* Arena::CreateMaybeMessage< ::hbase::pb::ClusterUp >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ClusterUp >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SplitLogTask* Arena::CreateMaybeMessage< ::hbase::pb::SplitLogTask >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SplitLogTask >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::DeprecatedTableState* Arena::CreateMaybeMessage< ::hbase::pb::DeprecatedTableState >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::DeprecatedTableState >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::TableCF* Arena::CreateMaybeMessage< ::hbase::pb::TableCF >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::TableCF >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ReplicationPeer* Arena::CreateMaybeMessage< ::hbase::pb::ReplicationPeer >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ReplicationPeer >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ReplicationState* Arena::CreateMaybeMessage< ::hbase::pb::ReplicationState >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ReplicationState >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::ReplicationHLogPosition* Arena::CreateMaybeMessage< ::hbase::pb::ReplicationHLogPosition >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::ReplicationHLogPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::hbase::pb::SwitchState* Arena::CreateMaybeMessage< ::hbase::pb::SwitchState >(Arena* arena) {
  return Arena::CreateInternal< ::hbase::pb::SwitchState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
